# Read File Into Vector
snippet readfile
	vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# map
snippet map
	map<${1:key}, ${2:value}> map${3};
# vector
snippet vector
	vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3}
	};
# Class
snippet class
	class ${1:`Filename('$1', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3}
	};
snippet classh
	class ${1:`Filename('$1', 'name')`} : public ${2:Parent_class} {
	public:
		$1 (${3:arguments});
		virtual ~$1 ();
	
	private:
		${4}
	};

snippet cds
	${1:`Filename('$1', 'name')`}::$1(${2:arguments}){
		${3}
	}

	$1::~$1(){
		${4}
	}

snippet regex
	boost::regex pattern ("${1:b(.)lug}",boost::regex_constants::icase|boost::regex_constants::perl);
	string stringa ("${2:Searching for bolug}");
	string replace ("${3:\\1}");
	string newString;

	newString = boost::regex_replace (stringa, pattern, replace);${4}

snippet filebyline2
	ifstream input(${1:"filename"});
	string line;

	while( getline( input, line ) ) {
		${2:cout << line << endl;}
	}

snippet setless
	inline bool operator<(const ${1:Class}& lhs, const $1& rhs) {
		${2:return true;}
	}

snippet grpc client
	#include <iostream>
	#include <memory>
	#include <string>
	#include <grpcpp/grpcpp.h>
	#include "helloworld.grpc.pb.h"
	
	using grpc::Channel;
	using grpc::ClientContext;
	using grpc::Status;
	using helloworld::HelloRequest;
	using helloworld::HelloReply;
	using helloworld::Greeter;
	
	class GreeterClient {

	    // GRPC Client
	    // +---------+   +------+
	    // | Channel |-->| stub |-+
	    // +---------+   +------+ |  +-----+
	    //                        |->| RPC |
	    //      +---------------+ |  +-----+
	    //      | ClientContext |-+
	    //      +---------------+

	 public:
	  GreeterClient(std::shared_ptr<Channel> channel)
	      : stub_(Greeter::NewStub(channel)) {}
	
	  // Assembles the client's payload, sends it and presents the response back
	  // from the server.
	  std::string SayHello(const std::string& user) {
	    // Data we are sending to the server.
	    HelloRequest request;
	    request.set_name(user);
	
	    // Container for the data we expect from the server.
	    HelloReply reply;
	
	    // Context for the client. It could be used to convey extra information to
	    // the server and/or tweak certain RPC behaviors.
	    ClientContext context;
	
	    // The actual RPC.
	    Status status = stub_->SayHello(&context, request, &reply);
	
	    // Act upon its status.
	    if (status.ok()) {
	      return reply.message();
	    } else {
	      std::cout << status.error_code() << ": " << status.error_message()
	                << std::endl;
	      return "RPC failed";
	    }
	  }
	
	 private:
	  std::unique_ptr<Greeter::Stub> stub_;
	};
	
	int main(int argc, char** argv) {
	  // Instantiate the client. It requires a channel, out of which the actual RPCs
	  // are created. This channel models a connection to an endpoint (in this case,
	  // localhost at port 50051). We indicate that the channel isn't authenticated
	  // (use of InsecureChannelCredentials()).
	  GreeterClient greeter(grpc::CreateChannel(
	      "localhost:50051", grpc::InsecureChannelCredentials()));
	  std::string user("world");
	  std::string reply = greeter.SayHello(user);
	  std::cout << "Greeter received: " << reply << std::endl;
	
	  return 0;
	}


snippet grpc server
	#include <iostream>
	#include <memory>
	#include <string>
	#include <grpcpp/grpcpp.h>
	#include "helloworld.grpc.pb.h"
	
	using grpc::Server;
	using grpc::ServerBuilder;
	using grpc::ServerContext;
	using grpc::Status;
	using helloworld::HelloRequest;
	using helloworld::HelloReply;
	using helloworld::Greeter;
	
	// Logic and data behind the server's behavior.
	class GreeterServiceImpl final : public Greeter::Service {
	  Status SayHello(ServerContext* context, const HelloRequest* request,
	                  HelloReply* reply) override {
	    std::string prefix("Hello ");
	    reply->set_message(prefix + request->name());
	    return Status::OK;
	  }
	};
	
	// GRPC Server
	//          +------+
	//          | port |----------------+
	//          +------+                |
	// +---------------+   +------------------+   +-----------------+   +---------------+
	// | ServerBuilder |-->| AddListeningPort |-->| RegisterService |-->| BuildAndStart |
	// +---------------+   +------------------+   +-----------------+   +---------------+
	//       +---------+                                   |
	//       | Service |-----------------------------------+
	//       +---------+

	void RunServer() {
	  std::string server_address("0.0.0.0:50051");
	  GreeterServiceImpl service;
	
	  ServerBuilder builder;
	  // Listen on the given address without any authentication mechanism.
	  builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
	  // Register "service" as the instance through which we'll communicate with
	  // clients. In this case it corresponds to an *synchronous* service.
	  builder.RegisterService(&service);
	  // Finally assemble the server.
	  std::unique_ptr<Server> server(builder.BuildAndStart());
	  std::cout << "Server listening on " << server_address << std::endl;
	
	  // Wait for the server to shutdown. Note that some other thread must be
	  // responsible for shutting down the server for this call to ever return.
	  server->Wait();
	}
	
	int main(int argc, char** argv) {
	  RunServer();
	
	  return 0;
	}
