# Read File Into Vector
snippet readfile
	vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# map
snippet map
	map<${1:key}, ${2:value}> map${3};
# vector
snippet vector
	vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3}
	};
# Class
snippet class
	class ${1:`Filename('$1', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3}
	};
snippet classh
	class ${1:`Filename('$1', 'name')`} : public ${2:Parent_class} {
	public:
		$1 (${3:arguments});
		virtual ~$1 ();
	
	private:
		${4}
	};

snippet cds
	${1:`Filename('$1', 'name')`}::$1(${2:arguments}){
		${3}
	}

	$1::~$1(){
		${4}
	}

snippet regex
	boost::regex pattern ("${1:b(.)lug}",boost::regex_constants::icase|boost::regex_constants::perl);
	string stringa ("${2:Searching for bolug}");
	string replace ("${3:\\1}");
	string newString;

	newString = boost::regex_replace (stringa, pattern, replace);${4}

snippet filebyline2
	ifstream input(${1:"filename"});
	string line;

	while( getline( input, line ) ) {
		${2:cout << line << endl;}
	}

snippet setless
	inline bool operator<(const ${1:Class}& lhs, const $1& rhs) {
		${2:return true;}
	}

snippet grpc client
	#include <iostream>
	#include <memory>
	#include <string>
	#include <grpcpp/grpcpp.h>
	#include "${1:grpc}.grpc.pb.h"
	
	using grpc::Channel;
	using grpc::ClientContext;
	using grpc::Status;
	using $1::${4:Request};
	using $1::${5:Reply};
	using $1::${2:Service};
	
	class $2Client {

	    // GRPC Client
	    // +---------+   +------+
	    // | Channel |-->| stub |-+
	    // +---------+   +------+ |  +-----+
	    //                        |->| RPC |
	    //      +---------------+ |  +-----+
	    //      | ClientContext |-+
	    //      +---------------+

	 public:
	  $2Client(std::shared_ptr<Channel> channel)
	      : stub_($2::NewStub(channel)) {}
	
	  // Assembles the client's payload, sends it and presents the response back
	  // from the server.
	  std::string ${3:procedure}(const std::string& user) {
	    // Data we are sending to the server.
	    $4 request;
	    request.set_name(user);
	
	    // Container for the data we expect from the server.
	    $5 reply;
	
	    // Context for the client. It could be used to convey extra information to
	    // the server and/or tweak certain RPC behaviors.
	    ClientContext context;
	
	    // The actual RPC.
	    Status status = stub_->$3(&context, request, &reply);
	
	    // Act upon its status.
	    if (status.ok()) {
	      return reply.message();
	    } else {
	      std::cout << status.error_code() << ": " << status.error_message()
	                << std::endl;
	      return "RPC failed";
	    }
	  }
	
	 private:
	  std::unique_ptr<$2::Stub> stub_;
	};
	
	int main(int argc, char** argv) {
	  // Instantiate the client. It requires a channel, out of which the actual RPCs
	  // are created. This channel models a connection to an endpoint (in this case,
	  // localhost at port 50051). We indicate that the channel isn't authenticated
	  // (use of InsecureChannelCredentials()).
	  $2Client greeter(grpc::CreateChannel(
	      "localhost:50051", grpc::InsecureChannelCredentials()));
	  std::string user("world");
	  std::string reply = greeter.$3(user);
	  std::cout << "$2 received: " << reply << std::endl;
	
	  return 0;
	}


snippet grpc server
	#include <iostream>
	#include <memory>
	#include <string>
	#include <grpcpp/grpcpp.h>
	#include "${1:proto}.grpc.pb.h"
	
	using grpc::Server;
	using grpc::ServerBuilder;
	using grpc::ServerContext;
	using grpc::Status;
	using $1::${4:Request};
	using $1::${5:Reply};
	using $1::${2:Service};
	
	// Logic and data behind the server's behavior.
	class GreeterServiceImpl final : public $2::Service {
	  Status ${3:procedure}(ServerContext* context, const $4* request,
	                  $5* reply) override {
	    std::string prefix("Hello ");
	    reply->set_message(prefix + request->name());
	    return Status::OK;
	  }
	};
	
	// GRPC Server
	//          +------+
	//          | port |----------------+
	//          +------+                |
	// +---------------+   +------------------+   +-----------------+
	// | ServerBuilder |-->| AddListeningPort |-->| RegisterService |
	// +---------------+   +------------------+   +-----------------+
	//       +---------+                               |    |
	//       | Service |-------------------------------+    |
	//       +---------+                                    |
	//                                              +---------------+
	//                                              | BuildAndStart |
	//                                              +---------------+

	void RunServer() {
	  std::string server_address("0.0.0.0:50051");
	  GreeterServiceImpl service;
	
	  ServerBuilder builder;
	  // Listen on the given address without any authentication mechanism.
	  builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
	  // Register "service" as the instance through which we'll communicate with
	  // clients. In this case it corresponds to an *synchronous* service.
	  builder.RegisterService(&service);
	  // Finally assemble the server.
	  std::unique_ptr<Server> server(builder.BuildAndStart());
	  std::cout << "Server listening on " << server_address << std::endl;
	
	  // Wait for the server to shutdown. Note that some other thread must be
	  // responsible for shutting down the server for this call to ever return.
	  server->Wait();
	}
	
	int main(int argc, char** argv) {
	  RunServer();
	
	  return 0;
	}

snippet grpc proto
	// protoc -I ../protos --grpc_out=. --plugin=protoc-gen-grpc=$(which grpc_cpp_plugin) ../protos/${1:proto}.proto
	// protoc -I ../protos --cpp_out=. ../protos/$1.proto

	syntax = "proto4";
	
	option java_multiple_files = true;
	option java_package = "io.grpc.examples.$1";
	option java_outer_classname = "HelloWorldProto";
	option objc_class_prefix = "HLW";
	
	package $1;
	
	// The greeting service definition.
	service  ${2:Service}{
	  // Sends a greeting
	  rpc ${3:procedure}(${4:Request}) returns (${5:Reply}) {}
	}
	
	// The request message containing the user's name.
	message $4{
	  string name = 1;
	}
	
	// The response message containing the greetings
	message $5{
	  string message = 1;
	}

snippet pistache client

	#include <atomic>
	#include <pistache/net.h>
	#include <pistache/http.h>
	#include <pistache/client.h>
	
	using namespace Pistache;
	using namespace Pistache::Http;
	
	int main(int argc, char *argv[]) {
	    if (argc < 2) {
	        std::cerr << "Usage: http_client page [count]" << std::endl;
	        return 1;
	    }
	
	    std::string page = argv[1];
	    int count = 1;
	    if (argc == 3) {
	        count = std::stoi(argv[2]);
	    }
	
	    Http::Client client;
	
	    auto opts = Http::Client::options()
	        .threads(1)
	        .maxConnectionsPerHost(8);
	    client.init(opts);
	
	    std::vector<Async::Promise<Http::Response>> responses;
	
	    std::atomic<size_t> completedRequests(0);
	    std::atomic<size_t> failedRequests(0);
	
	    auto start = std::chrono::system_clock::now();
	
	    for (int i = 0; i < count; ++i) {
	        auto resp = client.get(page).cookie(Http::Cookie("FOO", "bar")).send();
	        resp.then([&](Http::Response response) {
	                ++completedRequests;
	            std::cout << "Response code = " << response.code() << std::endl;
	            auto body = response.body();
	            if (!body.empty())
	               std::cout << "Response body = " << body << std::endl;
	        }, Async::IgnoreException);
	        responses.push_back(std::move(resp));
	    }
	
	    auto sync = Async::whenAll(responses.begin(), responses.end());
	    Async::Barrier<std::vector<Http::Response>> barrier(sync);
	
	    barrier.wait_for(std::chrono::seconds(5));
	
	    auto end = std::chrono::system_clock::now();
	    std::cout << "Summary of execution" << std::endl
	              << "Total number of requests sent     : " << count << std::endl
	              << "Total number of responses received: " << completedRequests.load() << std::endl
	              << "Total number of requests failed   : " << failedRequests.load() << std::endl
	              << "Total time of execution           : "
	              << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << "ms" << std::endl;
	
	    client.shutdown();
	}


snippet pistache server
	#include <pistache/net.h>
	#include <pistache/http.h>
	#include <pistache/peer.h>
	#include <pistache/http_headers.h>
	#include <pistache/cookie.h>
	#include <pistache/endpoint.h>
	
	using namespace std;
	using namespace Pistache;
	
	struct PrintException {
	    void operator()(std::exception_ptr exc) const {
	        try {
	            std::rethrow_exception(exc);
	        } catch (const std::exception& e) {
	            std::cerr << "An exception occured: " << e.what() << std::endl;
	        }
	    }
	};
	
	struct LoadMonitor {
	    LoadMonitor(const std::shared_ptr<Http::Endpoint>& endpoint)
	        : endpoint_(endpoint)
	        , interval(std::chrono::seconds(1))
	    { }
	
	    void setInterval(std::chrono::seconds secs) {
	        interval = secs;
	    }
	
	    void start() {
	        shutdown_ = false;
	        thread.reset(new std::thread(std::bind(&LoadMonitor::run, this)));
	    }
	
	    void shutdown() {
	        shutdown_ = true;
	    }
	
	    ~LoadMonitor() {
	        shutdown_ = true;
	        if (thread) thread->join();
	    }
	
	private:
	    std::shared_ptr<Http::Endpoint> endpoint_;
	    std::unique_ptr<std::thread> thread;
	    std::chrono::seconds interval;
	
	    std::atomic<bool> shutdown_;
	
	    void run() {
	        Tcp::Listener::Load old;
	        while (!shutdown_) {
	            if (!endpoint_->isBound()) continue;
	
	            endpoint_->requestLoad(old).then([&](const Tcp::Listener::Load& load) {
	                old = load;
	
	                double global = load.global;
	                if (global > 100) global = 100;
	
	                if (global > 1)
	                    std::cout << "Global load is " << global << "%" << std::endl;
	                else
	                    std::cout << "Global load is 0%" << std::endl;
	            },
	            Async::NoExcept);
	
	            std::this_thread::sleep_for(std::chrono::seconds(interval));
	        }
	    }
	};
	
	
	class MyHandler : public Http::Handler {
	
	    HTTP_PROTOTYPE(MyHandler)
	
	    void onRequest(
	            const Http::Request& req,
	            Http::ResponseWriter response) {
	
	        if (req.resource() == "/ping") {
	            if (req.method() == Http::Method::Get) {
	
	                using namespace Http;
	
	                auto query = req.query();
	                if (query.has("chunked")) {
	                    std::cout << "Using chunked encoding" << std::endl;
	
	                    response.headers()
	                        .add<Header::Server>("pistache/0.1")
	                        .add<Header::ContentType>(MIME(Text, Plain));
	
	                    response.cookies()
	                        .add(Cookie("lang", "en-US"));
	
	                    auto stream = response.stream(Http::Code::Ok);
	                    stream << "PO";
	                    stream << "NG";
	                    stream << ends;
	                }
	                else {
	                    response.send(Http::Code::Ok, "PONG");
	                }
	
	            }
	        }
	        else if (req.resource() == "/echo") {
	            if (req.method() == Http::Method::Post) {
	                response.send(Http::Code::Ok, req.body(), MIME(Text, Plain));
	            } else {
	                response.send(Http::Code::Method_Not_Allowed);
	            }
	        }
	        else if (req.resource() == "/exception") {
	            throw std::runtime_error("Exception thrown in the handler");
	        }
	        else if (req.resource() == "/timeout") {
	            response.timeoutAfter(std::chrono::seconds(2));
	        }
	        else if (req.resource() == "/static") {
	            if (req.method() == Http::Method::Get) {
	                Http::serveFile(response, "README.md").then([](ssize_t bytes) {;
	                    std::cout << "Sent " << bytes << " bytes" << std::endl;
	                }, Async::NoExcept);
	            }
	        } else {
	            response.send(Http::Code::Not_Found);
	        }
	
	    }
	
	    void onTimeout(const Http::Request& req, Http::ResponseWriter response) {
	        response
	            .send(Http::Code::Request_Timeout, "Timeout")
	            .then([=](ssize_t) { }, PrintException());
	    }
	
	};
	
	int main(int argc, char *argv[]) {
	    Port port(9080);
	
	    int thr = 2;
	
	    if (argc >= 2) {
	        port = std::stol(argv[1]);
	
	        if (argc == 3)
	            thr = std::stol(argv[2]);
	    }
	
	    Address addr(Ipv4::any(), port);
	    static constexpr size_t Workers = 4;
	
	    cout << "Cores = " << hardware_concurrency() << endl;
	    cout << "Using " << thr << " threads" << endl;
	
	    auto server = std::make_shared<Http::Endpoint>(addr);
	
	    auto opts = Http::Endpoint::options()
	        .threads(thr)
	        .flags(Tcp::Options::InstallSignalHandler);
	    server->init(opts);
	    server->setHandler(Http::make_handler<MyHandler>());
	    server->serve();
	
	    std::cout << "Shutdowning server" << std::endl;
	    server->shutdown();
	}
	
snippet pistache helloserver
	#include "pistache/endpoint.h"
	
	using namespace Pistache;
	
	class HelloHandler : public Http::Handler {
	public:
	
	    HTTP_PROTOTYPE(HelloHandler)
	
	    void onRequest(const Http::Request& request, Http::ResponseWriter response) {
	        response.send(Http::Code::Ok, "Hello World");
	    }
	};
	
	int main() {
	    Pistache::Address addr(Pistache::Ipv4::any(), Pistache::Port(9080));
	    auto opts = Pistache::Http::Endpoint::options()
	        .threads(1);
	
	    Http::Endpoint server(addr);
	    server.init(opts);
	    server.setHandler(Http::make_handler<HelloHandler>());
	    server.serve();
	
	    server.shutdown();
	}
snippet ofstream
		{ std::ofstream logfile("${1:log.log}", std::ios::app); logfile << "b2" << std::endl; logfile.close(); }
