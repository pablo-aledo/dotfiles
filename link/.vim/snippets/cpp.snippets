# Read File Into Vector
snippet readfile
	vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# map
snippet map
	map<${1:key}, ${2:value}> map${3};
# vector
snippet vector
	vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3}
	};
# Class
snippet class
	class ${1:`Filename('$1', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3}
	};
snippet classh
	class ${1:`Filename('$1', 'name')`} : public ${2:Parent_class} {
	public:
		$1 (${3:arguments});
		virtual ~$1 ();
	
	private:
		${4}
	};

snippet cds
	${1:`Filename('$1', 'name')`}::$1(${2:arguments}){
		${3}
	}

	$1::~$1(){
		${4}
	}

snippet regex
	boost::regex pattern ("${1:b(.)lug}",boost::regex_constants::icase|boost::regex_constants::perl);
	string stringa ("${2:Searching for bolug}");
	string replace ("${3:\\1}");
	string newString;

	newString = boost::regex_replace (stringa, pattern, replace);${4}

snippet filebyline2
	ifstream input(${1:"filename"});
	string line;

	while( getline( input, line ) ) {
		${2:cout << line << endl;}
	}

snippet setless
	inline bool operator<(const ${1:Class}& lhs, const $1& rhs) {
		${2:return true;}
	}


