## Basic Methods

snippet imp
	import moduleName from 'module'

snippet imn
	import 'module'

snippet imd
	import { destructuredModule } from 'module'

snippet ime
	import * as alias from 'module'

snippet ima
	import { originalName as aliasName} from 'module'

snippet exp
	export default moduleName

snippet exd
	export { destructuredModule } from 'module'

snippet exa
	export { originalName as aliasName} from 'module'

snippet enf
	export const functionName = (params) => { }

snippet edf
	export default (params) => { }

snippet met
	methodName = (params) => { }

snippet fre
	arrayName.forEach(element => { }

snippet fof
	for(let itemName of objectName { }

snippet fin
	for(let itemName in objectName { }

snippet anfn
	(params) => { }

snippet nfn
	const functionName = (params) => { }

snippet dob
	const {propName} = objectToDescruct

snippet dar
	const [propName] = arrayToDescruct

snippet sti
	setInterval(() => { }, intervalTime

snippet sto
	setTimeout(() => { }, delayTime

snippet prom
	return new Promise((resolve, reject) => { }

snippet cmmb
	comment block

snippet cp
	const { } = this.props

snippet cs
	const { } = this.state

## React

snippet imr
	import React from 'react'

snippet imrd
	import ReactDOM from 'react-dom'

snippet imrc
	import React, { Component } from 'react'

snippet imrcp
	import React, { Component } from 'react' & import PropTypes from 'prop-types'

snippet imrpc
	import React, { PureComponent } from 'react'

snippet imrpcp
	import React, { PureComponent } from 'react' & import PropTypes from 'prop-types'

snippet imrm
	import React, { memo } from 'react'

snippet imrmp
	import React, { memo } from 'react' & import PropTypes from 'prop-types'

snippet impt
	import PropTypes from 'prop-types'

snippet imrr
	import { BrowserRouter as Router, Route, Link } from 'react-router-dom'

snippet redux
	import { connect } from 'react-redux'

snippet rconst
	constructor(props) with this.state

snippet rconc
	constructor(props, context) with this.state

snippet est
	this.state = { }

snippet cwm
	componentWillMount = () => { }

snippet cdm
	componentDidMount = () => { }

snippet cwr
	componentWillReceiveProps = (nextProps) => { }

snippet scu
	shouldComponentUpdate = (nextProps, nextState) => { }

snippet cwup
	componentWillUpdate = (nextProps, nextState) => { }

snippet cdup
	componentDidUpdate = (prevProps, prevState) => { }

snippet cwun
	componentWillUnmount = () => { }

snippet gdsfp
	static getDerivedStateFromProps(nextProps, prevState) { }

snippet gsbu
	getSnapshotBeforeUpdate = (prevProps, prevState) => { }

snippet ren
	render() { return( ) }

snippet sst
	this.setState({ })

snippet ssf
	this.setState((state, props) => return { })

snippet props
	this.props.propName

snippet state
	this.state.stateName

snippet rcontext
	const ${1:contextName} = React.createContext()

snippet cref
	this.${1:refName}Ref = React.createRef()

snippet fref
	const ref = React.createRef()

snippet bnd
	this.methodName = this.methodName.bind(this)

## React Native

snippet imrn
	import { $1 } from 'react-native'

snippet rnstyle
	const styles = StyleSheet.create({})

## Redux

snippet rxaction
	redux action template

snippet rxconst
	export const $1 = '$1'

snippet rxreducer
	redux reducer template

snippet rxselect
	redux selector template

## PropTypes

snippet pta
	PropTypes.array

snippet ptar
	PropTypes.array.isRequired

snippet ptb
	PropTypes.bool

snippet ptbr
	PropTypes.bool.isRequired

snippet ptf
	PropTypes.func

snippet ptfr
	PropTypes.func.isRequired

snippet ptn
	PropTypes.number

snippet ptnr
	PropTypes.number.isRequired

snippet pto
	PropTypes.object

snippet ptor
	PropTypes.object.isRequired

snippet pts
	PropTypes.string

snippet ptsr
	PropTypes.string.isRequired

snippet ptnd
	PropTypes.node

snippet ptndr
	PropTypes.node.isRequired

snippet ptel
	PropTypes.element

snippet ptelr
	PropTypes.element.isRequired

snippet pti
	PropTypes.instanceOf(name)

snippet ptir
	PropTypes.instanceOf(name).isRequired

snippet pte
	PropTypes.oneOf([name])

snippet pter
	PropTypes.oneOf([name]).isRequired

snippet ptet
	PropTypes.oneOfType([name])

snippet ptetr
	PropTypes.oneOfType([name]).isRequired

snippet ptao
	PropTypes.arrayOf(name)

snippet ptaor
	PropTypes.arrayOf(name).isRequired

snippet ptoo
	PropTypes.objectOf(name)

snippet ptoor
	PropTypes.objectOf(name).isRequired

snippet ptsh
	PropTypes.shape({ })

snippet ptshr
	PropTypes.shape({ }).isRequired

snippet ptany
	PropTypes.any

snippet ptypes
	static propTypes = {}

## GraphQL

snippet graphql
	import { compose, graphql } from 'react-apollo'

snippet expgql
    export default compose(graphql($1, { name: $2 }))($3)

## Console

snippet clg
    console.log(object)

snippet clo
    console.log("object", object)

snippet ctm
    console.time("timeId")

snippet cte
    console.timeEnd("timeId")

snippet cas
    console.assert(expression,object)

snippet ccl
    console.clear()

snippet cco
    console.count(label)

snippet cdi
    console.dir

snippet cer
    console.error(object)

snippet cgr
    console.group(label)

snippet cge
    console.groupEnd()

snippet ctr
    console.trace(object)

snippet cwa
    console.warn

snippet cin
    console.info

## React Components

snippet rcc
    import React, { Component } from 'react'

    export default class FileName extends Component {
      render() {
        return <div>$2</div>
      }
    }

snippet rce
    import React, { Component } from 'react'

    export class FileName extends Component {
      render() {
        return <div>$2</div>
      }
    }

    export default $1

snippet rcep
    import React, { Component } from 'react'
    import PropTypes from 'prop-types'

    export class FileName extends Component {
      static propTypes = {}

      render() {
        return <div>$2</div>
      }
    }

    export default $1

snippet rpc
    import React, { PureComponent } from 'react'

    export default class FileName extends PureComponent {
      render() {
        return <div>$2</div>
      }
    }

snippet rpcp
    import React, { PureComponent } from 'react'
    import PropTypes from 'prop-types'

    export default class FileName extends PureComponent {
      static propTypes = {}

      render() {
        return <div>$2</div>
      }
    }

snippet rpce
    import React, { PureComponent } from 'react'
    import PropTypes from 'prop-types'

    export class FileName extends PureComponent {
      static propTypes = {}

      render() {
        return <div>$2</div>
      }
    }

    export default FileName

snippet rccp
    import React, { Component } from 'react'
    import PropTypes from 'prop-types'

    export default class FileName extends Component {
      static propTypes = {
        $2: $3
      }

      render() {
        return <div>$4</div>
      }
    }

snippet rfcp
    import React from 'react'
    import PropTypes from 'prop-types'

    function $1(props) {
      return <div>$0</div>
    }

    $1.propTypes = {}

    export default $1

snippet rfc
    import React from 'react'

    export default function $1() {
      return <div>$0</div>
    }

snippet rfce
    import React from 'react'

    function $1() {
      return <div>$0</div>
    }

    export default $1

snippet rafcp
    import React from 'react'
    import PropTypes from 'prop-types'

    const $1 = props => {
      return <div>$0</div>
    }

    $1.propTypes = {}

    export default $1

snippet rafc
    import React from 'react'

    const $1 = () => {
      return <div>$0</div>
    }

    export default $1

snippet rafce
    import React from 'react'

    const $1 = () => {
      return <div>$0</div>
    }

    export default $1

snippet rmc
    import React, { memo } from 'react'

    export default memo(function $1() {
      return <div>$0</div>
    })

snippet rmcp
    import React, { memo } from 'react'
    import PropTypes from 'prop-types'

    const $1 = memo(function $1(props) {
      return <div>$0</div>
    })

    $1.propTypes = {}

    export default $1

snippet rcredux
    import React, { Component } from 'react'
    import { connect } from 'react-redux'

    export class FileName extends Component {
      render() {
        return <div>$4</div>
      }
    }

    const mapStateToProps = state => ({})

    const mapDispatchToProps = {}

    export default connect(
      mapStateToProps,
      mapDispatchToProps,
    )(FileName)

snippet rcreduxp
    import React, { Component } from 'react'
    import PropTypes from 'prop-types'
    import { connect } from 'react-redux'

    export class FileName extends Component {
      static propTypes = {
        $2: $3
      }

      render() {
        return <div>$4</div>
      }
    }

    const mapStateToProps = state => ({})

    const mapDispatchToProps = {}

    export default connect(
      mapStateToProps,
      mapDispatchToProps
    )(FileName)

snippet reduxmap
    const mapStateToProps = state => ({})

    const mapDispatchToProps = {}

## React Native Components

snippet rnc
    import React, { Component } from 'react'
    import { Text, View } from 'react-native'

    export default class FileName extends Component {
      render() {
        return (
          <View>
            <Text> $2 </Text>
          </View>
        )
      }
    }

snippet rnf
    import React from 'react'
    import { View, Text } from 'react-native'

    const $1 = () => {
      return (
        <View>
          <Text> $2 </Text>
        </View>
      )
    }

    export default $1

snippet rncs
    import React, { Component } from 'react'
    import { Text, StyleSheet, View } from 'react-native'

    export default class FileName extends Component {
      render() {
        return (
          <View>
            <Text> $2 </Text>
          </View>
        )
      }
    }

    const styles = StyleSheet.create({})

snippet rnce
    import React, { Component } from 'react'
    import { Text, View } from 'react-native'

    export class FileName extends Component {
      render() {
        return (
          <View>
            <Text> $2 </Text>
          </View>
        )
      }
    }

    export default $1

snippet rncredux
    import React, { Component } from 'react'
    import { View, Text } from 'react-native'
    import PropTypes from 'prop-types'
    import { connect } from 'react-redux'

    export class FileName extends Component {
      static propTypes = {
        $2: $3
      }

      render() {
        return (
          <View>
            <Text> $2 </Text>
          </View>
        )
      }
    }

    const mapStateToProps = state => ({})

    const mapDispatchToProps = {}

    export default connect(
      mapStateToProps,
      mapDispatchToProps
    )(FileName)

## Others

snippet cmmb
    /**
    |--------------------------------------------------
    | $1
    |--------------------------------------------------
    */

snippet desc
    describe('$1', () => {
      $2
    })

snippet test
    test('should $1', () => {
      $2
    })

snippet tit
    it('should $1', () => {
      $2
    })

snippet stest
    import React from 'react'
    import renderer from 'react-test-renderer'

    import { ${1:ComponentName} } from '../${1:ComponentName}'

    describe('<${1:ComponentName} />', () => {
      const defaultProps = {}
      const wrapper = renderer.create(<${1:ComponentName} {...defaultProps} />)

      test('render', () => {
        expect(wrapper).toMatchSnapshot()
      })
    })

snippet srtest
    import React from 'react'
    import renderer from 'react-test-renderer'
    import { Provider } from 'react-redux'

    import store from 'src/store'
    import { ${1:ComponentName} } from '../${1:ComponentName}'

    describe('<${1:ComponentName} />', () => {
      const defaultProps = {}
      const wrapper = renderer.create(
        <Provider store={store}>
          <${1:${TM_FILENAME_BASE}} {...defaultProps} />)
        </Provider>,
      )

      test('render', () => {
        expect(wrapper).toMatchSnapshot()
      })
    })

snippet sntest
    import 'react-native'
    import React from 'react'
    import renderer from 'react-test-renderer'

    import ${1:ComponentName} from '../${1:ComponentName}'

    describe('<${1:ComponentName} />', () => {
      const defaultProps = {

      }

      const wrapper = renderer.create(<${1:ComponentName} {...defaultProps} />)

      test('render', () => {
        expect(wrapper).toMatchSnapshot()
      })
    })

snippet snrtest
    import 'react-native'
    import React from 'react'
    import renderer from 'react-test-renderer'
    import { Provider } from 'react-redux'

    import store from 'src/store/configureStore'
    import ${1:ComponentName} from '../${1:ComponentName}'

    describe('<${1:ComponentName} />', () => {
      const defaultProps = {}
      const wrapper = renderer.create(
        <Provider store={store}>
          <${1:ComponentName} {...defaultProps} />
        </Provider>,
      )

      test('render', () => {
        expect(wrapper).toMatchSnapshot()
      })
    })

snippet hocredux
    import React from 'react'
    import PropTypes from 'prop-types'
    import { connect } from 'react-redux'

    export const mapStateToProps = state => ({

    })

    export const mapDispatchToProps = {

    }

    export const ${1:hocComponentName} = (WrappedComponent) => {
      const hocComponent = ({ ...props }) => <WrappedComponent {...props} />

      hocComponent.propTypes = {
      }

      return hocComponent
    }

    export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))

snippet hoc
    import React from 'react'
    import PropTypes from 'prop-types'

    export default WrappedComponent => {
      const hocComponent = ({ ...props }) => <WrappedComponent {...props} />

      hocComponent.propTypes = {}

      return hocComponent
    }
