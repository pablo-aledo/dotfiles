snippet cast
	${1:var}.to${2:String}${3}

snippet val
	val ${1:thisIsAVariable} = ${2:42}

snippet tuple
	(${1:3}, ${2:4.2}, ${3:"Hi"})${4}

snippet if
	if( ${1:a < 5} ) ${2:5} else ${3:10}

snippet match
	val ${1:result} = ${2:a*3} match {
		case ${3:0}                 => ${4:"zero"}
		case ${5:i}                 => ${6:i}
		case ${7:head} :: ${8:tail} => ${7} + ${8}
		case ${9:_}                 => ${10:"default"}
	}

snippet stdin
	val lines = io.Source.stdin.getLines

snippet function
	def ${1:square}(${2:x:Double}):${3:Double} = {
		${4:x*x}
	}${5}

snippet partial_function
	val ${1:pf}:${2:PartialFunction}[${3:Any,String}] = {
		case ${4:i}:${5:Int}    => ${6:"A Number"}
		case ${7:j}:${8:String} => ${9:"A String"}
	}

snippet recursion
	def ${1:factorial}(${2:n:Int}):${3:Int} if( ${4:n < 2} ) ${5:1} else ${6:n*factorial(n-1)}

snippet tail_recursion
	def estimatePi(n:Int):Double = {
		def helper(n:Int):Double = {
			if( n < 1 ) 0 else {
				var x = math.random
				var y = math.random
				(if( x*x+y*y < 1 ) 1 else 0) + helper(n-1)
			}
		}
		helper(n)/n*4
	}

	import scala.annotation._
	def ${1:estimatePi}(${2:n}:Int):${3:Double} = {
		@tailrec
		def helper(${2}:Int, sum:Int):${3} = {
			if( ${2} < 1 ) sum else {
				var x = math.random
				var y = math.random
				helper( n-1, sum + (if( x*x+y*y < 1 ) 1 else 0) )
			}
		}
		helper(n,0)/n*4
	}

snippet array
	val arr = Array.tabulate(${1:100})(i => ${2:i*i})

snippet array_elements
	arr.head
	arr.last
	arr.tail
	arr.isEmpty
	arr.nonEmpty
	arr.startsWith(Array( 1,2,3 ))
	arr.endsWith(Array( 1,2,3 ))
	arr.indexOf(2)
	arr.indices(2)
	arr.max
	arr.min
	arr.sum
	arr.product
	arr.patch(2, Array(1,2,3), 3)
	arr.intersect(arr2)
	arr.union(arr2)
	arr.diff(arr2)
	arr.distinct

snippet mkString
	${1:arr}.mkString(${2:"("}, ${3:","}, ${4:")"})${5}

snippet zip
	${1:arr}.zip(${2:arr2})

snippet zipWithIndex
	${1:arr}.zipWithIndex

snippet split
	val (${1:before}, ${2:after}) = arr.splitAt(${3:2})

snippet str_split
	${1:"5:36:12"}.split(${2:":"})

snippet List
	List(1,2,3)

snippet list_update
	${1:lst}.updated(${2:index},${3:val})

snippet buffer
	import collection.mutable
	mutable.Buffer(1,2,3)

snippet range
	${1:1} to ${2:10} by ${3:1}

snippet append_front
	${1:1}::${2:list}

snippet concat
	${1:list1} ++ ${2:list2}

snippet append_front_back
	${1:2} +: ${2:arr} :+ ${3:3}

snippet size
	${1:arr}.size

snippet operator
	(1).+(2)

snippet pass_by_name
	littleArray(Int i: => Int ):Array[Int] = Array(i,i,i)
	littleArray(util.Random.nextInt(10))

snippet foreach
	${1:a}.foreach(${2:println})

snippet map
	${1:a}.map(i => ${2:i*2})

snippet Map
	val ${1:a} = Map( ${2:"A" -> "j"}, ${3:"B" -> "k"} )

snippet filter
	${1:a}.filter( ${2:_ < 5} )

snippet filter2
	${1:a}.filter( ${2:i => i < 5} )

snippet exists
	${1:a}.exists( ${2:_ > 100} )

snippet forall
	${1:a}.forall( ${2:_ > 100} )

snippet reduce
	${1:a}.reduceLeft( ${2:(x,y) => x+y} )

snippet fold
	${1:a}.foldLeft(${2:"0"})( ${3:_ + _} )

snippet find
	${1:a}.find( ${2:_%3 == 0} ).map( ${3:_ / 3} ).getOrElse(${4:0})

snippet file_read
	case class ${1:Struct}(${2:day:Int, hour:Int})

	def parseLine(line:String):${1}{
		val p = line.split(",").map(_.trim)
		${1}(p(0), p(1))
	}

	val source = io.source.fromFile(${3:"filename"})
	val lines = source.getLines
	lines.next
	val data = lines.map(parseLine)
	source.close

snippet while
	val ${1:i} = ${2:0}
	while( ${3:i < 5} ){
		${4:println(i)}
		${1} =+ 1
	}

snippet for
	for( ${1:i} <- ${2:0 until 5} ){
		${3:println(i)}
	}

snippet for_yield
	for( ${1:i} <- ${2:0 until 5}, ${3:j} <- ${4:0 until 10}) yield ${5:(i,j)}

snippet myWhile
	def myWhile(cond: => Boolean)(body: => Unit) = {
		if(cond){
			body
			myWhile(cond)(body)
		}
	}

snippet main
	object ${1:application} {
		def main(args:Array[String]):Unit = {
			${2:println("First Argument " + args(0))}
		}
	}

snippet class
	case class Person(Name:String, Age:Int)

	class Person(val surName:String, private var name:String, private var age:Int) extends Character {
		def 
	}

	object Person { // static objects
		def apply(surName:String, name:String, age:Int) {
			new Person(surName, name, age)
		}
		def update
		def name_=(newName:String):Unit = {}
	}

	trait Character {
		val name:String
	}

snippet vect
	case class Vect3D(x: Double, y: Double, z: Double) {

	  def apply(i: Int): Double = i match {
	    case 0 => x
	    case 1 => y
	    case 2 => z
	  }

	  def update(i:Int,v:Double) = {}
	  def +(v: Vect3D) = Vect3D(x + v.x, y + v.y, z + v.z)
	  def -(v: Vect3D) = Vect3D(x - v.x, y - v.y, z - v.z)
	  def *(c: Double) = Vect3D(c * x, c * y, c * z)
	  def /(c: Double) = Vect3D(x / c, y / c, z / c)
	  def dot(v: Vect3D) = x * v.x + y * v.y + z * v.z
	  def cross(v: Vect3D) = Vect3D(
	    y * v.z - z * v.y,
	    z * v.x - x * v.z,
	    x * v.y - y * v.x)
	  def magnitude() = math.sqrt(x * x + y * y + z * z)
	}
snippet complex
	case class Complex(real:Double, imag:Double) {

	  def this(x:Double) = this(x,0)

	  def +(c:Complex) = Complex(real+c.real,imag+c.imag)
	  def -(c:Complex) = Complex(real-c.real,imag-c.imag)
	  def *(c:Complex) = Complex(real*c.real-imag*c.imag,real*c.imag+imag*c.real)
	  def /(c:Complex) = {
	    val denom = c.real*c.real+c.imag*c.imag
	    Complex((real*c.real+imag*c.imag)/denom,(imag*c.real-real*c.imag)/denom)
	  }
	  def magnitude = math.sqrt(real*real+imag*imag)
	}

snippet require
	require( ${1:a < 5}, "${2:Can't call with a > 5}")

snippet implicit_conversion
	package specmethods

	object VectScalar {
	  implicit def convert(c:Double):VectScalar = new VectScalar(c)
	}

	class VectScalar(c:Double) {
	  def *(v:Vect3D) = v*c
	}

	implicit def convert(x:Double) = Complex(x,0)

snippet test
	package specmethods
	import org.junit._
	import org.junit.Assert._

	class TestVect3D {
	  @Test def testAddition:Unit = {
	    val v1 = Vect3D(1, 2, 3)
	    val v2 = Vect3D(4, 5, 6)
	    val v3 = v1 + v2
	    assertEquals("Addition failed.", Vect3D(5, 7, 9), v3)
	  }

	  @Test def testMultiplication:Unit = {
	    val v1 = Vect3D(1, 2, 3)
	    val v2 = v1 * 3
	    assertEquals("Multiplication failed.", Vect3D(3, 6, 9), v2)
	  }

	  @Test def testCross:Unit = {
	    val v1 = Vect3D(1,0,0)
	    val v2 = Vect3D(0,1,0)
	    val v3 = v1 cross v2
	    assertEquals("Cross product failed.",Vect3D(0,0,1),v3)
	  }

	}

snippet read_xml_key
	  val ${1:rooms} = ( xml.XML.loadFile(${2:"map.xml"}) \ ${3:"key"} ).map( ${4:...} )

snippet read_xml_recursive
	  val ${1:rooms} = ( xml.XML.loadFile(${2:"map.xml"}) \\ ${3:"key_recursive"} ).map( ${4:...} )

snippet read_xml_attribute
	  val ${1:rooms} = ( xml.XML.loadFile(${2:"map.xml"}) \\ ${3:"@attribute"} ).map( ${4:...} )

snippet write_xml
	def toXML:XML.Node = <player name={name} currentRoom={currentRoom}>
	{items.map(_.toXML)}
	</player>

	xml.XML.save("player.xml", p.toXML)

snippet regex
	package textprocessing

	val ${1:phone}Pattern = """${2:\((\d\d\d)\) (\d\d\d)-(\d\d\d\d)}""".r
	val ${3:phoneBook} = """Name1	(210) 555-3758
	  Name2	(512) 555-6948
	  Name3	(605) 555-3724"""

	for(m <- ${1}Pattern.findAllMatchIn(${2})) {
	  val ${4:areaCode} = m.group(1)
	  ${5:println(areaCode)}
	}

snippet regexpatterns
	package textprocessing

	val linePattern = """${1:(\w+), (\w+)\s+(\(\d\d\d\) \d\d\d-\d\d\d\d)}""".r

	val source = io.Source.fromFile(${2:"bigFile.txt"})
	for(linePattern(${3:last,first,number}) <- source.getLines) {
	  ${4:// do stuff with last, first, and the number}
	}
	source.close

snippet expressionparser
	package textprocessing

	import scala.util.parsing.combinator._

	// expr := term { "+" term | "-" term }
	// term := factor { "*" factor | "/" factor }
	// factor := number | identifier | "(" expr ")"

	object ExpressionParser extends JavaTokenParsers {
	  def expr: Parser[Any] = term ~ rep("+" ~ term | "-" ~ term)
	  def term: Parser[Any] = factor ~ rep("*" ~ factor | "/" ~ factor)
	  def factor: Parser[Any] = floatingPointNumber | ident | "(" ~ expr ~ ")"

	  def main(args: Array[String]): Unit = {
	    val parse = parseAll(expr, "3+4*x")
	    println(parse)
	    traverse(parse.get)
	  }

	  def traverse(a: Any): Unit = a match {
	    case lst: List[Any] =>
	      println("List")
	      lst.foreach(traverse)
	    case opt: Option[Any] =>
	      println("Option")
	      opt.foreach(traverse)
	    case a ~ b =>
	      traverse(a)
	      print(" ~ ")
	      traverse(b)
	    case s: String =>
	      println(s)
	  }
	}

snippet CommandParser
	package mud.immutable

	import scala.util.parsing.combinator.JavaTokenParsers

	object Player extends JavaTokenParsers {
	  def apply(name: String, room: String): Player = {
	    new Player(name, Nil, room)
	  }

	  val commands = Vector("drop","get","inv","help","look","save","quit")

	  def command: Parser[Command] =
	    "get" ~ ident ^^ { case _ ~ item => Get(item) } |
	    "drop" ~ ident ^^ { case _ ~ item => Drop(item) } |
	    """look\s+at""".r ~ ident ^^ { case _ ~ item => LookObject(item)} |
	    """look\s+(to(ward)?(\s+the)?)?""".r ~ ("east" | "west" | "north" | "south" | "up" | "down") ^^ { case _ ~ dir => LookDir(dir)} |
	    "look" ^^ { case _ => LookRoom } |
	    "inv" ^^ { case _ => Inv } |
	    "help" ^^ { case _ => Help } |
	    "save" ^^ { case _ => Save }

	  sealed trait Command extends ((Player, Map[String, Room]) => (Player, Map[String, Room])) {
	    def apply(p: Player, rooms: Map[String, Room]): (Player, Map[String, Room])
	  }

	  case class Get(item:String) extends Command {
	    def apply(p: Player, rooms: Map[String, Room]): (Player, Map[String, Room]) = {
	      rooms(p.currentRoom).getItem(item).map(t => {
	        val (item, room) = t
	        (p.copy(items = item :: p.items), rooms + (p.currentRoom -> room))
	      }) getOrElse {
	        println("Item not found.")
	        (p, rooms)
	      }
	    }
	  }

	  case class Drop(item:String) extends Command {
	    def apply(p: Player, rooms: Map[String, Room]): (Player, Map[String, Room]) = {
	      p.items.find(_.matches(item)).map(item => {
	        (p.copy(items = p.items.diff(List(item))), rooms + (p.currentRoom -> rooms(p.currentRoom).dropItem(item)))
	      }) getOrElse {
	        println("You don't have that item to drop.")
	        (p, rooms)
	      }
	    }
	  }

	  case object LookRoom extends Command {
	    def apply(p: Player, rooms: Map[String, Room]): (Player, Map[String, Room]) = {
	      rooms(p.currentRoom).print()
	      (p, rooms)
	    }
	  }

	  case class LookDir(dir:String) extends Command {
	    def apply(p: Player, rooms: Map[String, Room]): (Player, Map[String, Room]) = {
	      val r = rooms(p.currentRoom)
	      if(r.exits.contains(dir)) {
	        rooms(r.exits(dir)).print()
	      } else {
	        println("That isn't a valid exit.")
	      }
	      (p, rooms)
	    }
	  }

	  case class LookObject(item:String) extends Command {
	    def apply(p: Player, rooms: Map[String, Room]): (Player, Map[String, Room]) = {
	      (p.items.find(_.matches(item)) orElse rooms(p.currentRoom).items.find(_.matches(item))) match {
	        case None => println("You don't see that item.")
	        case Some(i) => i.print()
	      }
	      (p, rooms)
	    }
	  }

	  case object Inv extends Command {
	    def apply(p: Player, rooms: Map[String, Room]): (Player, Map[String, Room]) = {
	      println("Your inventory includes:")
	      p.items.foreach(i => println(i.name))
	      (p, rooms)
	    }
	  }

	  case object Help extends Command {
	    def apply(p: Player, rooms: Map[String, Room]): (Player, Map[String, Room]) = {
	      println("Your current commands are: " + commands.mkString(", "))
	      (p, rooms)
	    }
	  }

	  case object Save extends Command {
	    def apply(p: Player, rooms: Map[String, Room]): (Player, Map[String, Room]) = {
	      xml.XML.save("player.xml", p.toXML)
	      (p, rooms)
	    }
	  }
	}

	case class Player(name: String, items: List[Item], currentRoom: String) extends Character {
	  def process(input: String, rooms: Map[String, Room]): (Player, Map[String, Room]) = {
	    if (rooms(currentRoom).exits.contains(input)) {
	      val newRoom = rooms(currentRoom).exits(input)
	      rooms(newRoom).print()
	      (copy(currentRoom = newRoom), rooms)
	    } else {
	      val com = Player.parseAll(Player.command,input)
	      if (com.successful) {
	        com.get(this, rooms)
	      } else {
	        println("Invalid command.")
	        (this, rooms)
	      }
	    }
	  }

	  def toXML: xml.Node = <player name={ name } currentRoom={ currentRoom }>
	                          { items.map(_.toXML) }
	                        </player>
	}

snippet akka
	package akkacode

	import akka.actor.ActorSystem
	import akka.actor.Props
	import akka.actor.Actor

	object SimpleExample extends App {
	  class SimpleActor extends Actor {
	    def receive = {
	      case s:String => println("String "+s)
	      case i:Int => println("Int "+i)
	      case _ => println("Unknown message")
	    }
	    def foo() = {}
	  }

	  val system = ActorSystem("SimpleExample")
	  val actor = system.actorOf(Props[SimpleActor],"FirstActor")

	  actor ! "Hi"
	  actor ! 42
	  actor ! 'a'

	  system.shutdown
	}

snippet trait
	trait Similarity {
		def isSimilar(x: Any): Boolean
		def isNotSimilar(x: Any): Boolean = !isSimilar(x)
	}

	class Point(xc: Int, yc: Int) extends Similarity {
		var x: Int = xc
		var y: Int = yc
		def isSimilar(obj: Any) =
			obj.isInstanceOf[Point] &&
			obj.asInstanceOf[Point].x == x
		}
	}

snippet collect
	${1:elements} collect { case ${2:se}: ${3:SpecialElement} if ${4:accept(se)} => ${5:transform(se)} }
