snippet error
	t.Error("${1:Expected} ${2:value}, got ", ${3:v})

snippet log
	t.Log("${1:message}")

snippet test
	// save as *_test.go
	// test with "go test -v -cover -coverprofile=c.out"
	// get coverage with "go tool cover -html=c.out -o coverage.html"

	import "testing"

	func Test${1:Function}(t *testing.T){
		${2:code}
	}

snippet gotwant
	if got, want := ${1:Function}(${2:Arguments}), ${3:Result}; got != want {
		t.Errorf("${4:Message}. expected: %d, got: %d", want, got)
	}

snippet skip
	t.Skip("${1:message}")

snippet main
	func TestMain(m *testing.T){
		${1:os.Exit(m.Run())}
	}

snippet TestSuite
	package math

	import "testing"

	type testpair struct {
	  values []float64
	  average float64
	}

	var tests = []testpair{
	  { []float64{1,2}, 1.5 },
	  { []float64{1,1,1,1,1,1}, 1 },
	  { []float64{-1,1}, 0 },
	}

	func TestAverage(t *testing.T) {
	  for _, pair := range tests {
	    v := Average(pair.values)
	    if v != pair.average {
	      t.Error(
	        "For", pair.values,
	        "expected", pair.average,
	        "got", v,
	      )
	    }
	  }
	}

snippet TestSuite2
	package main

	import "testing"

	func TestSum(t *testing.T) {
		tables := []struct {
			x int
			y int
			n int
		}{
			{1, 1, 2},
			{1, 2, 3},
			{2, 2, 4},
			{5, 2, 7},
		}

		for _, table := range tables {
			total := Sum(table.x, table.y)
			if total != table.n {
				t.Errorf("Sum of (%d+%d) was incorrect, got: %d, want: %d.", table.x, table.y, total, table.n)
			}
		}
	}

snippet TestSuite3
	import (
	  "fmt"
	  "testing"
	)

	func TestSum(t *testing.T) {
	  t.Run("[1,2,3,4,5]", testSumFunc([]int{1, 2, 3, 4, 5}, 15))
	  t.Run("[1,2,3,4,-5]", testSumFunc([]int{1, 2, 3, 4, -5}, 5))
	}

	func testSumFunc(numbers []int, expected int) func(*testing.T) {
	  return func(t *testing.T) {
	    actual := Sum(numbers)
	    if actual != expected {
	      t.Error(fmt.Sprintf("Expected the sum of %v to be %d but instead got %d!", numbers, expected, actual))
	    }
	  }
	}

snippet testify
	package yours

	import (
	  "testing"
	  "github.com/stretchr/testify/assert"
	)

snippet eq
	  assert.Equal(t, ${1:variable}, ${2:value}, "they should be equal")

snippet neq
	  assert.NotEqual(t, ${1:variable}, ${2:value}, "they should not be equal")

snippet nil
	  assert.Nil(t, ${1:object})

snippet nnil
	  if assert.NotNil(t, ${1:object}) {
	    // now we know that object isn't nil, we are safe to make
	    // further assertions without causing any errors
	    assert.Equal(t, "${2:Message}", $1.${3:value})
	  }

snippet mock
	package yours

	import (
	  "testing"
	  "github.com/stretchr/testify/mock"
	)

	/*
	  Test objects
	*/

	// MyMockedObject is a mocked object that implements an interface
	// that describes an object that the code I am testing relies on.
	type MyMockedObject struct{
	  mock.Mock
	}

	// DoSomething is a method on MyMockedObject that implements some interface
	// and just records the activity, and returns what the Mock object tells it to.
	//
	// In the real object, this method would do something useful, but since this
	// is a mocked object - we're just going to stub it out.
	//
	// NOTE: This method is not being tested here, code that uses this object is.
	func (m *MyMockedObject) DoSomething(number int) (bool, error) {
	  args := m.Called(number)
	  return args.Bool(0), args.Error(1)
	}

	/*
	  Actual test functions
	*/

	// TestSomething is an example of how to use our test object to
	// make assertions about some target code we are testing.
	func TestSomething(t *testing.T) {
	  // create an instance of our test object
	  testObj := new(MyMockedObject)

	  // setup expectations
	  testObj.On("DoSomething", 123).Return(true, nil)

	  // call the code we are testing
	  targetFuncThatDoesSomethingWithObj(testObj)

	  // assert that the expectations were met
	  testObj.AssertExpectations(t)
	}

	// TestSomethingElse is a second example of how to use our test object to
	// make assertions about some target code we are testing.
	// This time using a placeholder. Placeholders might be used when the
	// data being passed in is normally dynamically generated and cannot be
	// predicted beforehand (eg. containing hashes that are time sensitive)
	func TestSomethingElse(t *testing.T) {
	  // create an instance of our test object
	  testObj := new(MyMockedObject)

	  // setup expectations with a placeholder in the argument list
	  testObj.On("DoSomething", mock.Anything).Return(true, nil)

	  // call the code we are testing
	  targetFuncThatDoesSomethingWithObj(testObj)

	  // assert that the expectations were met
	  testObj.AssertExpectations(t)
	}

snippet suite
	// Basic imports
	import (
	    "testing"
	    "github.com/stretchr/testify/assert"
	    "github.com/stretchr/testify/suite"
	)

	// Define the suite, and absorb the built-in basic suite
	// functionality from testify - including a T() method which
	// returns the current testing context
	type ExampleTestSuite struct {
	    suite.Suite
	    VariableThatShouldStartAtFive int
	}

	// Make sure that VariableThatShouldStartAtFive is set to five
	// before each test
	func (suite *ExampleTestSuite) SetupTest() {
	    suite.VariableThatShouldStartAtFive = 5
	}

	// All methods that begin with "Test" are run as tests within a
	// suite.
	func (suite *ExampleTestSuite) TestExample() {
	    assert.Equal(suite.T(), 5, suite.VariableThatShouldStartAtFive)
	}

	// In order for 'go test' to run this suite, we need to create
	// a normal test function and pass our suite to suite.Run
	func TestExampleTestSuite(t *testing.T) {
	    suite.Run(t, new(ExampleTestSuite))
	}

snippet iftest
	if ${1:variable} := ${2:object}.${3:method}; $1 != ${4:value} {
		t.Errorf("Expected value of $4, but it was %d instead", $1)
	}

snippet doer
	package doer

	type Doer interface {
		DoSomething(int, string) error
	}

snippet user
	package user

	import "github.com/sgreben/testing-with-gomock/doer"

	type User struct {
	    Doer doer.Doer
	}

	func (u *User) Use() error {
	    return u.Doer.DoSomething(123, "Hello GoMock")
	}

snippet mock_doer
	// Code generated by MockGen. DO NOT EDIT.
	// Source: github.com/sgreben/testing-with-gmock/doer (interfaces: Doer)

	// Package mocks is a generated GoMock package.
	package mocks

	import (
		gomock "github.com/golang/mock/gomock"
		reflect "reflect"
	)

	// MockDoer is a mock of Doer interface
	type MockDoer struct {
		ctrl     *gomock.Controller
		recorder *MockDoerMockRecorder
	}

	// MockDoerMockRecorder is the mock recorder for MockDoer
	type MockDoerMockRecorder struct {
		mock *MockDoer
	}

	// NewMockDoer creates a new mock instance
	func NewMockDoer(ctrl *gomock.Controller) *MockDoer {
		mock := &MockDoer{ctrl: ctrl}
		mock.recorder = &MockDoerMockRecorder{mock}
		return mock
	}

	// EXPECT returns an object that allows the caller to indicate expected use
	func (m *MockDoer) EXPECT() *MockDoerMockRecorder {
		return m.recorder
	}

	// DoSomething mocks base method
	func (m *MockDoer) DoSomething(arg0 int, arg1 string) error {
		ret := m.ctrl.Call(m, "DoSomething", arg0, arg1)
		ret0, _ := ret[0].(error)
		return ret0
	}

	// DoSomething indicates an expected call of DoSomething
	func (mr *MockDoerMockRecorder) DoSomething(arg0, arg1 interface{}) *gomock.Call {
		return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSomething", reflect.TypeOf((*MockDoer)(nil).DoSomething), arg0, arg1)
	}

snippet Makefile
	# .
	# ├── doer
	# │   └── doer.go
	# ├── mocks
	# │   └── mock_doer.go
	# └── user
	#     ├── user.go
	#     └── user_test.go

	all:
		mkdir mocks
		mockgen -destination=mocks/mock_doer.go -package=mocks github.com/sgreben/testing-with-gmock/doer Doer

snippet controller
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	mockDoer := mocks.NewMockDoer(mockCtrl)

snippet user_test
	package user_test

	import (
	  "errors"
	  "github.com/golang/mock/gomock"
	  "github.com/sgreben/testing-with-gomock/mocks"
	  "github.com/sgreben/testing-with-gomock/user"
	  "testing"
	)

	func TestUse(t *testing.T) {
	    mockCtrl := gomock.NewController(t)
	    defer mockCtrl.Finish()

	    mockDoer := mocks.NewMockDoer(mockCtrl)
	    testUser := &user.User{Doer:mockDoer}

	    // Expect Do to be called once with 123 and "Hello GoMock" as parameters, and return nil from the mocked call.
	    mockDoer.EXPECT().DoSomething(123, "Hello GoMock").Return(nil).Times(1)

	    testUser.Use()
	}

	func TestUseReturnsErrorFromDo(t *testing.T) {
	    mockCtrl := gomock.NewController(t)
	    defer mockCtrl.Finish()

	    dummyError := errors.New("dummy error")
	    mockDoer := mocks.NewMockDoer(mockCtrl)
	    testUser := &user.User{Doer:mockDoer}

	    // Expect Do to be called once with 123 and "Hello GoMock" as parameters, and return dummyError from the mocked call.
	    mockDoer.EXPECT().DoSomething(gomock.Any(), "Hello GoMock").Return(dummyError).Times(1)

	    err := testUser.Use()

	    if err != dummyError {
	        t.Fail()
	    }
	}

snippet gogenerate
	package doer
	//go:generate mockgen -destination=../mocks/mock_doer.go -package=mocks github.com/sgreben/testing-with-gomock/doer Doer
	// run with go generate ./...

snippet any
	gomock.Any()

snippet meq
	gomock.Eq()

snippet mnil
	gomock.Nil()

snippet mnot
	gomock.Not(${1:m})

snippet order
	callFirst := mockDoer.EXPECT().DoSomething(1, "first this")
	callA := mockDoer.EXPECT().DoSomething(2, "then this").After(callFirst)
	callB := mockDoer.EXPECT().DoSomething(2, "or this").After(callFirst)

snippet inorder
	gomock.InOrder(
	    mockDoer.EXPECT().DoSomething(1, "first this"),
	    mockDoer.EXPECT().DoSomething(2, "then this"),
	    mockDoer.EXPECT().DoSomething(3, "then this"),
	    mockDoer.EXPECT().DoSomething(4, "finally this"),
	)

snippet do
	mockDoer.EXPECT().
	    DoSomething(gomock.Any(), gomock.Any()).
	    Return(nil).
	    Do(func(x int, y string) {
	        fmt.Println("Called with x =",x,"and y =", y)
	    })

	mockDoer.EXPECT().
	    DoSomething(gomock.Any(), gomock.Any()).
	    Return(nil).
	    Do(func(x int, y string) {
	        if x > len(y) {
	            t.Fail()
	        }
	    })

snippet file
	func TestReader(t *testing.T) {
		vectors := []struct {
			file    string    // Test input file
			headers []*Header // Expected output headers
			chksums []string  // MD5 checksum of files, leave as nil if not checked
			err     error     // Expected error to occur
		}{{
			file: "testdata/gnu.tar",
			headers: []*Header{{
				Name:     "small.txt",
				Mode:     0640,
				Uid:      73025,
				Gid:      5000,
				Size:     5,
				ModTime:  time.Unix(1244428340, 0),
				Typeflag: '0',
				Uname:    "dsymonds",
				Gname:    "eng",
				Format:   FormatGNU,
			}, {
				Name:     "small2.txt",
				Mode:     0640,
				Uid:      73025,
				Gid:      5000,
				Size:     11,
				ModTime:  time.Unix(1244436044, 0),
				Typeflag: '0',
				Uname:    "dsymonds",
				Gname:    "eng",
				Format:   FormatGNU,
			}},
			chksums: []string{
				"e38b27eaccb4391bdec553a7f3ae6b2f",
				"c65bd2e50a56a2138bf1716f2fd56fe9",
			},
	  },
	  // more test cases

snippet httptest
	package main_test

	import (
		"fmt"
		"io"
		"io/ioutil"
		"net/http"
		"net/http/httptest"
		"testing"
	)

	func TestHttp(t *testing.T) {
	  //
		handler := func(w http.ResponseWriter, r *http.Request) {
	    // here we write our expected response, in this case, we return a
	    // JSON string which is typical when dealing with REST APIs
			io.WriteString(w, "{ \"status\": \"expected service response\"}")
		}

		req := httptest.NewRequest("GET", "https://tutorialedge.net", nil)
		w := httptest.NewRecorder()
		handler(w, req)

		resp := w.Result()
		body, _ := ioutil.ReadAll(resp.Body)
	haha
		fmt.Println(resp.StatusCode)
		fmt.Println(resp.Header.Get("Content-Type"))
		fmt.Println(string(body))
	}

snippet integration
	// +build integration
	// go test -tags=integration

snippet interface
	import "github.com/mediocregopher/radix.v2/redis"
	type storager interface {
	    Cmd(string, ...interface{}) *redis.Resp
	}
	type Handler struct {
	    db storager
	}
	func (h *Handler) Ping() (string, error) {
	    res := h.db.Cmd("INCR", "ping:count")
	    if res.Err != nil {
	        return "", res.Err
	    }
	    return "pong", nil
	}

snippet test_interface
	// mockery -name storager -inpkg .
	import (
	    "errors"
	    "testing"
	    "github.com/mediocregopher/radix.v2/redis"
	    "github.com/stretchr/testify/assert"
	)
	func TestPing(t *testing.T) {
	    sampleErr := errors.New("sample error")
	    tests := map[string]struct {
	        storageErr error
	        response   string
	        err        error
	    }{
	        "successful": {
	            storageErr: nil,
	            response:   "pong",
	            err:        nil,
	        },
	        "with db error": {
	            storageErr: sampleErr,
	            response:   "",
	            err:        sampleErr,
	        },
	    }
	    for name, test := range tests {
	        t.Logf("Running test case: %s", name)
	        storage := &mockStorager{}
	        storage.
	            On("Cmd", "INCR", []interface{}{"ping:count"}).
	            Return(&redis.Resp{
	                Err: test.storageErr,
	            }).
	            Once()
	        h := &Handler{
	            db: storage,
	        }
	        response, err := h.Ping()
	        assert.Equal(t, test.err, err)
	        assert.Equal(t, test.response, response)
	        storage.AssertExpectations(t)
	    }
	}
