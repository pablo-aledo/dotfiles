tokenize () {
	cat | sed -r "s/[[:cntrl:]]\[[0-9]{1,3}m//g" | sed -e 's/á/a/g' -e 's/é/e/g' -e 's/í/i/g' -e 's/ó/o/g' -e 's/ú/u/g' -e 's/à/a/g' -e 's/è/e/g' -e 's/ì/i/g' -e 's/ò/o/g' -e 's/ù/u/g' -e 's/ä/a/g' -e 's/ë/e/g' -e 's/ï/i/g' -e 's/ö/o/g' -e 's/ü/u/g' | strings -n1 | sed -e 's/ /\n/g' -e 's/\./\n/g' -e 's/\t/\n/g' -e 's/\f/\n/g' -e 's/\v/\n/g' -e 's/\r/\n/g' -e 's/-/\n/g' -e 's/\//\n/g' -e 's/\\/\n/g' -e 's/\+/\n/g' -e 's/,/\n/g' -e 's/;/\n/g' -e 's/\*/\n/g' -e 's/>/\n/g' -e 's/</\n/g' -e 's/"/\n/g' -e 's/#/\n/g' -e 's/%/\n/g' -e 's/&/\n/g' -e 's/(/\n/g' -e 's/)/\n/g' -e 's/\[/\n/g' -e 's/\]/\n/g' -e 's/{/\n/g' -e 's/}/\n/g' -e 's/=/\n/g' -e 's/!/\n/g' -e 's/@/\n/g' -e 's/:/\n/g' -e "s/'/\n/g" -e "s/?/\n/g" -e "s/|/\n/g" -e "s/\\$/\n/g" -e "s/\`/\n/g" -e "s/\^/\n/g" -e 's/~/\n/g'
}

ctags_index() {
	ctags -R --fields=+zln
	cat tags | while read line
	do
		ini=$(echo $line | sed 's/.*line:\([^ \t]*\)[ \t].*/\1/g') 
		file=$(echo $line | awk '{print $2}') 
		end=$(awk -v first=$ini 'NR>=first && /{/              {c++}
                                 NR>=first && /}/ && c && !--c {print NR; exit}' $file) 
		echo "${line}\tend:${end}"
	done > tags2
    \mv tags2 tags
}

ctags_split () {
	INPUT_FILE="${1:-tags}"
	KINDS=('c' 'e' 'f' 'g' 'I' 'm' 'n' 'p' 's' 't' 'v' 'Y')
	for kind in "${KINDS[@]}"
	do
		output="tags_${kind}"
		grep -P '\tkind:'$kind'\t' "$INPUT_FILE" > "$output"
	done
}

ctags_cross () {
	file_1="${2:-tags_f}" 
	file_2="${1:-tags_c}" 
	file_3="${3:-tags_cross}" 
	awk -F'\t' '
FILENAME == ARGV[1] {
    trait_name = $1
    trait_file = $2
    trait_start = 0
    trait_end = 0

    for (i = 4; i <= NF; i++) {
        if ($i ~ /^line:/) trait_start = substr($i, 6)
        if ($i ~ /^end:/)  trait_end = substr($i, 5)
    }

    traits[trait_file, trait_name] = trait_start "," trait_end
    next
}

FILENAME == ARGV[2] {
    func_name = $1
    func_file = $2
    func_line = 0
    pattern = $3
    visibility = "private"  # Default

    for (i = 4; i <= NF; i++) {
        if ($i ~ /^line:/) func_line = int(substr($i, 6))
    }

    if (pattern ~ /pub[ \t]+fn/) visibility = "public"

    for (key in traits) {
        split(key, parts, SUBSEP)
        trait_file = parts[1]
        trait_name = parts[2]

        if (trait_file != func_file) continue

        split(traits[key], range, ",")
        trait_start = int(range[1])
        trait_end = int(range[2])

        if (func_line >= trait_start && func_line <= trait_end) {
            print trait_name ":" func_name ":" visibility
            break
        }
    }
}
' "$file_1" "$file_2" | sort -u > $file_3
}

ctags_rels () {
	file_1="${1:-tags_c}" 
	file_2="${1:-tags_rels}" 
	awk -F'\t' '
{
    pattern = $3

    gsub(/^\/\^/, "", pattern)
    gsub(/\$\/;"$/, "", pattern)

    if (pattern ~ /^class[[:space:]]+[A-Za-z0-9_]+[[:space:]]+:[[:space:]]+public[[:space:]]+[A-Za-z0-9_]+.*$/) {
        match(pattern, /^class[[:space:]]+([A-Za-z0-9_]+)[[:space:]]+:[[:space:]]+public[[:space:]]+([A-Za-z0-9_]+).*$/, m)
        child = m[1]
        parent = m[2]

        print parent " <|.. " child
    }
}
' $file_1 > $file_2
}

ctags_class_rels () {
	file_1="${1:-tags_cross}" 
	file_2="${2:-tags_rels}" 
	file_3="diagram.puml" 
	declare -A class_methods
	while IFS= read -r line
	do
		class=$(echo "$line" | cut -d':' -f1 | cut -d':' -f1) 
		method=$(echo "$line" | cut -d':' -f2) 
		visibility=$(echo "$line" | cut -d':' -f3) 
		if [[ "$visibility" == "public" ]]
		then
			symbol="+" 
		else
			symbol="-" 
		fi
		class_methods["$class"]+="$symbol $method()\n" 
	done < "$file_1"
	{
		echo "@startuml"
		echo ""
		for class in ${(k)class_methods}
		do
			echo "interface $class {"
			echo -n "${class_methods[$class]}" | sed '/^$/d'
			echo "}"
			echo ""
		done
		if [[ -f "$file_2" ]]
		then
			cat "$file_2"
		fi
		echo ""
		echo "@enduml"
	} > "$file_3"
}

genuml(){
    ctags_index
    ctags_split
    (
        ctags_cross tags_f tags_c /dev/stdout
    ) | sort -u > tags_cross
    ctags_rels
    ctags_class_rels

    \rm -fr tags_*
    \mv diagram.puml $1
}

umldiff(){
    review_leaf=$(Git rev-parse HEAD)
    review_base=$(Git branch_base)
	git checkout $review_base; genuml /tmp/umldiff_main.plantuml
	git checkout $review_leaf; genuml /tmp/umldiff_branch.plantuml
    [ "$(\git rev-parse $(Git branch_current))" = "$(\git rev-parse HEAD)" ] && \git checkout $(Git branch_current)

	cat /tmp/umldiff_main.plantuml   | awk '/(interface|class)/{class=$2}{print class"/"$0}' | grep '[a-zA-Z0-9]*/ *[\+\-].*' > /tmp/umldiff_main.summary
	cat /tmp/umldiff_branch.plantuml | awk '/(interface|class)/{class=$2}{print class"/"$0}' | grep '[a-zA-Z0-9]*/ *[\+\-].*' > /tmp/umldiff_branch.summary

	comm -13 <(sort -u /tmp/umldiff_main.summary) <(sort -u /tmp/umldiff_branch.summary) | awk 'BEGIN{FS="[/]"}{print "class "$1" #Ivory {\n<b><color: green>"$2"</color></b>\n}"}' >  /tmp/uml_diffs
	comm -23 <(sort -u /tmp/umldiff_main.summary) <(sort -u /tmp/umldiff_branch.summary) | awk 'BEGIN{FS="[/]"}{print "class "$1" #Ivory {\n<b><color: red>"$2"</color></b>\n}"}' >> /tmp/uml_diffs

	cat /tmp/umldiff_branch.plantuml | sed '$ d' > /tmp/umldiff.plantuml
	cat /tmp/uml_diffs >> /tmp/umldiff.plantuml
	echo '@enduml' >> /tmp/umldiff.plantuml

	(
		cd /tmp/
		docker_app plantuml -tsvg umldiff.plantuml
		google-chrome umldiff.svg
	)
}

umldiff_clean(){
    sed -i 's/}//g' /tmp/uml_diffs
    sed -i 's/..Ivory..//g' /tmp/uml_diffs
    sed -i 's/<color: green>//g' /tmp/uml_diffs
    sed -i 's/<color: red>//g' /tmp/uml_diffs
    sed -i 's/<\/color>//g' /tmp/uml_diffs
    sed -i 's/<b>//g' /tmp/uml_diffs
    sed -i 's/<\/b>//g' /tmp/uml_diffs
    sed -i 's/\+//g' /tmp/uml_diffs
    sed -i 's/\-//g' /tmp/uml_diffs
    sed -i 's/^class //g' /tmp/uml_diffs
    sed -i 's/^ *//g' /tmp/uml_diffs
    sed -i 's/"//g' /tmp/uml_diffs
}

uml_show(){
    ctags_index
    ctags_split
    (
        ctags_cross tags_f tags_c /dev/stdout
    ) | sort -u > tags_cross
    ctags_rels
    ctags_class_rels

    \rm -fr tags_*
    \mv diagram.puml /tmp/uml.plantuml
    (
            cd /tmp/
            docker_app plantuml -tsvg uml.plantuml
            google-chrome uml.svg
    )
}

