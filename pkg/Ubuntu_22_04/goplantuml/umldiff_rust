ctags_split(){
    INPUT_FILE="${1:-tags}"
    KINDS=('c' 'd' 'f' 'i' 'm' 'M' 't' 'T' 'v')
    for kind in "${KINDS[@]}"; do
        output="tags_${kind}"
        grep -P '\tkind:'"$kind"'\b' "$INPUT_FILE" > "$output"
    done
}

ctags_cross(){
file_1="${2:-tags_f}"
file_2="${1:-tags_i}"
file_3="${3:-tags_cross}"

awk -F'\t' '
FILENAME == ARGV[1] {
    trait_name = $1
    trait_file = $2
    trait_start = 0
    trait_end = 0

    for (i = 4; i <= NF; i++) {
        if ($i ~ /^line:/) trait_start = substr($i, 6)
        if ($i ~ /^end:/)  trait_end = substr($i, 5)
    }

    traits[trait_file, trait_name] = trait_start "," trait_end
    next
}

FILENAME == ARGV[2] {
    func_name = $1
    func_file = $2
    func_line = 0
    pattern = $3
    visibility = "private"  # Default

    for (i = 4; i <= NF; i++) {
        if ($i ~ /^line:/) func_line = int(substr($i, 6))
    }

    if (pattern ~ /pub[ \t]+fn/) visibility = "public"

    for (key in traits) {
        split(key, parts, SUBSEP)
        trait_file = parts[1]
        trait_name = parts[2]

        if (trait_file != func_file) continue

        split(traits[key], range, ",")
        trait_start = int(range[1])
        trait_end = int(range[2])

        if (func_line >= trait_start && func_line <= trait_end) {
            print trait_name ":" func_name ":" visibility
            break
        }
    }
}
' "$file_1" "$file_2" | sort -u > $file_3
}

ctags_rels(){
file_1="${1:-tags_i}"
file_2="${1:-tags_rels}"
awk -F'\t' '
{
    pattern = $3

    gsub(/^\/\^/, "", pattern)
    gsub(/\$\/;"$/, "", pattern)

    if (pattern ~ /^impl[[:space:]]+[A-Za-z0-9_:]+[[:space:]]+for[[:space:]]+[A-Za-z0-9_:]+[[:space:]]*\{[[:space:]]*$/) {
        match(pattern, /^impl[[:space:]]+([A-Za-z0-9_:]+)[[:space:]]+for[[:space:]]+([A-Za-z0-9_:]+)/, m)
        trait = m[1]
        struct = m[2]

        print trait " <|.. " struct
    }
}
' $file_1 > $file_2
}

ctags_traits_rels(){
file_1="${1:-tags_cross}"
file_2="${2:-tags_rels}"
file_3="diagram.puml"

declare -A trait_methods

while IFS= read -r line; do
    trait=$(echo "$line" | cut -d':' -f1 | cut -d':' -f1)
    method=$(echo "$line" | cut -d':' -f2)
    visibility=$(echo "$line" | cut -d':' -f3)

    if [[ "$visibility" == "public" ]]; then
        symbol="+"
    else
        symbol="-"
    fi

    trait_methods["$trait"]+="$symbol $method()\n"
done < "$file_1"

{
    echo "@startuml"
    echo ""

    for trait in ${(k)trait_methods}; do
        echo "interface $trait {"
        echo -n "${trait_methods[$trait]}" | sed '/^$/d'
        echo "}"
        echo ""
    done

    if [[ -f "$file_2" ]]; then
        cat "$file_2"
    fi

    echo ""
    echo "@enduml"
} > "$file_3"
}

genuml(){
    ctags_index
    ctags_split
    cat tags_i | grep 'impl [a-zA-Z]* for [a-zA-Z]* {' > tags_i1
    cat tags_i | grep 'impl [a-zA-Z]* {' > tags_i2
    (
        ctags_cross tags_f tags_i1 /dev/stdout
        ctags_cross tags_f tags_i2 /dev/stdout
        ctags_cross tags_f tags_i /dev/stdout
        ctags_cross tags_f tags_T /dev/stdout
    ) | sort -u > tags_cross
    ctags_rels
    ctags_traits_rels

    \rm -fr tags_*
    \mv diagram.puml $1
}

umldiff(){
    review_leaf=$(Git branch_current)
    review_base=$(Git branch_base)
	git checkout .; git checkout $review_base; genuml /tmp/umldiff_main.plantuml
	git checkout .; git checkout $review_leaf; genuml /tmp/umldiff_branch.plantuml
    [ "$(\git rev-parse $(Git branch_current))" = "$(\git rev-parse HEAD)" ] && \git checkout $(Git branch_current)

	cat /tmp/umldiff_main.plantuml   | awk '/(interface|class)/{class=$2}{print class"/"$0}' | grep '[a-zA-Z0-9]*/ *[\+\-].*' > /tmp/umldiff_main.summary
	cat /tmp/umldiff_branch.plantuml | awk '/(interface|class)/{class=$2}{print class"/"$0}' | grep '[a-zA-Z0-9]*/ *[\+\-].*' > /tmp/umldiff_branch.summary

	comm -13 <(sort -u /tmp/umldiff_main.summary) <(sort -u /tmp/umldiff_branch.summary) | awk 'BEGIN{FS="[/]"}{print "class "$1" #Ivory {\n<b><color: green>"$2"</color></b>\n}"}' >  /tmp/uml_diffs
	comm -23 <(sort -u /tmp/umldiff_main.summary) <(sort -u /tmp/umldiff_branch.summary) | awk 'BEGIN{FS="[/]"}{print "class "$1" #Ivory {\n<b><color: red>"$2"</color></b>\n}"}' >> /tmp/uml_diffs

	cat /tmp/umldiff_branch.plantuml | sed '$ d' > /tmp/umldiff.plantuml
	cat /tmp/uml_diffs >> /tmp/umldiff.plantuml
	echo '@enduml' >> /tmp/umldiff.plantuml

	(
		cd /tmp/
		docker_app plantuml -tsvg umldiff.plantuml
		google-chrome umldiff.svg
	)
}

umldiff_clean(){
    sed -i 's/}//g' /tmp/uml_diffs
    sed -i 's/..Ivory..//g' /tmp/uml_diffs
    sed -i 's/<color: green>//g' /tmp/uml_diffs
    sed -i 's/<color: red>//g' /tmp/uml_diffs
    sed -i 's/<\/color>//g' /tmp/uml_diffs
    sed -i 's/<b>//g' /tmp/uml_diffs
    sed -i 's/<\/b>//g' /tmp/uml_diffs
    sed -i 's/\+//g' /tmp/uml_diffs
    sed -i 's/\-//g' /tmp/uml_diffs
    sed -i 's/^class //g' /tmp/uml_diffs
    sed -i 's/^ *//g' /tmp/uml_diffs
    sed -i 's/"//g' /tmp/uml_diffs
}

uml_show(){
    ctags_index
    ctags_split
    cat tags_i | grep 'impl [a-zA-Z]* for [a-zA-Z]* {' > tags_i1
    cat tags_i | grep 'impl [a-zA-Z]* {' > tags_i2
    (
        ctags_cross tags_f tags_i1 /dev/stdout
        ctags_cross tags_f tags_i2 /dev/stdout
        ctags_cross tags_f tags_i /dev/stdout
        ctags_cross tags_f tags_T /dev/stdout
    ) | sort -u > tags_cross
    ctags_rels
    ctags_traits_rels

    \rm -fr tags_*
    \mv diagram.puml /tmp/uml.plantuml
    (
            cd /tmp/
            docker_app plantuml -tsvg uml.plantuml
            google-chrome uml.svg
    )
}
