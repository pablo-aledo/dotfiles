LOCAL_BACKUP_DEST=/media/removable/2TB2/homes/admin
LOCAL_BACKUP_TIME_MACHINE=/media/removable/2TB2/homes/admin/time_machine
LOCAL_BACKUP_SRC=$HOME
LOCAL_BACKUP_BAK_DIR=/media/removable/2TB2/homes/admin/rsync_bak
LOCAL_BACKUP_CHECK=false
LOCAL_BACKUP_CHECK_CMD=qdiffbr
LOCAL_BACKUP_TRANSFORMER=transformer_imgvid_aes
QDBRST=""


diffbr(){
		diff -r --brief "$1" "$2" | sed 's/^/SYNC_ERROR /g'
}

qdiffbr(){
    echo -e "\e[34m qdiffbr \e[0m" "\"$1\" \"$2\""
    local n=0
    local target=$(cd "$1"; find -type f | wc -l)
    (cd "$1"; find -type f) | while read rel
    do
        abs1="$1/$rel"
        abs2="$2/$rel"
        [ -e "$abs2" ] || continue
        md51=$(/bin/dd if="$abs1" bs=1M count=1 status=none | md5sum | awk '{print $1}')
        md52=$(/bin/dd if="$abs2" bs=1M count=1 status=none | md5sum | awk '{print $1}')
        [ "$QDBRST" != "" ] && echo "$md51 $abs1" >> "$QDBRST/qmd5s"
        [ "$md51" != "$md52" ] && echo -e "\e[31m SYNC_ERROR \e[0m $rel are different"
        n=$(( $n + 1 ))
        #[ $(( $n % 1000 )) = 0 ] && echo -n .
        [ $(( $n % 1000 )) = 0 ] && echo "[ $n / $target ]"
    done
}

qqmd5s(){
    echo -e "\e[34m qmd5s \e[0m" "\"$1\""
    local n=0
    local target=$(cd "$1"; find -type f | wc -l)
    (cd "$1"; find -type f) | while read rel
    do
        abs1="$1/$rel"
        md51=$(stat "$abs1" | grep Modify: | sed -e 's/Modify: //' -e 's/ //g')
        echo "$md51 $abs1" >> "$QDBRST/qmd5s"
        n=$(( $n + 1 ))
        [ $(( $n % 1000 )) = 0 ] && echo "[ $n / $target ]"
    done
}

qmd5s(){
    echo -e "\e[34m qmd5s \e[0m" "\"$1\""
    local n=0
    local target=$(cd "$1"; find -type f | wc -l)
    (cd "$1"; find -type f) | while read rel
    do
        abs1="$1/$rel"
        md51=$(/bin/dd if="$abs1" bs=1M count=1 status=none | md5sum | awk '{print $1}')
        echo "$md51 $abs1" >> "$QDBRST/qmd5s"
        n=$(( $n + 1 ))
        [ $(( $n % 1000 )) = 0 ] && echo "[ $n / $target ]"
    done
}

mqmd5s(){
    local n=0
    local target=$(ls "$1" | wc -l)
    ls "$1" | while read line
    do
        echo -n " [ $n / $target ] "
        qmd5s "$1/$line"
        n=$(( $n + 1 ))
    done
}

repqmd5s(){
    export LC_ALL=C
    sort qmd5s | uniq > qmd5s_sorted
    cat qmd5s_sorted | cut -d' ' -f1 | sort | uniq -c | awk '$1 > 1 { print $2 }' | while read repmd5
    do
        /bin/sgrep $repmd5 qmd5s_sorted
        echo
    done
}

mqdiffbr(){
    local n=0
    local target=$(ls "$2" | wc -l)
    ls "$2" | while read line
    do
        echo -n " [ $n / $target ] "
        qdiffbr "$1/$line" "$2/$line"
        n=$(( $n + 1 ))
    done
}

qmd5s_hash(){
    export LC_ALL=C
    cat | while read line
    do
        kmd5=$(echo $line | awk '{print $1}')
        vpath=$(echo $line | awk '{$1=""; print}' | sed 's/^.//g')
        mpath=$(echo $vpath | md5sum - | awk '{print $1}')
        echo $kmd5 $mpath
        echo $mpath $vpath >> dictionary
    done
    cat dictionary | sort | uniq > dictionary_2
    \mv dictionary_2 dictionary
}

qmd5s_unhash(){
    export LC_ALL=C
    cat | while read line
    do
        mpath=$line
        vpath=$(/bin/sgrep $line dictionary | awk '{$1=""; print}' | sed 's/^.//g')
        echo $vpath
    done
}

qmd5s_diff(){
    export LC_ALL=C
    cat "$1" | awk '{$(NF+1)=$1; $1=""; print}' | sed 's/^.//g' | sort > qmd51_sort
    cat "$2" | awk '{$(NF+1)=$1; $1=""; print}' | sed 's/^.//g' | sort > qmd52_sort

    comm -13 <(cat qmd51_sort | awk '{$NF=""; print}') <(cat qmd52_sort | awk '{$NF=""; print}') | while read line
    do
        echo $line >> qmd5d_new
    done

    comm -23 <(cat qmd51_sort | awk '{$NF=""; print}') <(cat qmd52_sort | awk '{$NF=""; print}') | while read line
    do
        echo $line >> qmd5d_deleted
    done

    comm -12 <(cat qmd51_sort | awk '{$NF=""; print}') <(cat qmd52_sort | awk '{$NF=""; print}') | while read line
    do
        qmd51=$(/bin/sgrep "$line" qmd51_sort | awk '{print $NF}')
        qmd52=$(/bin/sgrep "$line" qmd52_sort | awk '{print $NF}')
        [ "$qmd51" != "$qmd52" ] && echo $line >> qmd5d_modified
    done
}

qmd5s_diff_summary(){
    qmd5s_diff $2 $3
    (
    echo "path | deleted | new | modified"
    cat $1 | while read qpath
    do
        bpath=$( basename $qpath )
        del_n=$(cat qmd5_deleted  | grep "^$qpath" | wc -l)
        new_n=$(cat qmd5_new      | grep "^$qpath" | wc -l)
        mod_n=$(cat qmd5_modified | grep "^$qpath" | wc -l)
        echo "$bpath | $del_n | $new_n | $mod_n"
    done
    ) | column -t -s'|'
}

rm_empty_folders(){
	for a in `seq 1 10`
	do
		find $1 -mindepth 1 -type d -empty -delete
	done
}

local_backup_c(){
	[ -d "$LOCAL_BACKUP_SRC/$1/" ] || return
	[ -d "$LOCAL_BACKUP_DEST" ] || return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$LOCAL_BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$LOCAL_BACKUP_DEST/$2
	echo -e "\e[34m backup_c $1 \e[0m"

	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$LOCAL_BACKUP_BAK_DIR"

	mkdir -p "$dest"
	rsync -vaXi `echo $back_arg` "$LOCAL_BACKUP_SRC/$1/" "$dest/"
}

local_backup_ermtc(){
	[ -d "$LOCAL_BACKUP_SRC/$1/" ] || return
	[ -d "$LOCAL_BACKUP_DEST" ] || return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$LOCAL_BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$LOCAL_BACKUP_DEST/$2
	echo -e "\e[34m backup_ermtc $1 \e[0m"

	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$LOCAL_BACKUP_BAK_DIR"

	cd "$LOCAL_BACKUP_SRC/$1/"
	ls -d */ | while read line
	do 
		echo -e "\e[34m backup_ermtc directory $line \e[0m"
		mkdir -p "$dest/$line"
		rsync -vaXi `echo $back_arg` --delete  "$LOCAL_BACKUP_SRC/$1/$line" "$dest/$line"
		$LOCAL_BACKUP_CHECK && $LOCAL_BACKUP_CHECK_CMD "$LOCAL_BACKUP_SRC/$1/$line" "$dest/$line"
	done
}

local_backup_ermtm(){
	[ -d "$LOCAL_BACKUP_SRC/$1/" ] || return
	[ -d "$LOCAL_BACKUP_DEST" ] || return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$LOCAL_BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$LOCAL_BACKUP_DEST/$2
	echo -e "\e[34m backup_ermtm $1 \e[0m"

	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$LOCAL_BACKUP_BAK_DIR"

	cd "$LOCAL_BACKUP_SRC/$1/"
	ls -d */ | while read line
	do 
		echo -e "\e[34m backup_ermtm directory $line \e[0m"
		mkdir -p "$dest/$line"
		rsync -vaXi `echo $back_arg` --delete --remove-source-files "$LOCAL_BACKUP_SRC/$1/$line" "$dest/$line"
		rm_empty_folders "$LOCAL_BACKUP_SRC/$1/$line"
	done
}

local_backup_m(){
	[ -d "$LOCAL_BACKUP_SRC/$1/" ] || return
	[ -d "$LOCAL_BACKUP_DEST" ] || return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$LOCAL_BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$LOCAL_BACKUP_DEST/$2
	echo -e "\e[34m backup_m $1 \e[0m"

	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$LOCAL_BACKUP_BAK_DIR"

	mkdir -p "$dest"
	rsync -vaXi `echo $back_arg` --remove-source-files "$LOCAL_BACKUP_SRC/$1/" "$dest/"
	rm_empty_folders "$LOCAL_BACKUP_SRC/$1/"
}

local_backup_rmtc(){
	[ -d "$LOCAL_BACKUP_SRC/$1/" ] || return
	[ -d "$LOCAL_BACKUP_DEST" ] || return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$LOCAL_BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$LOCAL_BACKUP_DEST/$2
	echo -e "\e[34m backup_rmtc $1 \e[0m"

	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$LOCAL_BACKUP_BAK_DIR"

	mkdir -p "$dest"
	rsync -vaXi `echo $back_arg` --delete  "$LOCAL_BACKUP_SRC/$1/" "$dest/" # --no-perms
	$LOCAL_BACKUP_CHECK && $LOCAL_BACKUP_CHECK_CMD "$LOCAL_BACKUP_SRC/$1/" "$dest/"
}

local_backup_rmtm(){
	[ -d "$LOCAL_BACKUP_SRC/$1/" ] || return
	[ -d "$LOCAL_BACKUP_DEST" ] || return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$LOCAL_BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$LOCAL_BACKUP_DEST/$2
	echo -e "\e[34m backup_rmtm $1 \e[0m"

	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$LOCAL_BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$LOCAL_BACKUP_BAK_DIR"

	mkdir -p "$dest"
	rsync -vaXi `echo $back_arg` --delete --remove-source-files "$LOCAL_BACKUP_SRC/$1/" "$dest/"
	rm_empty_folders "$LOCAL_BACKUP_SRC/$1/"
}

#local_backup_tm(){
	#[ -d "$LOCAL_BACKUP_SRC/$1/" ] || return
	#[ -d "$LOCAL_BACKUP_TIME_MACHINE" ] || return
	#[ $# -eq 0 ] && return
	#[ $# -eq 1 ] && dest=$LOCAL_BACKUP_TIME_MACHINE/$1
	#[ $# -eq 2 ] && dest=$LOCAL_BACKUP_TIME_MACHINE/$2
	#echo -e "\e[34m backup_tm $1 \e[0m"
	#mkdir -p "$dest"
	#duplicity --no-encryption "$LOCAL_BACKUP_SRC/$1/" "file://$dest/"
#}


local_backup_tm3(){
	[ -d "$LOCAL_BACKUP_SRC/$1/" ] || return
	[ -d "$LOCAL_BACKUP_TIME_MACHINE" ] || return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$LOCAL_BACKUP_TIME_MACHINE/$1
	[ $# -eq 2 ] && dest=$LOCAL_BACKUP_TIME_MACHINE/$2
	echo -e "\e[34m backup_tm $1 \e[0m"

	date=`date +%y%m%d-%H%M%S`

       if [ `ls $dest/ 2>/dev/null | wc -l` -eq 0 ]
       then
		mkdir -p $dest/incomplete_back-$date
		rsync -azP \
			--delete \
			$LOCAL_BACKUP_SRC/$1/ $dest/incomplete_back-$date/ \
			&& mv $dest/incomplete_back-$date $dest/back-$date \
			&& ln -s $dest/back-$date $dest/current
       else
		mkdir -p $dest/incomplete_back-$date
		rsync -azP \
			--delete \
			--link-dest=../current \
			$LOCAL_BACKUP_SRC/$1/ $dest/incomplete_back-$date/ \
			&& mv $dest/incomplete_back-$date $dest/back-$date \
			&& rm -f $dest/current \
			&& ln -s $dest/back-$date $dest/current
	fi
}

transformer_imgvid(){
    extension="${line##*.}"
    case $extension in
        (jpg|JPG) echo "\e[34m Transforming \e[0m $1"
              convert "$2/$1" -resize 1280\>  "$3/$1"
              ;;
        (mp4|MP4) echo "\e[34m Transforming \e[0m $1"
              width=$(ffprobe "$2/$1" 2>&1 | grep 'Stream #0' | grep Video | awk '{print $12}' | cut -dx -f1)
              OPTS="-vf 'scale="$(( $width / 2 ))":trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy"
              rm -fr /tmp/trfile.mp4
              echo ffmpeg -i \"$2/$1\" $OPTS \"/tmp/trfile.mp4\" | bash
              \cp /tmp/trfile.mp4 "$3/$1"
              ;;
        (*)   echo "\e[31m Unknown extension \e[0m $1"
              \cp "$2/$1" "$3/$1"
    esac
}

transformer_aes(){
    echo "\e[34m Encrypting \e[0m $1"
    openssl enc -pbkdf2 -aes-256-cbc -salt -in "$2/$1" -out "$3/$1" -k "$(pword local_transformer)"
}

transformer_imgvid_aes(){
    extension="${line##*.}"
    case $extension in
        (jpg|JPG) echo "\e[34m Transforming \e[0m $1"
              convert "$2/$1" -resize 1280\>  "/tmp/trfile"
              openssl enc -pbkdf2 -aes-256-cbc -salt -in "/tmp/trfile" -out "$3/$1" -k "$(pword local_transformer)"
              ;;
        (mp4|MP4) echo "\e[34m Transforming \e[0m $1"
              width=$(ffprobe "$2/$1" 2>&1 | grep 'Stream #0' | grep Video | awk '{print $12}' | cut -dx -f1)
              OPTS="-vf 'scale="$(( $width / 2 ))":trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy"
              rm -fr /tmp/trfile.mp4
              echo ffmpeg -i \"$2/$1\" $OPTS \"/tmp/trfile.mp4\" | bash
              openssl enc -pbkdf2 -aes-256-cbc -salt -in "/tmp/trfile.mp4" -out "$3/$1" -k "$(pword local_transformer)"
              ;;
        (*)   echo "\e[31m Unknown extension \e[0m $1"
              openssl enc -pbkdf2 -aes-256-cbc -salt -in "$2/$1" -out "$3/$1" -k "$(pword local_transformer)"
    esac
}

local_backup_rmtt(){
    [ $# -eq 0 ] && return
    [ $# -eq 1 ] && dest=$LOCAL_BACKUP_DEST/$1
    [ $# -eq 2 ] && dest=$LOCAL_BACKUP_DEST/$2

    src_abs="$LOCAL_BACKUP_SRC/$1"
    dst_abs="$dest"

    [ $# -eq 2 ] && [ "${1[1]}" = '/' ] && src_abs=$1
    [ $# -eq 2 ] && [ "${2[1]}" = '/' ] && dst_abs=$2

    # directories that are only in dst
    comm -13 <(cd $src_abs; find -type d | sort) <(cd $dst_abs; find -type d | sort) | while read line
    do
        rm -fr "$dst_abs/$line"
    done

    # directories that are only in src
    comm -23 <(cd $src_abs; find -type d | sort) <(cd $dst_abs; find -type d | sort) | while read line
    do
        mkdir -p "$dst_abs/$line"
    done

    # files that are in both
    comm -12 <(cd $src_abs; find -type f | sort) <(cd $dst_abs; find -type f | sort) | while read line
    do
        qhash=$(stat "$src_abs/$line" | grep Modify: | sed -e 's/Modify: //' -e 's/ //g')
        lhash=$(cat "$src_abs/qhashes" | grep -F "$line" | tail -n1 | awk '{print $1}')
        [ "$qhash" != "$lhash" ] && rm -fr "$dst_abs/$line"
    done

    # files that are only in src
    comm -23 <(cd $src_abs; find -type f | sort) <(cd $dst_abs; find -type f | sort) | grep -v qhashes | while read line
    do
        qhash=$(stat "$src_abs/$line" | grep Modify: | sed -e 's/Modify: //' -e 's/ //g')
        echo "$qhash $line" >> "$src_abs/qhashes"

        $LOCAL_BACKUP_TRANSFORMER "$line" "$src_abs" "$dst_abs"
    done

    # files that are only in dst
    comm -13 <(cd $src_abs; find -type f | sort) <(cd $dst_abs; find -type f | sort) | while read line
    do
        rm -fr "$dst_abs/$line"
    done
}

local_backup_t(){
    [ $# -eq 0 ] && return
    [ $# -eq 1 ] && dest=$LOCAL_BACKUP_DEST/$1
    [ $# -eq 2 ] && dest=$LOCAL_BACKUP_DEST/$2

    src_abs="$LOCAL_BACKUP_SRC/$1"
    dst_abs="$dest"

    [ $# -eq 2 ] && [ "${1[1]}" = '/' ] && src_abs=$1
    [ $# -eq 2 ] && [ "${2[1]}" = '/' ] && dst_abs=$2

    # directories that are only in src
    comm -23 <(cd $src_abs; find -type d | sort) <(cd $dst_abs; find -type d | sort) | while read line
    do
        mkdir -p "$dst_abs/$line"
    done

    # files that are in both
    comm -12 <(cd $src_abs; find -type f | sort) <(cd $dst_abs; find -type f | sort) | while read line
    do
        qhash=$(stat "$src_abs/$line" | grep Modify: | sed -e 's/Modify: //' -e 's/ //g')
        lhash=$(cat "$src_abs/qhashes" | grep -F "$line" | tail -n1 | awk '{print $1}')
        [ "$qhash" != "$lhash" ] && rm -fr "$dst_abs/$line"
    done

    # files that are only in src
    comm -23 <(cd $src_abs; find -type f | sort) <(cd $dst_abs; find -type f | sort) | grep -v qhashes | while read line
    do
        qhash=$(stat "$src_abs/$line" | grep Modify: | sed -e 's/Modify: //' -e 's/ //g')
        echo "$qhash $line" >> "$src_abs/qhashes"

        $LOCAL_BACKUP_TRANSFORMER "$line" "$src_abs" "$dst_abs"
    done

}

local_backup(){

    [ "$(ls $LOCAL_BACKUP_DEST | wc -l)" -eq 0 ] && echo -n "\e[31m LOCAL_BACKUP_DEST is empty \e[0m" && return

	local_backup_m       Descargas
	local_backup_m       Personal
	local_backup_c       uned
	local_backup_m       Videos
}

local_backup_from_snapshot(){
    return # test
    [ $# -ge 1 ] && list_old=$1 || list_old=/volumeUSB1/usbshare/files_old
    [ $# -ge 2 ] && list_new=$2 || list_new=/volume1/admin/tmp/files_new
    [ $# -ge 3 ] && prefix=$3   || prefix=/media/removable/2TB2/homes/admin/
    [ $# -ge 4 ] && src=$4      || src=/volume1/admin/
    [ $# -ge 5 ] && dst=$5      || dst=/volumeUSB1/usbshare/homes/admin/

    cat $list_old | sed "s|^$prefix||g" | sort > /tmp/files_old_relative_sorted
    cat $list_new | sed "s|^$prefix||g" | sort > /tmp/files_new_relative_sorted
    comm -13 /tmp/files_old_relative_sorted /tmp/files_new_relative_sorted > /tmp/files_from

    rsync -vai --files-from /tmp/files_from $src $dst
}

