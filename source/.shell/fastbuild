fastbuild(){
    [ $# -gt 0 ] && subprojects=$1 || subprojects=$(ls -p | grep '/')
    [ $# -gt 1 ] && destination=$2 || destination=$PWD/build

    ROOTPWD=$PWD

    [ -e fb_pre.sh ] && source fb_pre.sh

    msbuild='/c/Program Files (x86)/Microsoft Visual Studio/2019/Professional/MSBuild/Current/Bin/MSBuild.exe'
    for project in $subprojects
    do
        echo -e "\e[33m $project \e[0m"
        cd $project
        "$msbuild" INSTALL.vcxproj
        cp -r Debug/* $destination
        cd $ROOTPWD
    done

    [ -e fb_post.sh ] && source fb_post.sh
}

fastbuild_incremental(){
    [ $# -gt 0 ] && destination=$1 || destination=$PWD/build

    ROOTPWD=$PWD

    [ -e fbi_pre.sh ] && source fbi_pre.sh

    LAST=$(ls -t $destination | head -n1)

    [ -e fbi_paths ] && dirs=$(cat fbi_paths) || dirs=.
    [ -e fbi_find ] && fbi_find="$(cat fbi_find)" || fbi_find=""

    [ -e fbi_updated ] && rm -fr fbi_updated
    echo find $dirs -newer $destination/$LAST -not -path './.vs/*' -type f "\\(" $fbi_find "\\)" \
        | bash | while read line
    do
        cd "$( dirname "$line" )"
        while [ $PWD != $ROOTPWD ]
        do
            [ -e INSTALL.vcxproj ] && echo $PWD >> $ROOTPWD/fbi_updated && break
            cd ..
        done
        cd $ROOTPWD
    done

    cd $ROOTPWD

    echo -e "\e[34m$(cat fbi_updated | sort | uniq)\e[0m"
    sleep 1

    cat fbi_updated | sort | uniq | while read line
    do
        fastbuild "$line" $destination
    done

    [ -e fbi_post.sh ] && source fbi_post.sh
}

subprojects_status(){

ROOTPWD=$PWD
ls -p | grep '/' | while read line
do
	cd $ROOTPWD/$line
	[ -e .git ] || continue
    
    revision=$(git rev-parse --abbrev-ref HEAD)

    [ "$revision" = "master" ] && revision="\e[32m $revision \e[0m" || revision="\e[31m $revision \e[0m"

	[ "$(git status -s | grep '^MM' )" != "" ] && {
        echo -e "$line: $revision : \e[31m Modified \e[0m"
    } || {
        echo -e "$line: $revision : \e[32m OK \e[0m"
    }
done
cd $ROOTPWD

}