export mouseover_debug=false

mouseover(){

	[ -e /usr/bin/xdotool ] || pkg install xdotool
	[ -e /usr/bin/png2pat ] || pkg install xautomation
	[ -e /usr/bin/scrot ]   || pkg install scrot
	[ -e /usr/bin/xclip ]   || pkg install xclip

    [ "$mouseover_debug" = "true" ] && echo mouseover $*

    beepflag="-z"
    [ "$1" = "-z" ] && beepflag="" && shift

	count=$1
	shift

	if [ -e $1 ]
	then
		threshold=100000
	else
		threshold=$1
		shift
	fi

	if [ -e $1 ]
	then
		key=""
	else
		key=$1
		shift
        delay=$1
		shift
	fi

	n=0
	for a in $*
	do

        if [ "$mouseover_resize" = "true" ]
        then
            convert -resize 50% "$a" /tmp/mouseover_1.png
            convert -resize 200% /tmp/mouseover_1.png /tmp/mouseover_resize.png
            png2pat /tmp/mouseover_resize.png > /tmp/pat$n.pat
        else
            png2pat "$a" > /tmp/pat$n.pat
        fi

		n=$(( n + 1 ))
	done

    [ -e /tmp/mouseover_break ] && rm -f /tmp/mouseover_break
	n=0
	while true
	do
        [ -e /tmp/mouseover_break ] && rm -fr /tmp/mouseover_break && break
        [ ! "$key" = "" ] && xdotool key $key && sleep $delay

        rm -fr /tmp/screen.png
		scrot $beepflag /tmp/screen.png

        if [ "$mouseover_resize" = "true" ]
        then
            convert -resize 50% /tmp/screen.png /tmp/screen_resize.png
            convert -resize 200% /tmp/screen_resize.png /tmp/screen.png
        fi

		found=0
		m=0
		for a in $*
		do
			visgrep -t $threshold /tmp/screen.png /tmp/pat$m.pat > /tmp/coordinates
			[ "`cat /tmp/coordinates`" ] && found=1 && img=$a && break
			m=$(( m + 1 ))
		done

		sleep 1
		n=$(( n + 1 ))
		[ $n -eq $count ] && break
		[ $found -eq 1 ]  && break
	done

	[ "`cat /tmp/coordinates`" ] || return 1
	xfind=`cat /tmp/coordinates | head -n1 | cut -d',' -f1`
	yfind=`cat /tmp/coordinates | head -n1 | cut -d',' -f2 | cut -d' ' -f1`
	ximg=`file "$img" | cut -d',' -f2 | cut -d' ' -f2`
	yimg=`file "$img" | cut -d',' -f2 | cut -d' ' -f4`
	echo $((xfind + ximg / 2)) $((yfind + yimg / 2)) > /tmp/mousepos
	xdotool mousemove $((xfind + ximg / 2)) $((yfind + yimg / 2))
	return 0
}

#scrop(){
    #rm -fr $1.png
    #scrot -o $1.png
    #xdotool key Alt+5
    #docker_app gthumb $1.png
    #xdotool key Alt+4
#}

scrop2(){
    rm -fr $1.png
    scrot $1.png
    xdotool key Alt+5
    gthumb $1.png
    xdotool key Alt+4
}

xclip_monitor () {
	while true
	do
		clip_prev_content="$clip_content"
		clip_content="$(Xclip -o)"
		[ "$clip_content" != "$clip_prev_content" ] && echo "$clip_content"
		sleep 1
	done
}

pixel(){
    convert $1 -format "%[hex:u.p{$2,$3}]\n" info:
}

transparent_window(){
    [ $# -ge 1 ] && opacity=$1 || opacity=0.5
    [ $# -ge 2 ] && winname=$2 || winname=$( xprop | grep 'WM_NAME(STRING)' | cut -d'"' -f2 )
    [ -e /usr/bin/devilspie2 ] || pkg install devilspie2
    mkdir -p ~/.config/devilspie2
    echo 'if (get_window_name() == "'$winname'") then' >  ~/.config/devilspie2/transparent.lua
    echo '  set_window_opacity('$opacity')'            >> ~/.config/devilspie2/transparent.lua
    echo 'end'                                         >> ~/.config/devilspie2/transparent.lua
    devilspie2
}

