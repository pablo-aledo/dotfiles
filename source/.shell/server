#source $(dirname $(readlink -f $0))/pkg
#source $(dirname $(readlink -f $0))/easypasswd
#source $(dirname $(readlink -f $0))/myshell

server(){

	if [ $1 = "vnc" ]
	then
		pkg install x11vnc
		while true
		do 
			x11vnc
			sleep 1
		done
	fi

	if [ $1 = "ssh" ]
	then
		pkg install openssh-server
		pkg install tmux
		easypasswd
		myshell tmux
		sudo /etc/init.d/ssh restart
		sudo mkdir /var/run/sshd
		sudo /usr/sbin/sshd -p22
	fi

	if [ $1 = "ssh80" ]
	then
		while true
		do
			sudo /usr/sbin/sshd -d -p 80
			sleep 1
		done
	fi

	if [ $1 = "telnet" ]
	then
		pkg install telnetd
		easypasswd
	fi

	if [ $1 = "nx" ]
	then
		pkg install nomachine
		sudo sed -i 's/#VirtualDesktopAuthorization 1/VirtualDesktopAuthorization 0/g' /usr/NX/etc/server.cfg
		sudo sed -i 's/#PhysicalDesktopAuthorization 1/PhysicalDesktopAuthorization 0/g' /usr/NX/etc/server.cfg
		sudo /etc/init.d/nxserver restart
	fi

	if [ $1 = "lamp" ]
	then
		pkg install lamp
	fi

	if [ $1 = "lamp2" ]
	then
        [ $# -gt 1 ] || port=8000
        [ $# -gt 1 ] && port=$2
        touch .htaccess
        docker run --rm -p $port:80 -e LOG_STDOUT=true -e LOG_STDERR=true -e LOG_LEVEL=debug -v $PWD:/var/www/html fauria/lamp
	fi

	if [ $1 = "ftp" ]
	then
		pkg install ftpd	
	fi

	if [ $1 = "sftp" ]
	then
		pkg install openssh-sftp-server
		easypasswd
		sudo /etc/init.d/ssh restart
	fi

	if [ $1 = "x2go" ]
	then
		pkg install x2go_server
	fi

	if [ $1 = "owncloud" ]
	then
		pkg install owncloud
	fi

	if [ $1 = "vpn" ]
	then
		pkg install vpn_server
	fi

	if [ $1 = "gitlab" ]
	then
		pkg install gitlab
	fi

	if [ $1 = "smtp" ]
	then
		pkg install smtp_server
	fi

	if [ $1 = "codiad" ]
	then
		pkg install codiad
	fi

	if [ $1 = "jenkins" ]
	then
		pkg install jenkins
	fi

	if [ $1 = "subsonic" ]
	then
		pkg install subsonic
	fi

	if [ $1 = "mediasonic" ]
	then
		pkg install mediasonic
	fi

	if [ $1 = "mediatomb" ]
	then
		pkg install mediatomb
	fi

	if [ $1 = "pptp" ]
	then
		pkg install pptpd
	fi

	if [ $1 = "deluge" ]
	then
		pkg install deluged
	fi

	if [ $1 = "webmin" ]
	then
		pkg install webmin
	fi

	if [ $1 = "webcam" ]
	then
		pkg install mjpeg_streamer
	fi

	if [ $1 = "syncthing" ]
	then
		pkg install syncthing
	fi

	if [ $1 = "aria2" ]
	then
		pkg install webui-aria2
	fi

	if [ $1 = "noip" ]
	then
		pkg install noip
	fi

	if [ $1 = "emby" ]
	then
		pkg install emby
	fi

	if [ $1 = "hostap" ]
	then
		pkg install hostap
	fi

	if [ $1 = "jupyter" ]
	then
		pkg install jupyter
		jupyter notebook
	fi

	if [ $1 = "socks" ]
	then
		ssh -N -D 0.0.0.0:1080 localhost
	fi

	if [ $1 = "iodine" ]
	then
		pkg install iodine
		while true
		do
			sudo iodined -c -P `pword` -f 10.0.0.1 i.iodine-pga.cu.cc
			sleep 10
		done
	fi

	if [ $1 = "proxy" ]
	then
		pkg install squid3
		sudo squid3
	fi

	if [ $1 = "webconsole" ]
	then
		ssh_server
		pkg install webconsole
	fi

	if [ $1 = "shellinabox" ]
	then
		easypasswd
		pkg install shellinabox
	fi

	if [ $1 = "gotty" ]
	then
		pkg install gotty
		( echo '#!/bin/bash'; echo '[ `tmux a #` ] || tmux' ) | sudo tee /usr/bin/tmux_a
	       	sudo chmod +x /usr/bin/tmux_a
		echo 'gotty -w tmux_a' > ~/gotty.sh
		chmod +x ~/gotty.sh 
		nohup ~/gotty.sh &
	fi

	if [ $1 = "gotty2" ]
	then
		pkg install gotty
		( echo '#!/bin/bash'; echo '[ `tmux a #` ] || tmux' ) | sudo tee /usr/bin/tmux_a
	       	sudo chmod +x /usr/bin/tmux_a
		echo "gotty -p 8081 -c gotty:$(pword gotty) -w tmux_a" > /tmp/gotty.sh
		chmod +x /tmp/gotty.sh
		/tmp/gotty.sh
	fi

    if [ $1 = "gotty3" ]
    then

        [ $# -gt 1 ] || port=8081
        [ $# -gt 1 ] && port=$2

        [ $port -lt 1024 ] && sudocmd=sudo
        [ $port -lt 1024 ] || sudocmd=

        pkg install gotty
        ( echo '#!/bin/bash'; echo '[ `tmux a #` ] || tmux' ) | sudo tee /usr/bin/tmux_a
        sudo chmod +x /usr/bin/tmux_a
        echo "$sudocmd gotty -p $port -c gotty:$(pword gotty) -w tmux_a" > /tmp/gotty.sh
        chmod +x /tmp/gotty.sh
        /tmp/gotty.sh
    fi

	if [ $1 = "pydio" ]
	then
		pkg install pydio
	fi

	if [ $1 = "nextcloud" ]
	then
		pkg install nextcloud
	fi

	if [ $1 = "guacamole" ]
	then
		pkg install guacamole
	fi

	if [ $1 = "mosh" ]
	then
		pkg install mosh
	fi

	if [ $1 = "flowplayer" ]
	then
		pkg install flowplayer
	fi

	if [ $1 = "etherpad" ]
	then
		pkg install etherpad
		cd ~/etherpad-lite
		bin/run.sh
	fi
	if [ $1 = "letschat" ]
	then
		pkg install letschat
		cd ~/lets-chat 
		npm start
	fi
	if [ $1 = "rocketchat" ]
	then
		pkg install rocketchat-server
	fi
	if [ $1 = "jitsi" ]
	then
		pkg install jitsi
	fi
	if [ $1 = "input" ]
	then
		n=8000
		for a in `find /dev/input/by-path/ -type l`
		do 
			echo $a
			tmux new -d -s input-$n "while true; do nc -l -p $n | sudo tee $a ; done"
			n=$((n+1))
		done
	fi

	if [ $1 = "novnc" ]
	then
		pkg install novnc
		tmux new -d -s novnc "cd ~/noVNC; ./utils/launch.sh --vnc localhost:5900"
		tmux new -d -s vnc   "x11vnc"
	fi

	if [ $1 = "novnc2" ]
	then
		pkg install novnc2
		vnc4server -kill :1
		tmux new -d -s novnc "cd ~/noVNC; ./utils/launch.sh --vnc localhost:5901"
		tmux new -d -s vnc   "vnc4server"
	fi

	if [ $1 = "novnc3" ]
	then
		pkg install novnc3
		vnc4server -kill :1
		sudo rm -rf /tmp/.X11-unix /tmp/.X*-lock
		tmux new -d -s novnc "cd ~/noVNC; ./utils/launch.sh --vnc localhost:5901"
		tmux new -d -s vnc   "/usr/bin/vncserver; read"
	fi

	if [ $1 = "novnc4" ]
	then
		[ -e /usr/share/noVNC/ ] || pkg install novnc4
		/usr/bin/vncserver -kill :1
		sudo rm -fr /tmp/.X11-unix /tmp/.X*-lock
		[ $# = 1 ] && tmux new -d -s novnc "cd /usr/share/noVNC; sudo ./utils/launch.sh --listen 80 --vnc localhost:5901"
		[ $# = 2 ] && tmux new -d -s novnc "cd /usr/share/noVNC; sudo ./utils/launch.sh --listen $2 --vnc localhost:5901"
		tmux new -d -s vnc   "/usr/bin/vncserver; read"
	fi

	if [ $1 = "novncbridge" ]
	then
        [ $# -eq 1 ] && ip=localhost && ports=3389 && portd=5900
        [ $# -eq 2 ] && ip=$2 && ports=3389 && portd=5900
        [ $# -eq 3 ] && ip=$2 && ports=3389 && portd=$3
        [ $# -eq 4 ] && ip=$2 && ports=$3 && portd=$4
		[ -e /usr/share/noVNC/ ] || pkg install novnc4
		cd /usr/share/noVNC
        sudo ./utils/launch.sh --listen $ports --vnc $ip:$portd
	fi

	if [ $1 = "oneye" ]
	then
		pkg install oneye
	fi

	if [ $1 = "rssmail" ]
	then
		source ~/.dotfiles/source/.shell/rssmail
		while true; do rssmail_server; done
	fi

	if [ $1 = "avxmail" ]
	then
		source ~/.dotfiles/source/.shell/avaxhome
		while true; do avhome_mail_server; sleep 60; done
	fi

	if [ $1 = "nfs" ]
	then
        pkg install nfs
	fi

	if [ $1 = "rsswatch" ]
    then
        while true
        do
            mem=$(ps aux | grep rsstail | grep -v grep | awk '{print $4}' | sed 's/\.[0-9]//g')
            echo "Rsstail memory $mem"
            [ $mem -gt 30 ] && echo "\e[31m kill rsstail \e[0m"
            [ $mem -gt 30 ] && killall rsstail
            [ `date +%M` = 00 ] && [ $(( `date +%H` % 4 )) -eq 0 ] && killall rsstail && sleep 90
            sleep 10
        done
    fi

    if [ $1 = "nightlybak" ]
    then
    	while true
    	do
    		if [ `date +%H%M` = 0005 ]
    		then
                echo "===== Start ====="
                local_backup
                echo "===== End ====="
    			sleep $((60*5))
    		fi
    		sleep 10
    	done
    fi

    if [ $1 = "index" ]
    then
    	while true
    	do
            [ $(ls /media/removable/2TB2/homes/admin/ | wc -l) = 0 ] && echo '\e[31m Empty directory \e[0m' && sleep 10 && continue
            date
            mkd ~/servers/index
            echo "\e[34m ncdu \e[0m"
            ncdu /media/removable/2TB2/homes/admin/ -o ncdu

            echo "\e[34m files \e[0m"
            find /media/removable/2TB2/homes/admin/ > files

            echo "\e[34m convert_candidates \e[0m"
            convert_candidates > convert_candidates

            echo "\e[34m videos_cl \e[0m"
            if [ -e ~/tmp/videos_cl ]
            then
                \cp ~/tmp/videos_cl /tmp/classify_folders
                classify_folders_incremental /media/removable/2TB2/homes/admin/Videos > /tmp/classify_aux
                cat ~/tmp/videos_cl /tmp/classify_aux | sort > videos_cl
            else
                classify_folders /media/removable/2TB2/homes/admin/Videos > videos_cl
            fi

            echo "\e[34m bak \e[0m"
            bak ncdu files convert_candidates convert_sizes videos_cl
    		sleep 10
    	done
    fi

    if [ $1 = "pgdump" ]
    then
        [ "$2" = "" ] && date_pgdump=0005
        [ "$2" = "" ] || date_pgdump=$2
    	while true
    	do
    		if [ `date +%H%M` = $date_pgdump ]
    		then
                cat pgdump_list | while read line
                do
                    echo $line
                    name=$(echo $line | cut -d'/' -f4)
                    docker_run pg_dump_10 --format=c $line > /tmp/$name
                    # restore with docker_run pg_restore_10 -d $line $name
                done

                list=$(cat pgdump_list | cut -d'/' -f4 | sed 's|^|/tmp/|g' | paste -d' ' -s)
                tar -cvzf pgdump-`date +%y%m%d-%H%M%S`.tgz ${(z)list}

    			sleep $((60*5))
    		fi
    		sleep 10
    	done
    fi

    if [ $1 = "copy_candidates" ]
    then
        [ -e /tmp/flowcontrol_copy ] && rm -fr /tmp/flowcontrol_copy
        [ -e /tmp/flowcontrol_convert ] && rm -fr /tmp/flowcontrol_convert

        while [ $(cat /tmp/convert_candidates 2>/dev/null | wc -l) = 0 ]
        do
            sleep 1
        done

        while [ ! -e $convert_dir/disable ]
        do
            convert_flowcontrol start copy
            cat /tmp/convert_candidates | grep -v '  ' | tail -n+$( ( ls -d $convert_dir/*/; echo ) | wc -l ) | head -n1 | sed 's/^[0-9]* //g' | read line
            cp_convert "$line"
            convert_flowcontrol stop copy
        done
    fi

    if [ $1 = "convert_candidates_overlap" ]
    then

        [ -e /media/removable/2TB2/homes/admin/Videos ] || return
        [ -e $convert_dir ] || return
        [ -e $converted_dir ] || return

        [ -e /tmp/flowcontrol_copy ] && rm -fr /tmp/flowcontrol_copy
        [ -e /tmp/flowcontrol_convert ] && rm -fr /tmp/flowcontrol_convert

        echo "Creating list"
        convert_candidates > /tmp/convert_candidates

        while true
        do
            cd
            [ -e $convert_dir/disable ] && sleep 10 && continue

            convert_flowcontrol start convert

            convert_recursive 720

            convert_flowcontrol stop convert
        done
    fi

    if [ $1 = "convert_candidates" ]
    then
        [ "$2" = "" ] && date_vconv=0005
        [ "$2" = "" ] || date_vconv=$2
        [ "$3" = "" ] && limit=5
        [ "$3" = "" ] || limit=$3

        [ -e /tmp/convert_candidates ] && rm -fr /tmp/convert_candidates
        while true
        do
            cd
            if [ $date_vconv = "loop" ] || [ `date +%H%M` = $date_vconv ]
            then
                echo "----- Launch -----"
	            [ ! -e /media/removable/2TB2/homes/admin/Videos ] && sleep 10 && continue
	            [ ! -e $convert_dir ] && sleep 10 && continue

                if [ -e $convert_dir/disable ]
                then
                    [ -e /tmp/convert_candidates ] && rm -fr /tmp/convert_candidates
                    sleep 10
                    continue
                fi

                [ -e /tmp/convert_candidates ] || echo "Creating list"
                [ -e /tmp/convert_candidates ] || convert_candidates > /tmp/convert_candidates

                cat /tmp/convert_candidates | grep -v '  ' | tail -n+$( ( ls -d $convert_dir/*/; echo ) | wc -l ) | head -n$limit | sed 's/^[0-9]* //g' | while read line
                do
                    cp_convert "$line"
                done

                convert_recursive 720

                echo "----- Finish -----"
                sleep $((60*5))
            fi
            sleep 10
        done
    fi

    if [ $1 = "convert_candidates_while" ]
    then
        return
        while true
        do
            cd $convert_dir

            ls | grep _noconvert_round2 > /tmp/convert_list

            if [ -e /tmp/cpspace_copying ]
            then
                comm -23 <(sort /tmp/convert_list) /tmp/cpspace_copying > /tmp/ccw_aux
                \cp /tmp/ccw_aux /tmp/convert_list
            fi

            (
            cat /tmp/convert_list | while read line
            do
                convert_decompress_rm "$line"
            done
            )

            stpfolders | source /dev/stdin
            stpfolders | source /dev/stdin
            stpfolders | source /dev/stdin

            cat /tmp/convert_list | dupl3 's/_noconvert_round2//g' | sed 's/^/mv /g' | source /dev/stdin

            convert_2spaces

            convert_mkfolders

            convert_recursive_parallel_core

            sleep 10
        done
    fi

    if [ $1 = "night" ]
    then
        [ "$2" = "" ] && date_night=0005
        [ "$2" = "" ] || date_night=$2

        echo $date_night
        which night

    	while true
    	do
    		if [ `date +%H%M` = $date_night ] || [ $date_night = "loop" ]
    		then
                echo "===== Start ====="
                night
                echo "===== End ====="

                echo $date_night
                which night

    			sleep $((60*5))
    		fi
    		sleep 10
    	done
    fi

    if [ $1 = "pauseinterval" ]
    then
        shift
        [ $# -gt 0 ] || date_start=0900
        [ $# -gt 0 ] && date_start=$1
        [ $# -gt 1 ] || date_stop=1300
        [ $# -gt 1 ] && date_stop=$2

        echo $date_start $date_stop

        while true
        do
            [ `date +%H%M` = $date_start ] && touch /tmp/pause
            [ `date +%H%M` = $date_stop  ] && rm -fr /tmp/pause
            sleep 10
        done
    fi

    if [ $1 = "kredeploy" ]
    then

        namespace=demo

        while true
        do

            images=$(cat images | paste -d' ' -s)

            for image in ${(z)images}
            do
                imgname=$(echo $image | sed 's|[^/]*/[^/]*/[^/]*/\([^:]*\):.*|\1|g')

                docker images -q > /tmp/images_pre
                docker pull $image
                docker images -q > /tmp/images_post
                if [ "$(diff /tmp/images_pre /tmp/images_post)" != "" ]
                then

                    kubectl cluster-info dump | grep hostIP | sed 's/.*"hostIP": "\(.*\)".*/\1/g' | sort | uniq | while read nodeip
                    do
                        docker_send $USER $nodeip $image
                    done

                    http_proxy="" https_proxy="" kubectl scale --replicas=0 deployment/${imgname}-deployment --namespace $namespace
                    sleep 1
                    http_proxy="" https_proxy="" kubectl scale --replicas=1 deployment/${imgname}-deployment --namespace $namespace
                fi
            done
            sleep 1
        done
    fi
    if [ $1 = "kmail" ]
    then
        namespace=demo

        [ -e restarts ] || mkdir restarts

        while true
        do
            pods=$(k get pods --namespace $namespace | tail -n +2 | awk '{print $1}' | paste -d' ' -s)

            for pod in ${(z)pods}
            do

                podname=$pod
                echo "\e[34m checking $podname \e[0m"

                if [ -e restarts/$podname ]
                then
                    restarts=$(http_proxy="" https_proxy="" kubectl get pods --namespace $namespace | grep $pod | awk '{print $4}')
                    prev_restarts=$(cat restarts/$podname)
                    echo $restarts > restarts/$podname

                    if [ $restarts != $prev_restarts ]
                    then

                        echo "\e[33m mail triggered for pod $pod \e[0m"

                        date_current=$(date +%s)

                        if [ -e restarts/${pod}_date ]
                        then
                            date_last_time=$(cat restarts/${pod}_date)

                            [ $(( $date_current - $date_last_time )) -lt $(( 1 * 60 * 60 )) ] && continue

                            echo $date_current > restarts/${pod}_date

                            echo "\e[31m mail sent for pod $pod \e[0m"

                            sleep 10

                            kmail_log $podname

                        else

                            echo $date_current > restarts/${pod}_date

                            echo "\e[31m mail sent for pod $pod \e[0m"

                            sleep 10

                            kmail_log $podname

                        fi

                    fi
                else
                    restarts=$(http_proxy="" https_proxy="" kubectl get pods --namespace $namespace | grep $pod | awk '{print $4}')
                    echo $restarts > restarts/$podname
                fi
            done

            sleep 10

        done
    fi

    if [ $1 = "rates" ]
    then
        while true
        do
            if [ `date +%M` = 00 ] && [ $(( `date +%H` % 3 )) -eq 0 ]
            then
                previous_n_avh=$(cat ~/servers/rate/n_avh)
                previous_n_rss=$(cat ~/servers/rate/n_rss)
                actual_n_avh=$(cat ~/servers/avxhome/avxtitles | wc -l )
                actual_n_rss=$(cat ~/servers/rssmail/rsstitles | wc -l )

                diff_avh=$(( $actual_n_avh - $previous_n_avh ))
                diff_rss=$(( $actual_n_rss - $previous_n_rss ))

                date
                echo "diff_avh = $diff_avh"
                echo "diff_rss = $diff_rss"

                [ $diff_avh -lt 1 ] && echo "\e[31m Low rate on avh \e[0m" && notify_rates
                [ $diff_rss -lt 1 ] && echo "\e[31m Low rate on rss \e[0m" && notify_rates

                echo $actual_n_avh > ~/servers/rate/n_avh
                echo $actual_n_rss > ~/servers/rate/n_rss

                sleep $((60*5))
            fi
            sleep 10
        done
    fi

    if [ $1 = "sasl" ]
    then
        while true
        do

            [ "$( tmux ca -pt avxmail:1 | grep 'SASL authentication failed' )" != "" ] && \
                echo "\e[31m SASL Authentication error \e[0m" && notify_sasl && sleep $(( 1 * 60 * 60 ))

            sleep $((60*5))
        done
    fi

    if [ $1 = "space" ]
    then
        [ $# -eq 1 ] && drive=sda1
        [ $# -eq 2 ] && drive=$2
        while true
        do
            space=$( dfh | grep "$drive " | awk '{print $5}' | sed 's/%//g' )
            echo "\e[32m space \e[0m $space %"
            [ $space -gt 80 ] && echo "\e[31m Low space \e[0m" && notify_space $space && notify_space_full $drive
            sleep 10
        done
    fi

    if [ $1 = "space2" ]
    then
        [ $# -eq 1 ] && drive=sda1
        [ $# -eq 2 ] && drive=$2
        while true
        do
            space=$( df -BG | grep "$drive " | awk '{print $4}' | sed 's/G//g' )
            echo "\e[32m space \e[0m $space G"
            [ $space -lt 60 ] && echo "\e[31m Low space \e[0m" && notify_space_2 $space && notify_space_full_2 $drive
            sleep 10
        done
    fi


    if [ $1 = "send" ]
    then
        shift
        cd
        while true
        do
            aws_load send
            ip=$( cat /tmp/aws_config | grep AWS_SERVER | cut -d'=' -f2 )
            if ping -c1 -w1 $ip >/dev/null 2>/dev/null
            then
                echo "\e[34m Sending \e[0m"
                for a in $*
                do
                    aws_send $a
                done
            else
                echo "\e[31m Not Sending \e[0m"
            fi
            sleep 10
        done
    fi

    if [ $1 = "trape" ]
    then
        mkdir -p ~/servers/trape/
        cd ~/html
        touch index.html

        lastdateline=0
        dateline=0

        ( server lamp2 8000 2>&1 ) \
        | while read line
        do
            echo $line >> ~/servers/trape/logs.txt

            if [ "$(echo $line | grep -i get | grep -i mp4 | grep -vi nolog)" != "" ]
            then
                lastdateline=$dateline
                dateline=$(date +%s)
                [ $(( $dateline - $lastdateline )) -gt $(( 5 * 60 )) ] && echo
            fi

            echo $line \
            | grep -vi nolog \
            | grep -i get \
            | grep -i mp4 \
            | grep 'HTTP/1.1" 200' \
            | awk 'BEGIN{}{print $1" "$4" "$7}' \
            | sed -e 's/\[//g' -e 's/\.mp4//g'
        done
    fi

    if [ $1 = "cpspace" ]
    then
        prefix=$2
        postfix=$3
        cat cpspace | while read line
        do
            echo "\e[34m line \e[0m $line"

            size=$(echo $line | sed 's/^\([^ ]*\) .*/\1/g')
            file=$(echo $line | sed 's/^[^ ]* \(.*\)/\1/g')
            filename="$(basename $file)"
            dest="$filename$postfix"
            margin=100

            if [ -e "$dest" ]
            then
                echo "\e[33m Existing $dest \e[0m"
                continue
            fi

            if [ -e "$filename" ]
            then
                echo "\e[33m Existing $filename \e[0m"
                continue
            fi

            if [ "$(ls | grep "$filename.*")" != "" ]
            then
                echo "\e[33m Existing $(ls | grep "$filename.*" | head -n1) \e[0m"
                continue
            fi

            while true
            do

                [ -e /tmp/pause ] && echo "\e[34m Pause \e[0m"
                while [ -e /tmp/pause ]; do sleep 1; done

                space=$(df -B1G /dev/sdb | awk '{print $4}' | tail -n1)

                if [ $(( $space - $size )) -gt $margin ]
                then
                    echo -n "\e[33m $size $space \e[34m copy $file ... \e[31m"
                    echo "$dest" > /tmp/cpspace_copying
                    cp -r "$prefix/$file" "$dest"
                    rm -fr /tmp/cpspace_copying
                    echo "\e[32m Finished \e[0m"
                    break
                fi
                sleep 10
            done
        done
    fi

}


pgrestore(){

      tar -xvzf $1

      cd tmp

      cat ../pgdump_list | while read line
      do
          echo $line
          url=$line
          name=$(echo $line | cut -d'/' -f4)
          docker_run pg_restore_10 -d $url $name
      done

      cd ..
}

pgrestore_2(){

      tar -xvzf $1

      cd tmp

      ls | while read line
      do
          echo $line
          name=$(echo $line | cut -d'/' -f4)
          url=postgres://postgres:postgres@localhost:1234/$name
          docker_run pg_restore_10 -d $url $name
      done

      cd ..
}

kmail_log(){


    podname=$1
    namespace=demo

    for a in $(seq 1 100)
    do
        kubectl logs -p $podname --tail=100 --namespace $namespace > /tmp/kmail_log
        [ "$(cat /tmp/kmail_log | grep 'Unable to retrieve container logs for docker')" = "" ] && continue
        sleep 1
    done

    cat mails | while read mail
    do
        address=$(echo $mail | awk '{print $1}' )
        regex=$(echo $mail | awk '{print $2}' )
        [ "$(echo $podname | egrep $regex)" != "" ] && echo "\e[31m Sending logs to $mail \e[0m" && cat /tmp/kmail_log | /usr/bin/mutt -s "Pod $podname has crashed" -- $mail
    done
}

notify_rates(){
    previous_n_avh=$(cat ~/servers/rate/n_avh)
    previous_n_rss=$(cat ~/servers/rate/n_rss)
    actual_n_avh=$(cat ~/servers/avxhome/avxtitles | wc -l )
    actual_n_rss=$(cat ~/servers/rssmail/rsstitles | wc -l )

    diff_avh=$(( $actual_n_avh - $previous_n_avh ))
    diff_rss=$(( $actual_n_rss - $previous_n_rss ))
    w3m_lines=$(w3m -dump avxhm.se | wc -l)

    echo "Low notification rates on server $diff_avh $diff_rss $w3m_lines" | /usr/bin/mutt -F ~/.mutt/muttrc_0 -s "LOW NOTIFICATION RATES ON SERVER" -- pablo.aledo@gmail.com
}

notify_space(){
    echo "Low space on server: $1 %" | /usr/bin/mutt -F ~/.mutt/muttrc_0 -s "LOW SPACE ON SERVER" -- pablo.aledo@gmail.com
}

notify_space_2(){
    echo "Low space on server: $1 G" | /usr/bin/mutt -F ~/.mutt/muttrc_0 -s "LOW SPACE ON SERVER" -- pablo.aledo@gmail.com
}

notify_sasl(){
    echo "sasl authentication error" | /usr/bin/mutt -F ~/.mutt/muttrc_0 -s "SASL AUTH ERROR" -- pablo.aledo@gmail.com
}

notify_space_full(){
    while true
    do
        space=$( dfh | grep "$1 " | awk '{print $5}' | sed 's/%//g' )
        echo "\e[33m space_full \e[0m $space %"
        [ $space -gt 97 ] && echo "\e[31m DISK IS FULL \e[0m"
        [ $space -gt 97 ] && echo "Disk is full" | /usr/bin/mutt -F ~/.mutt/muttrc_0 -s "DISK IS FULL" -- pablo.aledo@gmail.com
        [ $space -gt 97 ] && sleep $(( 1 * 60 * 60 ))
        [ $space -lt 80 ] && return
        sleep 10
    done
}

notify_space_full_2(){
    while true
    do
        space=$( df -BG | grep "$1 " | awk '{print $4}' | sed 's/G//g' )
        echo "\e[33m space_full \e[0m $space G"
        [ $space -lt 5 ] && echo "\e[31m DISK IS FULL \e[0m"
        [ $space -lt 5 ] && echo "Disk is full" | /usr/bin/mutt -F ~/.mutt/muttrc_0 -s "DISK IS FULL" -- pablo.aledo@gmail.com
        [ $space -lt 5 ] && sleep $(( 1 * 60 * 60 ))
        [ $space -gt 60 ] && return
        sleep 10
    done
}

aws_servers(){
	tmux new -d -s rssmail  "source ~/.shell; server rssmail"
	tmux new -d -s avxmail  "source ~/.shell; server avxmail"
	tmux new -d -s rates    "source ~/.shell; server rates"
	tmux new -d -s rsswatch "source ~/.shell; server rsswatch"
	tmux new -d -s space    "source ~/.shell; server space2"
    # tmux join-pane -t :rssmail.1 -s rsswatch
	# tmux new -d -s sasl     "source ~/.shell; server sasl"
	#[ -e /media/DATA/html ] && tmux new -d -s gopro "source ~/.shell; cd /media/DATA/html; docker_app lamp"
	#tmux new -d -s send     "source ~/.shell; server send servers"
    #server novnc4
}

night_pdf(){
    ( cd ~/Descargas/; bak report /tmp/s2link /tmp/s2files /tmp/s2files2 )
    rm -rf /tmp/s2link /tmp/s2files /tmp/s2files2
    DISPLAY=:1 xdotool key 0
    sleep 10

    shc s2link 100 "label: pdf is: starred" 20
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw
    sleep 10

    shc pdfl
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw
}

night_avh(){
    ( cd ~/Descargas/; bak report /tmp/s2link /tmp/s2files /tmp/s2files2 )
    rm -rf /tmp/s2link /tmp/s2files /tmp/s2files2 /tmp/already_downloaded /tmp/star_not_found
    DISPLAY=:1 xdotool key 0
    sleep 10

    shc s2count
    DISPLAY=:1 xdotool key 1
    sleep 1 && shcw
    DISPLAY=:1 xdotool key 0
    sleep 10

    shc s2link
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw
    sleep 10

    shc avl
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw

    shc unstar
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw

}

night(){

    # do a backup
    local_backup

    # train learning
    learning.restart
    learning.fit

    # index files
    ncdu /media/removable/2TB2/homes/admin/ -o ~/ncdu
    find /media/removable/2TB2/homes/admin/ > ~/files

    # get list of candidate vides to convert
    convert_candidates > ~/convert_candidates

    # find duplicate files to remove
    mergehdd_rmdupes /media/removable/2TB2/homes/admin/OLD /media/removable/2TB2/homes/admin/Work > ~/rmold

    # classify videos and mirror directory structure to find candidates to remove
    rm -fr /media/DATA/videos_mirror
    classify_and_mirror /media/removable/2TB2/homes/admin/Videos /media/DATA/videos_mirror

    # download
    night_pdf
    night_avh
}

loop_avh(){

    cd ~/servers
    bak outbox

    /bin/rm -rf ~/servers/outbox/.metadata.json /tmp/star_not_found

    ranger ~/servers/outbox
    /bin/rm -rf ~/servers/outbox/*

    vim ~/servers/outbox/.metadata.json

    shc mkread
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw
    sleep 30

    shc star
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw

    cd ~/servers
    bak metadata outbox/.metadata.json
    /bin/rm -rf ~/servers/outbox/.metadata.json

    echo "====="
    cat /tmp/star_not_found
}

convert_flowcontrol(){
    echo " ===== $(date) $1 $2 ====="

    if [ "$1" = "start" ] && [ "$2" = "convert" ]
    then
        while [ -e "/tmp/flowcontrol_copy" ]
        do
            sleep 1
        done
        touch /tmp/flowcontrol_convert
    fi

    if [ "$1" = "start" ] && [ "$2" = "copy" ]
    then
        touch /tmp/flowcontrol_copy
        sleep $(( 60 * 1 ))
    fi

    if [ "$1" = "stop" ] && [ "$2" = "convert" ]
    then
        rm -fr /tmp/flowcontrol_convert
        sleep 10
    fi

    if [ "$1" = "stop" ] && [ "$2" = "copy" ]
    then
        while [ -e "/tmp/flowcontrol_convert" ]
        do
            sleep 1
        done
        rm -fr /tmp/flowcontrol_copy
        sleep 10
    fi
}

