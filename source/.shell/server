#source $(dirname $(readlink -f $0))/pkg
#source $(dirname $(readlink -f $0))/easypasswd
#source $(dirname $(readlink -f $0))/myshell

server(){

	if [ $1 = "vnc" ]
	then
		pkg install x11vnc
		while true
		do 
			x11vnc
			sleep 1
		done
	fi

	if [ $1 = "ssh" ]
	then
		pkg install openssh-server
		pkg install tmux
		easypasswd
		myshell tmux
		sudo /etc/init.d/ssh restart
		sudo mkdir /var/run/sshd
		sudo /usr/sbin/sshd -p22
	fi

	if [ $1 = "ssh80" ]
	then
		while true
		do
			sudo /usr/sbin/sshd -d -p 80
			sleep 1
		done
	fi

	if [ $1 = "telnet" ]
	then
		pkg install telnetd
		easypasswd
	fi

	if [ $1 = "nx" ]
	then
		pkg install nomachine
		sudo sed -i 's/#VirtualDesktopAuthorization 1/VirtualDesktopAuthorization 0/g' /usr/NX/etc/server.cfg
		sudo sed -i 's/#PhysicalDesktopAuthorization 1/PhysicalDesktopAuthorization 0/g' /usr/NX/etc/server.cfg
		sudo /etc/init.d/nxserver restart
	fi

	if [ $1 = "lamp" ]
	then
		pkg install lamp
	fi

	if [ $1 = "ftp" ]
	then
		pkg install ftpd	
	fi

	if [ $1 = "sftp" ]
	then
		pkg install openssh-sftp-server
		easypasswd
		sudo /etc/init.d/ssh restart
	fi

	if [ $1 = "x2go" ]
	then
		pkg install x2go_server
	fi

	if [ $1 = "owncloud" ]
	then
		pkg install owncloud
	fi

	if [ $1 = "vpn" ]
	then
		pkg install vpn_server
	fi

	if [ $1 = "gitlab" ]
	then
		pkg install gitlab
	fi

	if [ $1 = "smtp" ]
	then
		pkg install smtp_server
	fi

	if [ $1 = "codiad" ]
	then
		pkg install codiad
	fi

	if [ $1 = "jenkins" ]
	then
		pkg install jenkins
	fi

	if [ $1 = "subsonic" ]
	then
		pkg install subsonic
	fi

	if [ $1 = "mediasonic" ]
	then
		pkg install mediasonic
	fi

	if [ $1 = "mediatomb" ]
	then
		pkg install mediatomb
	fi

	if [ $1 = "pptp" ]
	then
		pkg install pptpd
	fi

	if [ $1 = "deluge" ]
	then
		pkg install deluged
	fi

	if [ $1 = "webmin" ]
	then
		pkg install webmin
	fi

	if [ $1 = "webcam" ]
	then
		pkg install mjpeg_streamer
	fi

	if [ $1 = "syncthing" ]
	then
		pkg install syncthing
	fi

	if [ $1 = "aria2" ]
	then
		pkg install webui-aria2
	fi

	if [ $1 = "noip" ]
	then
		pkg install noip
	fi

	if [ $1 = "emby" ]
	then
		pkg install emby
	fi

	if [ $1 = "hostap" ]
	then
		pkg install hostap
	fi

	if [ $1 = "jupyter" ]
	then
		pkg install jupyter
		jupyter notebook
	fi

	if [ $1 = "socks" ]
	then
		ssh -N -D 0.0.0.0:1080 localhost
	fi

	if [ $1 = "iodine" ]
	then
		pkg install iodine
		while true
		do
			sudo iodined -c -P `pword` -f 10.0.0.1 i.iodine-pga.cu.cc
			sleep 10
		done
	fi

	if [ $1 = "proxy" ]
	then
		pkg install squid3
		sudo squid3
	fi

	if [ $1 = "webconsole" ]
	then
		ssh_server
		pkg install webconsole
	fi

	if [ $1 = "shellinabox" ]
	then
		easypasswd
		pkg install shellinabox
	fi

	if [ $1 = "gotty" ]
	then
		pkg install gotty
		( echo '#!/bin/bash'; echo '[ `tmux a #` ] || tmux' ) | sudo tee /usr/bin/tmux_a
	       	sudo chmod +x /usr/bin/tmux_a
		echo 'gotty -w tmux_a' > ~/gotty.sh
		chmod +x ~/gotty.sh 
		nohup ~/gotty.sh &
	fi

	if [ $1 = "pydio" ]
	then
		pkg install pydio
	fi

	if [ $1 = "nextcloud" ]
	then
		pkg install nextcloud
	fi

	if [ $1 = "guacamole" ]
	then
		pkg install guacamole
	fi

	if [ $1 = "mosh" ]
	then
		pkg install mosh
	fi

	if [ $1 = "flowplayer" ]
	then
		pkg install flowplayer
	fi

	if [ $1 = "etherpad" ]
	then
		pkg install etherpad
		cd ~/etherpad-lite
		bin/run.sh
	fi
	if [ $1 = "letschat" ]
	then
		pkg install letschat
		cd ~/lets-chat 
		npm start
	fi
	if [ $1 = "rocketchat" ]
	then
		pkg install rocketchat-server
	fi
	if [ $1 = "jitsi" ]
	then
		pkg install jitsi
	fi
	if [ $1 = "input" ]
	then
		n=8000
		for a in `find /dev/input/by-path/ -type l`
		do 
			echo $a
			tmux new -d -s input-$n "while true; do nc -l -p $n | sudo tee $a ; done"
			n=$((n+1))
		done
	fi

	if [ $1 = "novnc" ]
	then
		pkg install novnc
		tmux new -d -s novnc "cd ~/noVNC; ./utils/launch.sh --vnc localhost:5900"
		tmux new -d -s vnc   "x11vnc"
	fi

	if [ $1 = "novnc2" ]
	then
		pkg install novnc2
		vnc4server -kill :1
		tmux new -d -s novnc "cd ~/noVNC; ./utils/launch.sh --vnc localhost:5901"
		tmux new -d -s vnc   "vnc4server"
	fi

	if [ $1 = "novnc3" ]
	then
		pkg install novnc3
		vnc4server -kill :1
		sudo rm -rf /tmp/.X11-unix /tmp/.X*-lock
		tmux new -d -s novnc "cd ~/noVNC; ./utils/launch.sh --vnc localhost:5901"
		tmux new -d -s vnc   "/usr/bin/vncserver; read"
	fi

	if [ $1 = "novnc4" ]
	then
		[ -e /usr/share/noVNC/ ] || pkg install novnc4
		/usr/bin/vncserver -kill :1
		sudo rm -fr /tmp/.X11-unix /tmp/.X*-lock
		[ $# = 1 ] && tmux new -d -s novnc "cd /usr/share/noVNC; sudo ./utils/launch.sh --listen 80 --vnc localhost:5901"
		[ $# = 2 ] && tmux new -d -s novnc "cd /usr/share/noVNC; sudo ./utils/launch.sh --listen $2 --vnc localhost:5901"
		tmux new -d -s vnc   "/usr/bin/vncserver; read"
	fi

	if [ $1 = "oneye" ]
	then
		pkg install oneye
	fi

	if [ $1 = "rssmail" ]
	then
		source ~/.dotfiles/source/.shell/rssmail
		while true; do rssmail_server; done
	fi

	if [ $1 = "avxmail" ]
	then
		source ~/.dotfiles/source/.shell/avaxhome
		while true; do avhome_mail_server; sleep 60; done
	fi

	if [ $1 = "nfs" ]
	then
        pkg install nfs
	fi

	if [ $1 = "rsswatch" ]
    then
        while true
        do
            mem=$(ps aux | grep rsstail | grep -v grep | awk '{print $4}' | sed 's/\.[0-9]//g')
            echo "Rsstail memory $mem"
            [ $mem -gt 30 ] && echo "\e[31m kill rsstail \e[0m"
            [ $mem -gt 30 ] && killall rsstail
            [ `date +%M` = 00 ] && [ $(( `date +%H` % 4 )) -eq 0 ] && killall rsstail && sleep 90
            sleep 10
        done
    fi

    if [ $1 = "nightlybak" ]
    then
    	while true
    	do
    		if [ `date +%H%M` = 0005 ]
    		then
                echo "===== Start ====="
                local_backup
                echo "===== End ====="
    			sleep $((60*5))
    		fi
    		sleep 10
    	done
    fi

    if [ $1 = "pgdump" ]
    then
        [ "$2" = "" ] && date_pgdump=0005
        [ "$2" = "" ] || date_pgdump=$2
    	while true
    	do
    		if [ `date +%H%M` = $date_pgdump ]
    		then
                cat pgdump_list | while read line
                do
                    echo $line
                    name=$(echo $line | cut -d'/' -f4)
                    docker_run pg_dump_10 --format=c $line > /tmp/$name
                    # restore with docker_run pg_restore_10 -d $line $name
                done

                list=$(cat pgdump_list | cut -d'/' -f4 | sed 's|^|/tmp/|g' | paste -d' ' -s)
                tar -cvzf pgdump-`date +%y%m%d-%H%M%S`.tgz ${(z)list}

    			sleep $((60*5))
    		fi
    		sleep 10
    	done
    fi

    if [ $1 = "convert_candidates" ]
    then
        [ "$2" = "" ] && date_vconv=0005
        [ "$2" = "" ] || date_vconv=$2
        [ "$3" = "" ] && limit=5
        [ "$3" = "" ] || limit=$3
        while true
        do
            cd
            if [ `date +%H%M` = $date_vconv ]
            then
                echo "----- Launch -----"
	            [ ! -e /media/removable/2TB2/homes/admin/Videos ] && sleep 10 && continue
	            [ ! -e $convert_dir ] && sleep 10 && continue
                [ -e $convert_dir/disable ] && sleep 10 && continue
                convert_candidates | tail -n+$( ( ls -d $convert_dir/*/; echo ) | wc -l ) | head -n$limit | sed 's/^[0-9]* //g' | grep -v '  ' | while read line
                do
                    cp_convert "$line"
                done
                convert_recursive 720
                echo "----- Finish -----"
                sleep $((60*5))
            fi
            sleep 10
        done
    fi

    if [ $1 = "night" ]
    then
        [ "$2" = "" ] && date_night=0005
        [ "$2" = "" ] || date_night=$2

        echo $date_night
        which night

    	while true
    	do
    		if [ `date +%H%M` = $date_night ]
    		then
                echo "===== Start ====="
                night
                echo "===== End ====="

    			sleep $((60*5))
    		fi
    		sleep 10
    	done
    fi

    if [ $1 = "kredeploy" ]
    then

        namespace=demo

        while true
        do

            images=$(cat images | paste -d' ' -s)

            for image in ${(z)images}
            do
                imgname=$(echo $image | sed 's|[^/]*/[^/]*/[^/]*/\([^:]*\):.*|\1|g')

                docker images -q > /tmp/images_pre
                docker pull $image
                docker images -q > /tmp/images_post
                if [ "$(diff /tmp/images_pre /tmp/images_post)" != "" ]
                then
                    http_proxy="" https_proxy="" kubectl scale --replicas=0 deployment/${imgname}-deployment --namespace $namespace
                    sleep 1
                    http_proxy="" https_proxy="" kubectl scale --replicas=1 deployment/${imgname}-deployment --namespace $namespace
                fi
            done
            sleep 1
        done
    fi
    if [ $1 = "kmail" ]
    then
        namespace=demo

        [ -e restarts ] || mkdir restarts

        while true
        do
            pods=$(k get pods --namespace $namespace | tail -n +2 | awk '{print $1}' | paste -d' ' -s)

            for pod in ${(z)pods}
            do
                podname=$pod
                echo "\e[34m checking $podname \e[0m"

                if [ -e restarts/$podname ]
                then
                    restarts=$(http_proxy="" https_proxy="" kubectl get pods --namespace $namespace | grep $pod | awk '{print $4}')
                    prev_restarts=$(cat restarts/$podname)
                    echo $restarts > restarts/$podname

                    if [ $restarts != $prev_restarts ]
                    then

                        echo "\e[33m mail triggered for pod $1 \e[0m"

                        date_current=$(date +%s)
                        date_last_time=$(cat restarts/${1}_date)

                        [ $(( $date_current - $date_last_time )) -lt $(( 1 * 60 * 60 )) ] && continue

                        echo $date_current > restarts/${1}_date

                        echo "\e[31m mail sent for pod $1 \e[0m"

                        kmail_log $podname
                    fi
                else
                    restarts=$(http_proxy="" https_proxy="" kubectl get pods --namespace $namespace | grep $pod | awk '{print $4}')
                    echo $restarts > restarts/$podname
                fi
            done

            sleep 10

        done
    fi
}


pgrestore(){

      tar -xvzf $1

      cd tmp

      cat ../pgdump_list | while read line
      do
          echo $line
          url=$line
          name=$(echo $line | cut -d'/' -f4)
          docker_run pg_restore_10 -d $url $name
      done

      cd ..
}

pgrestore_2(){

      tar -xvzf $1

      cd tmp

      ls | while read line
      do
          echo $line
          name=$(echo $line | cut -d'/' -f4)
          url=postgres://postgres:postgres@localhost:1234/$name
          docker_run pg_restore_10 -d $url $name
      done

      cd ..
}

kmail_log(){


    podname=$1
    namespace=demo

    cat mails | while read mail
    do
        http_proxy="" https_proxy="" kubectl logs -p $podname --tail=100 --namespace $namespace | /usr/bin/mutt -s "Pod $podname has crashed" -- $mail
    done
}

aws_servers(){
    server novnc4
	tmux new -d -s rssmail "source ~/.shell; server rssmail"
	tmux new -d -s avxmail "source ~/.shell; server avxmail"
}

night_pdf(){
    ( cd ~/Descargas/; bak report /tmp/s2link /tmp/s2files /tmp/s2files2 )
    rm -rf /tmp/s2link /tmp/s2files /tmp/s2files2
    DISPLAY=:1 xdotool key 0
    sleep 10

    shc s2link 50 "label: pdf" 20
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw
    sleep 10

    shc pdfl
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw
}

night_avh(){
    ( cd ~/Descargas/; bak report /tmp/s2link /tmp/s2files /tmp/s2files2 )
    rm -rf /tmp/s2link /tmp/s2files /tmp/s2files2
    DISPLAY=:1 xdotool key 0
    sleep 10

    shc s2count
    DISPLAY=:1 xdotool key 1
    sleep 1 && shcw
    DISPLAY=:1 xdotool key 0
    sleep 10

    shc s2link
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw
    sleep 10

    shc avl
    DISPLAY=:1 xdotool key 6
    sleep 1 && shcw
}

night(){

    # do a backup
    local_backup

    # train learning
    learning.restart
    learning.fit

    # index files by size
    ncdu /media/removable/2TB2/homes/admin/ -o ~/ncdu

    # get list of candidate vides to convert
    convert_candidates > ~/convert_candidates

    # find duplicate files to remove
    mergehdd_rmdupes /media/removable/2TB2/homes/admin/OLD /media/removable/2TB2/homes/admin/Work > ~/rmold

    # classify videos and mirror directory structure to find candidates to remove
    rm -fr /media/DATA/videos_mirror
    classify_and_mirror /media/removable/2TB2/homes/admin/Videos /media/DATA/videos_mirror

    # download
    night_pdf
    night_avh
}

