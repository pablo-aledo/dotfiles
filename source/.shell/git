export GIT_TRUNK=master

Git(){
    command=$1
    shift
    case $command in

        (bisect_start) \git bisect start ;;
        (bisect_good) \git bisect good $* ;;
        (bisect_bad) \git bisect bad $* ;;
        (bisect_reset) \git bisect reset ;;
        (bisect_skip) \git bisect skip $* ;;
        (bisect_run) \git bisect run $* ;;
        (bisect_log) \git bisect log ;;

        (log_graph) \git log --oneline --graph ;;
        (log_follow) \git log --follow $* ;;
        (log_oneline_format) \git log --pretty=format:"%h%x09%an%x09%ad%x09%s" ;;
        (log_oneline_since) \git log --author="Pablo" --since="2013-01-30" --format=oneline ;;
        (log_branch)
            base=$(Git branch_base | sed 's/^\(........\).*/\1/g')
            \git log --oneline --graph | while read line; do [[ "$line" =~ $base ]]  && break; echo "$line"; done ;;
        (log_branch_format)
            base=$(Git branch_base | sed 's/^\(........\).*/\1/g')
            \git log --pretty=format:"%h%x09%an%x09%ad%x09%s" | while read line; do [[ "$line" =~ $base ]]  && break; echo "$line"; done ;;
        (log_oneline)
            base=$(Git branch_base | sed 's/^\(.......\).*/\1/g')
            \git log --oneline --graph | head -n $(stty size | awk '{print $1 - 5}') | sed "s/\* *$base/\x1b[31m>\x1b[0m $base/g"
        ;;

        (show_parents) git show --no-patch --format="%P" $1 ;;
        (set_parents) git replace --graft $1 $2 $3 ;;

        (diff_grep) \git diff --name-only -G"$1" ;;
        (diff_with_filename) \git diff $* | awk '/^\+\+\+/{print; $1=""; name=$0}{print name": "$0}' ;;
        (diff_name_only) \git diff --name-only $* ;;
        (diff_step) \git diff ${1}^:$2 ${1}:$2 ;;
        (difftool_step) \git difftool ${1}^:$2 ${1}:$2 ;;
        (diff_staged) \git diff --staged ;;
        (diff_vim) \git difftool --tool=vimdiff --no-prompt ;;
        (diff_branch) \git diff $(Git branch_base) $(\git rev-parse HEAD) ;;
        (difftool_branch) \git difftool $(Git branch_base) $(\git rev-parse HEAD) ;;
        (diff_branch_files) \git diff --name-only $(Git branch_base) $(\git rev-parse HEAD) ;;
        (diff_with_lines) \git diff $* | gawk '
              match($0,"^@@ -([0-9]+),([0-9]+) [+]([0-9]+),([0-9]+) @@",a){
                left=a[1]
                ll=length(a[2])
                right=a[3]
                rl=length(a[4])
              }
              /^(---|\+\+\+|[^-+ ])/{ print;next }
              { line=substr($0,2) }
              /^[-]/{ printf "-%"ll"s %"rl"s:%s\n",left++,""     ,line;next }
              /^[+]/{ printf "+%"ll"s %"rl"s:%s\n",""    ,right++,line;next }
                    { printf " %"ll"s %"rl"s:%s\n",left++,right++,line }
            ' ;;

        (branch_list) \git branch -a ;;
        (branch_base) \git merge-base $GIT_TRUNK $(\git rev-parse HEAD) ;;
        (branch_rewrite) \git rebase -i $(Git branch_base) ;; # pick, squash, squash, squash...
        (branch_delete) \git branch --delete $* ;;
        (branch_diff) \git diff $(Git branch_base) $(\git rev-parse HEAD) $* ;;
        (branch_difftool) \git difftool $(Git branch_base) $(\git rev-parse HEAD) $* ;;
        (branch_diff_files) \git diff --name-only $(Git branch_base) $(\git rev-parse HEAD) | cat ;;
        (branch_to_patch) \git diff $(Git branch_base) $(\git rev-parse HEAD) ;;
        (branch_to_file) \git log --cc $(Git branch_base)...HEAD ;;
        (branch_to_file_2) \git format-patch --stdout $(Git branch_base) ;; # consume with git am
        (branch_to_file_3)
            \git log | grep commit | grep -B9999 $(Git branch_base) | sed '$d' | cut -d' ' -f2 | tac | while read commit
            do
                echo "===== $commit $(Git message $commit | head -n1)"
                Git diff_step $commit | cat
            done
            ;;
        (branch_create) \git checkout -b $1 ;;
        (branch_delete) \git branch -D $1 ;;
        (branch_push) \git push --set-upstream origin $(\git rev-parse --abbrev-ref HEAD) ;;
        (branch_rebase) \git checkout $1; \git rebase -i $2 ;;
        (branch_rebase_keep) \git rebase -X ours $2 ;;
        (branch_get_file) mkdir -p "$(dirname $2)"; \git show $1:$2 > $2 ;;
        (branch_current) \git branch -a --contains HEAD | grep -v remotes | grep -v HEAD | sed -e 's/^ *//g' -e 's/^\* //g' ;;
        (branch_add_remote) # name url branch
            \git remote add $1 $2
            \git fetch $1 $3
            ;;
        (branch_clone)
            git log --oneline | head -n $(( $(git log --oneline | grep $1 -B99999 | wc -l) - 1 )) | awk '{print $1}' > /tmp/commits
            git checkout $1
            git checkout -b $2
            tac /tmp/commits | while read commit; do git cherry-pick $commit; done
            ;;

        (reset_branch) \git reset --hard origin/$(\git rev-parse --abbrev-ref HEAD) ;;
        (reset_last_commit) \git reset HEAD^ ;;

        (set_unchanged_deleted) \git ls-files --deleted -z | \git update-index --assume-unchanged -z --stdin ;;
        (set_changed_deleted) \git ls-files --deleted -z | \git update-index --no-assume-unchanged -z --stdin ;;

        (submodules_get) \git submodule update --init --recursive ;;
        (submodules_add) \git submodule add https://$1 $2 ;;
        (submodules_update) \git submodule update --remote --recursive ;;
        (submodules_remove) \git submodule deinit $1
                            \git rm $1
                            \rm -rf .git/modules/$1
                            ;;

        (step_fw) \git checkout $(\git rev-list --topo-order HEAD..$(Git branch_current) | tail -1) ;;
        (step_bw) \git checkout HEAD^ ;;
        (pull_rebase) \git pull --rebase ;;
        (push_force_lease) echo 'Are you sure?' && read && \git push --force-with-lease ;;
        (push_force) echo 'Are you sure?' && read && \git push --force ;;
        (clone_recursive) \git clone --recurse-submodules $* ;;
        (clone_single_branch) \git clone --branch $1 --single-branch $* ;;
        (clean) \git clean -df ;;
        (deep_clean) \git add .; \git commit -am "."; find -iname .gitignore -delete; \git clean -df; \git checkout .; \git reset HEAD^ ;;
        (init) \git init .; git add .; git commit -am "initial commit" ;;
        (list_excluded) \git ls-files -i -c --exclude-from=.gitignore ;;
        (interactive_checkout) \git checkout -p . ;;
        (interactive_add) \git add -p $* ;;
        (stash_save_all) \git add .; \git stash push -m "$1"; \git stash apply; \git restore --staged . ;;
        (stash_save_staged) \git add -u; \git stash push -m "$1"; \git stash apply ;;
        (unstage) \git restore --staged $* ;;
        (update_master) current_commit=$(\git rev-parse HEAD)
                \git checkout master
                \git pull
                \git checkout $current_commit
                [ "$(\git rev-parse $(Git branch_current))" = "$(\git rev-parse HEAD)" ] && \git checkout $(Git branch_current)
                ;;
        (update_trunk) current_commit=$(\git rev-parse HEAD)
                \git checkout $GIT_TRUNK
                \git pull
                \git checkout $current_commit
                [ "$(\git rev-parse $(Git branch_current))" = "$(\git rev-parse HEAD)" ] && \git checkout $(Git branch_current)
                ;;
        (status_uno) \git status -uno ;;
        (status_short) \git status -s ;;
        (cherry-pick_no_commit) \git cherry-pick --no-commit $* ;;
        (undo_last_commit) \git reset --soft HEAD^;;
        (append) git commit --amend --no-edit $* ;;
        (amend) git commit --amend $* ;;
        (revert_multiple) \git revert --no-commit HEAD~3.. ;;
        (resign) \git rebase --exec 'git commit --amend --no-edit -S' $* ;;
        (message) \git log --format=%B -n 1 $* ;;
        (daemon) \git daemon --reuseaddr --verbose --base-path=$PWD --export-all --enable=receive-pack -- $PWD/.git ;;
        (backup) \git clone --mirror $1/$2.git $2.git
                 cd $2.git
                 \git bundle create ../$2.bundle --all
                 cd ..
                 ;;
        (*) \git $command $*;;
    esac
}

git_branch_base(){
    [ "$1" = "closest" ] && \git log --oneline --graph | head -n1000 | grep '\*  ' | head -n1 | awk '{print $2}'
    [ "$1" = "closest" ] || \git merge-base master $(\git rev-parse HEAD)
}

git_filter_history(){
git filter-branch --env-filter '
WRONG_EMAIL="wrong@example.com"
NEW_NAME="New Name Value"
NEW_EMAIL="correct@example.com"

if [ "$GIT_COMMITTER_EMAIL" = "$WRONG_EMAIL" ]
then
    export GIT_COMMITTER_NAME="$NEW_NAME"
    export GIT_COMMITTER_EMAIL="$NEW_EMAIL"
fi
if [ "$GIT_AUTHOR_EMAIL" = "$WRONG_EMAIL" ]
then
    export GIT_AUTHOR_NAME="$NEW_NAME"
    export GIT_AUTHOR_EMAIL="$NEW_EMAIL"
fi
' --tag-name-filter cat -- --branches --tags
}

git_mychanges(){
    [ "$(git status -s | wc -l)" != 0 ] && { git status; echo "commit?"; read }
    Git log_oneline_format | head -n20 | grep -i pablo | awk '{print $1}' | tac | nl | awk -v dirname=$(basename $PWD) '{print "Git diff_step "$2" >> ../"dirname"_"$1".patch"}'
}

git_pgpkey(){
    gpg --full-generate-key
    keyid=$(gpg --list-secret-keys --keyid-format=long  | grep '^sec' | cut -d/ -f2 | cut -d' ' -f1)
    gpg --armor --export $keyid
    #git config --global user.signingkey $keyid
    #git config --global commit.gpgsign true
    #GitSign(){
    #    [ "$1" = "commit" ] && { shift; \git commit -sS $*; return }
    #    [ "$1" = "commit" ] || { \git $*; return }
    #}
}
