Git(){
    return
    command=$1
    shift
    case $command in

        (log_graph) \git log --oneline --graph | head ;;
        (log_follow) \git log --follow $* ;;

        (branch_rewrite) \git rebase -i $(\git merge-base master $(\git rev-parse HEAD)) ;; # pick, squash, squash, squash...
        (branch_to_patch) \git diff $(\git merge-base master $(\git rev-parse HEAD)) $(\git rev-parse HEAD) > ../patch.patch ;;
        (branch_to_file) \git log --cc $(\git merge-base master $(\git rev-parse HEAD))...HEAD > ../branch.patch ;;
        (branch_to_file_2) \git format-patch --stdout $(\git merge-base master $(\git rev-parse HEAD)) > ../branch2.patch ;; # consume with git am
        (branch_create) \git checkout -b $1 ;;
        (branch_push) \git push --set-upstream origin $(\git rev-parse --abbrev-ref HEAD) ;;
        (branch_rebase) \git checkout $1; \git rebase -i $2 ;;
        (branch_get_file) \git show $1:$2 > $2 ;;
        (branch_base) \git log --oneline --graph | head -n20 | grep '*  ' | head -n1 | awk '{print $2}' ;;

        (pull_rebase) \git pull --rebase ;;
        (push_force_lease) \git push --force-with-lease ;;
        (clone_recursive) \git clone --recurse-submodules $* ;;
        (clean) \git clean -df ;;
        (list_excluded) \git ls-files -i -c --exclude-from=.gitignore ;;
        (interactive_checkout) \git checkout -p . ;;
        (interactive_add) \git add -p $* ;;
        (stash_save_all) \git add .; \git stash push -m "$1"; \git stash apply ;;
        (stash_save_staged) \git add -u; \git stash push -m "$1"; \git stash apply ;;
        (remove_last_commit) \git reset --hard HEAD^ ;;
        (unstage) \git restore --staged $* ;;
        (status_uno) \git status -uno ;;
        (status_short) \git status -s ;;
        (cherrypick_no_commit) \git cherry-pick --no-commit $* ;;

        (*) \git $command $*;;
    esac
}
