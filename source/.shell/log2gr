[ -e ~/log2gr ] && LOG2GR_DIR=~/log2gr

ctags_index(){
    ctags -R --fields=+zln
    cat tags | grep -F $1 | while read line
    do
        ini=$(echo $line | sed 's/.*line:\([^ \t]*\)[ \t].*/\1/g')
        file=$(echo $line | awk '{print $2}')
        end=$(awk 'NR > first && /^}$/ { print NR; exit }' first=$ini $file)
        # end=$(awk -v first=$ini 'NR>=first && /{/              {c++}
        #                          NR>=first && /}/ && c && !--c {print NR; exit}' $file)
        echo "${line}\tend:${end}"
    done
}

ctags_extract(){
	cat tags | grep -F $1 | while read line
 	do
		fname="$(echo $line | awk '{print $1}')"
		file="$(echo $line | awk '{print $2}')"
	   	start="$(echo $line | sed 's/.*line:\([0-9]*\).*/\1/g')"
		end="$(echo $line | sed 's/.*end:\([0-9]*\).*/\1/g')"
		echo "cat $file | head -n $end | tail -n $(( $end - $start + 1 )) > functions/$fname"
   	done
}

ctags_info(){
    cd functions

	#grep -Rin 'log\.' G Msg | sed 's/^\([^:]*\):.*.Msg."\([^"]*\)".*/\2 -> \1/g' > /tmp/log2fn

	ls | sort -u > /tmp/list
	ls | while read fname
	do
        comm -12 <(sed 1d $fname | sed -e 's|//.*||g' -e 's|"[^"]*"||g' -e 's|os\.[a-zA-Z]*||g' | keywords_lowercase=false tokenize | sort -u) <(cat /tmp/list) | while read call
		do
			echo "$fname -> $call"
		done
	done | while read line
    do
        a="$(echo $line | sed 's| -> |@|g' | cut -d@ -f1)"
        b="$(echo $line | sed 's| -> |@|g' | cut -d@ -f2)"
        [ "$a" != "$b" ] && echo "$a -> $b"
    done > /tmp/calls

    cd ..

    cat tags | grep kind:f | sed -e 's/\t/@/g' -e 's/line://g' -e 's/end://g' | awk 'BEGIN{FS="@"}{print $1" "$2" "$5" "$7}' > /tmp/index
}

ctags_adapt(){
    comm -23 <(sort -u /tmp/calls) <(sort -u $LOG2GR_DIR/$1/calls_rm | sed 's/ #.*//g') > /tmp/calls_2
    cat $LOG2GR_DIR/$1/calls_add | sed 's/ #.*//g' >> /tmp/calls_2
    sort -u /tmp/calls_2 | sed 's/ #.*//g' > /tmp/calls

    cat /tmp/index | while read line
    do
        fn=$(echo $line | awk '{print $1}')
        if [ "$(cat $LOG2GR_DIR/$1/index_rm | sed 's/ #.*//g' | grep "^$fn$")" = "" ]
        then
            echo $line
        fi
    done > /tmp/index_2
    cat $LOG2GR_DIR/$1/index_add | sed 's/ #.*//g' >> /tmp/index_2
    sort -u /tmp/index_2 | sed 's/ #.*//g' > /tmp/index

    cat /tmp/index | awk '{print $1": { link: http://github.com/organization/project/blob/master/"$2"\\#L"$3" }" }'  > /tmp/links
}

ctags_update(){
    ctags_index kind:f > tags2
    \mv tags2 tags
    rm -fr functions
    mkdir functions
    ctags_extract kind:f | vimexec
    ctags_info
    ctags_adapt $1
    rm -fr functions tags
    meld /tmp/index ~/log2gr/$1/index
    meld /tmp/calls ~/log2gr/$1/calls
}

ctags_insert(){
    function=$1
    file=$(cat index | grep "^$function " | cut -d' ' -f2)
    start=$(cat index | grep "^$function " | cut -d' ' -f3)
    end=$(cat index | grep "^$function " | cut -d' ' -f4)
    offset=$(( $( cat functions/$function | wc -l ) - ( $end - $start ) - 1 ))

    cat $file | head -n$(( $start - 1 )) > /tmp/file
    cat functions/$function >> /tmp/file
    tail -n+$(( $end + 1 )) $file >> /tmp/file
    \mv /tmp/file $file

    cat index | awk -v file=$file -v offset=$offset '$2==file && $3 > start {print $1" "$2" "$3 + offset" "$4 + offset; next}{print}' > /tmp/file
    \mv /tmp/file index
}

call_path(){
    src=$(echo $1 | sed 's/\./DOT/g')
	dst=$(echo $2 | sed 's/\./DOT/g')
    #echo $src $dst > /tmp/dj.log
	[ "$src" = "$dst" ] && return
    dijkstra -dp $src <(echo 'digraph G {'; cat $LOG2GR_DIR/$project/calls | sed 's/\./DOT/g' ; echo '}') | paste -d' ' -s  | sed 's/;/\n/g' | grep '\[' | grep -v digraph > /tmp/dists
	dist=$( cat /tmp/dists | grep "\<$dst\>" | grep -v "prev=\<$dst\>" | grep dist | sed 's/^[^=]*=\([0-9]*\)\.[0-9]*.*/\1/g' )
	[ "$dist" = "" ] && return

	djpath=$dst; node=$dst
	while true
	do
		prev=$(cat /tmp/dists | grep "\<$node\>" | grep -v "prev=\<$node\>" | cut -d= -f3 | sed 's/.$//g')
		node=$prev
		djpath=$node@$djpath
		[ "$node" = "$src" ] && break
	done
	[ "$dist" -lt $call_path_max_dist ] && echo $djpath | sed 's/@/ -> /g' | sed 's/DOT/./g'
}

log2gr(){
    project=$1; shift

    if [ -e $LOG2GR_DIR/$project/config ]
    then
        source $LOG2GR_DIR/$project/config
    else
        call_path_max_dist=3
    fi

    source $LOG2GR_DIR/$project/log2fn
	cat $1 | log2fn > /tmp/fn_trace; shift

    seeds=()
    if [ $# -gt 0 ]
    then
        for a in $*; do seeds+=$a; done
    else
        comm -12 <(sort -u $LOG2GR_DIR/$project/seeds) <(sort -u /tmp/fn_trace) | while read a; do seeds+=$a; done
    fi

    log2gr_md5=$( (cat /tmp/fn_trace; cat $LOG2GR_DIR/$project/calls; echo $project; echo $seeds; echo $call_path_max_dist) | md5sum | awk '{print $1}' )

    if [ -e $LOG2GR_DIR/cache/$log2gr_md5 ]
    then
        cat $LOG2GR_DIR/cache/$log2gr_md5 > $LOG2GR_DIR/$project/graph
    else
	    rm -fr /tmp/lost_context /tmp/ok_context
	    for seed in $seeds
	    do
	    	stack="@$seed"
	    	inseed=false
	    	echo "$seed" >> /tmp/ok_context
	    	cat /tmp/fn_trace | uniq | while read input
	    	do
	    		stack_bak=$stack
	    		error=false
	    		while true
	    		do
	    			last=$(echo $stack | sed 's/@/\n/g' | tail -n1 )
	    			stack=$(echo $stack | sed 's/@[^@]*$//g')
	    			[ $input = $seed ] && inseed=true
	    			[ "$(call_path $last $input)" != "" ] && [ $inseed = true ] && { cpath="$(call_path $last $input)" ; break }
	    			[ "$stack" = "" ] && { stack=$stack_bak; error=true; echo $input >> /tmp/lost_context; break }
	    		done
	    		[ $error = true ] && continue
        		echo $input >> /tmp/ok_context
	    		stack="$stack@$(echo $cpath | sed 's/ -> /@/g')"
	    		echo $cpath
	    	done
	    done | while read line; do echo $line | sed 's/ -> /\n/g' | awk 'NR>1{print prev " -> " $0}{ prev=$0 }'; done | sort -u > $LOG2GR_DIR/$project/graph
        cp $LOG2GR_DIR/$project/graph $LOG2GR_DIR/cache/$log2gr_md5
    fi

    if [ -e $LOG2GR_DIR/$project/postprocess ]
    then
        ( cd $LOG2GR_DIR/$project; source ./postprocess )
    else
	    cat $LOG2GR_DIR/$project/graph
    fi

}

log2gr_add_seeds(){

    while true
    do
        log2gr $1 $2
        comm -23 <(sort -u /tmp/lost_context) <(sort -u /tmp/ok_context) > /tmp/seeds
        [ "$(cat /tmp/seeds)" = "" ] && break
        head -n1 /tmp/seeds >> $LOG2GR_DIR/$1/seeds
    done
}

lgr_postprocess(){
cat << EOF
sed -i 's/\./@/g' graph
\cp graph{,.bak}
touch prev_graph

comm -12 <(sort -u graph) <(sort -u prev_graph) > /tmp/graph
comm -23 <(sort -u graph) <(sort -u prev_graph) | sed 's/$/: {style: { stroke: green } }/g' >> /tmp/graph
comm -13 <(sort -u graph) <(sort -u prev_graph) | sed 's/$/: {style: { stroke: red } }/g' >> /tmp/graph

cat graph prev_graph | sed 's/ -> /\n/g' | sort | uniq | while read line
do
    cat tooltips | sed 's/\./@/g' | grep "^\$line:"
done >> /tmp/graph

cat graph prev_graph | sed 's/ -> /\n/g' | sort | uniq | while read line
do
    cat style | sed 's/\./@/g' | grep "^\$line:"
done >> /tmp/graph

\mv /tmp/graph graph
sed -i 's/@/\\\\./g' graph
EOF
}

lgr_postprocess(){
cat << EOF
sed -i 's/\./@/g' graph
\cp graph{,.bak}
touch prev_graph

if [ "\$(cat prev_graph)" = "" ]
then
    \cp graph prev_graph
fi

comm -12 <(sort -u graph) <(sort -u prev_graph) > /tmp/graph
comm -23 <(sort -u graph) <(sort -u prev_graph) | sed 's/$/: {style: { stroke: green } }/g' >> /tmp/graph
comm -13 <(sort -u graph) <(sort -u prev_graph) | sed 's/$/: {style: { stroke: red } }/g' >> /tmp/graph

cat graph prev_graph | sed 's/ -> /\n/g' | sort | uniq | while read line
do
    cat tooltips | sed 's/\./@/g' | grep "^\$line:"
done >> /tmp/graph

comm -23 <( cat graph | sed 's/ -> /\n/g' | sort | uniq ) <( cat prev_graph | sed 's/ -> /\n/g' | sort | uniq ) | while read line
do
    echo "\$line: { style: { fill: '#EAFFEA'; stroke: green }  }"
done >> /tmp/graph

comm -13 <( cat graph | sed 's/ -> /\n/g' | sort | uniq ) <( cat prev_graph | sed 's/ -> /\n/g' | sort | uniq ) | while read line
do
    echo "\$line: { style: { fill: '#FFEAEA'; stroke: red }  }"
done >> /tmp/graph

cat graph prev_graph | sed 's/ -> /\n/g' | sort | uniq | while read line
do
    cat links | sed 's/\./@/g' | grep "^\$line:"
done >> /tmp/graph

if [ "\$(cat prev_graph)" = "\$(cat graph)" ]
then
    rm -fr prev_graph
fi

\mv /tmp/graph graph
sed -i 's/@/\\\\./g' graph
EOF
}

lgr_log2fn(){
cat << EOF
log2fn(){
echo main
cat | sed 's/caller/\ncaller/g' | grep caller | cut -d'"' -f3 | while read line
do
    file=\$(echo \$line | cut -d: -f1)
    linenr=\$(echo \$line | cut -d: -f2)
    cat index | grep \$file | awk -v line=\$linenr '\$3<line && \$4>line{print \$1}'
done
}
EOF
}

log2gr_compare(){
    log2gr $1 $2
    \cp $LOG2GR_DIR/$1/{graph.bak,prev_graph}
    log2gr $1 $3
}
