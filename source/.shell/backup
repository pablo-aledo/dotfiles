BACKUP_SERVER=10.1.14.1
BACKUP_USER=admin
BACKUP_DEST=/volume1/homes/admin
BACKUP_TIME_MACHINE=/home/time_machine
BACKUP_SRC=/media/DATA
BACKUP_MOUNT_DIR=/home/
# BACKUP_BAK_DIR=/home/rsync_bak
[ -e /media/DATA/NAS ] && BACKUP_MOUNT_MOUNTPOINT=/media/DATA/NAS
[ -e ~/NAS ] && BACKUP_MOUNT_MOUNTPOINT=~/NAS

#source $(dirname $(readlink -f $0))/autoinstall

simplify_md5s(){
	rm -fr /tmp/md5s
	cat $FILE_FILES | while read line
	do
		cat $FILE_MD5S | egrep '^[0-9a-f]{32}  '"$line"'$' | tail -n1 >> /tmp/md5s
	done

	mv /tmp/md5s $FILE_MD5S

}

backup_md5s(){
	[ -e $FILE_MD5S ] && sudo find "$1" -type f -newer $FILE_MD5S -exec md5sum {} >> $FILE_MD5S \;
	[ -e $FILE_MD5S ] || sudo find "$1" -type f -exec md5sum {} >> $FILE_MD5S \;

	sudo find "$1" -type f > $FILE_FILES
}

backup_exchange_keys(){

	# Do this on the server
	# mkdir -p ~/.ssh
	# touch ~/.ssh/authorized_keys
	# chmod 755 ~
	# chmod 700 ~/.ssh
	# chmod 644 ~/.ssh/authorized_keys
	# debug with /usr/bin/sshd -d -p23

	ssh-keygen -t rsa
	cat ~/.ssh/id_rsa.pub | ssh $BACKUP_USER@$BACKUP_SERVER 'cat >> ~/.ssh/authorized_keys'
	ssh-add
}

rm_empty_folders(){
	for a in `seq 1 10`
	do
		find $1 -mindepth 1 -type d -empty -delete
	done
}

rm_empty_folders_2(){
	for a in `seq 1 10`
	do
		find $1 -mindepth 2 -type d -empty -delete
	done
}

backup_c(){
	[ -d "$BACKUP_SRC/$1/" ] || return
	[ `ssh $BACKUP_USER@$BACKUP_SERVER "ls $BACKUP_DEST 2>/dev/null | wc -l"` -eq 0 ] && return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$BACKUP_DEST/$2
	echo -e "\e[34m backup_c $1 \e[0m"

	[ "$BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$BACKUP_BAK_DIR"

	echo "mkdir -p \"$dest\"" | ssh $BACKUP_USER@$BACKUP_SERVER 2>/dev/null
	rsync -vai `echo $back_arg` "$BACKUP_SRC/$1/" "$BACKUP_USER@$BACKUP_SERVER:$dest/"
}

backup_ermtc(){
	[ -d "$BACKUP_SRC/$1/" ] || return
	[ `ssh $BACKUP_USER@$BACKUP_SERVER "ls $BACKUP_DEST 2>/dev/null | wc -l"` -eq 0 ] && return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$BACKUP_DEST/$2
	echo -e "\e[34m backup_ermtc $1 \e[0m"

	[ "$BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$BACKUP_BAK_DIR"

	cd "$BACKUP_SRC/$1/"
	ls -d */ | while read line
	do 
		echo -e "\e[34m backup_ermtc directory $line \e[0m"
		echo "mkdir -p \"$dest/$line\"" | ssh $BACKUP_USER@$BACKUP_SERVER 2>/dev/null
		rsync -vai `echo $back_arg` --delete "$BACKUP_SRC/$1/$line" "$BACKUP_USER@$BACKUP_SERVER:$dest/$line"
	done
}

backup_ermtm(){
	[ -d "$BACKUP_SRC/$1/" ] || return
	[ `ssh $BACKUP_USER@$BACKUP_SERVER "ls $BACKUP_DEST 2>/dev/null | wc -l"` -eq 0 ] && return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$BACKUP_DEST/$2
	echo -e "\e[34m backup_ermtm $1 \e[0m"

	[ "$BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$BACKUP_BAK_DIR"

	cd "$BACKUP_SRC/$1/"
	ls -d */ | while read line
	do 
		echo -e "\e[34m backup_ermtm directory $line \e[0m"
		echo "mkdir -p \"$dest/$line\"" | ssh $BACKUP_USER@$BACKUP_SERVER 2>/dev/null
		rsync -vai `echo $back_arg` --delete --remove-source-files "$BACKUP_SRC/$1/$line" "$BACKUP_USER@$BACKUP_SERVER:$dest/$line"
		rm_empty_folders "$BACKUP_SRC/$1/$line"
	done
}

backup_m(){
	[ -d "$BACKUP_SRC/$1/" ] || return
	[ `ssh $BACKUP_USER@$BACKUP_SERVER "ls $BACKUP_DEST 2>/dev/null | wc -l"` -eq 0 ] && return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$BACKUP_DEST/$2
	echo -e "\e[34m backup_m $1 \e[0m"

	[ "$BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$BACKUP_BAK_DIR"

	echo "mkdir -p \"$dest\"" | ssh $BACKUP_USER@$BACKUP_SERVER 2>/dev/null
	rsync -vai `echo $back_arg` --remove-source-files "$BACKUP_SRC/$1/" "$BACKUP_USER@$BACKUP_SERVER:$dest/"
	rm_empty_folders "$BACKUP_SRC/$1/"
}

backup_rmtc(){
	[ -d "$BACKUP_SRC/$1/" ] || return
	[ `ssh $BACKUP_USER@$BACKUP_SERVER "ls $BACKUP_DEST 2>/dev/null | wc -l"` -eq 0 ] && return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$BACKUP_DEST/$2
	echo -e "\e[34m backup_rmtc $1 \e[0m"

	[ "$BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$BACKUP_BAK_DIR"

	echo "mkdir -p \"$dest\"" | ssh $BACKUP_USER@$BACKUP_SERVER 2>/dev/null
	rsync -vai `echo $back_arg` --delete "$BACKUP_SRC/$1/" "$BACKUP_USER@$BACKUP_SERVER:$dest/"
}

backup_rmtm(){
	[ -d "$BACKUP_SRC/$1/" ] || return
	[ `ssh $BACKUP_USER@$BACKUP_SERVER "ls $BACKUP_DEST 2>/dev/null | wc -l"` -eq 0 ] && return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$BACKUP_DEST/$1
	[ $# -eq 2 ] && dest=$BACKUP_DEST/$2
	echo -e "\e[34m backup_rmtm $1 \e[0m"

	[ "$BACKUP_BAK_DIR" = "" ] && back_arg=""
	[ "$BACKUP_BAK_DIR" = "" ] || back_arg="--backup --backup-dir=$BACKUP_BAK_DIR"

	echo "mkdir -p \"$dest\"" | ssh $BACKUP_USER@$BACKUP_SERVER 2>/dev/null
	rsync -vai `echo $back_arg` --delete --remove-source-files "$BACKUP_SRC/$1/" "$BACKUP_USER@$BACKUP_SERVER:$dest/"
	rm_empty_folders "$BACKUP_SRC/$1/"
}

backup_tm(){
	[ -d "$BACKUP_SRC/$1/" ] || return
	[ `ssh $BACKUP_USER@$BACKUP_SERVER "ls $BACKUP_TIME_MACHINE 2>/dev/null | wc -l"` -eq 0 ] && return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$BACKUP_TIME_MACHINE/$1
	[ $# -eq 2 ] && dest=$BACKUP_TIME_MACHINE/$2
	echo -e "\e[34m backup_tm $1 \e[0m"
	echo "mkdir -p \"$BACKUP_TIME_MACHINE/$1\"" | ssh $BACKUP_USER@$BACKUP_SERVER 2>/dev/null
	duplicity --no-encryption "$BACKUP_SRC/$1/" "scp://$BACKUP_USER@$BACKUP_SERVER/$dest/"
}

backup_tm2(){
	[ -d "$BACKUP_SRC/$1/" ] || return
	[ `ssh $BACKUP_USER@$BACKUP_SERVER "ls $BACKUP_TIME_MACHINE 2>/dev/null | wc -l"` -eq 0 ] && return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=/tmp/time_machine/$1
	[ $# -eq 2 ] && dest=/tmp/time_machine/$2
	echo -e "\e[34m backup_tm $1 \e[0m"
	mkdir -p "/tmp/time_machine"
	sshfs $BACKUP_USER@$BACKUP_SERVER:$BACKUP_TIME_MACHINE /tmp/time_machine
	mkdir -p "/tmp/time_machine/$1"
	duplicity --no-encryption "$BACKUP_SRC/$1/" "file://$dest/"
	sudo umount /tmp/time_machine
	rmdir /tmp/time_machine
}

backup_tm3(){
	[ -d "$BACKUP_SRC/$1/" ] || return
	[ `ssh $BACKUP_USER@$BACKUP_SERVER "ls $BACKUP_TIME_MACHINE 2>/dev/null | wc -l"` -eq 0 ] && return
	[ $# -eq 0 ] && return
	[ $# -eq 1 ] && dest=$BACKUP_TIME_MACHINE/$1
	[ $# -eq 2 ] && dest=$BACKUP_TIME_MACHINE/$2
	echo -e "\e[34m backup_tm $1 \e[0m"

	date=`date +%y%m%d-%H%M%S`

       if [ `ssh $BACKUP_USER@$BACKUP_SERVER "ls $dest/ 2>/dev/null | wc -l"` -eq 0 ]
       then
		ssh $BACKUP_USER@$BACKUP_SERVER "mkdir -p $dest/incomplete_back-$date"
		rsync -azP \
			--delete \
			$BACKUP_SRC/$1/ $BACKUP_USER@$BACKUP_SERVER:$dest/incomplete_back-$date/ \
			&& ssh $BACKUP_USER@$BACKUP_SERVER \
			"mv $dest/incomplete_back-$date $dest/back-$date \
			&& ln -s $dest/back-$date $dest/current"
       else
		ssh $BACKUP_USER@$BACKUP_SERVER "mkdir -p $dest/incomplete_back-$date"
		rsync -azP \
			--delete \
			--link-dest=../current \
			$BACKUP_SRC/$1/ $BACKUP_USER@$BACKUP_SERVER:$dest/incomplete_back-$date/ \
			&& ssh $BACKUP_USER@$BACKUP_SERVER \
			"mv $dest/incomplete_back-$date $dest/back-$date \
			&& rm -f $dest/current \
			&& ln -s $dest/back-$date $dest/current"
	fi
}

mount_nas(){
sshfs $BACKUP_USER@$BACKUP_SERVER:$BACKUP_DEST $BACKUP_MOUNT_MOUNTPOINT
}

umount_nas(){
	sudo umount $BACKUP_MOUNT_MOUNTPOINT
}

backup(){
	backup_ermtc   Work
	backup_m       Descargas
	backup_m       Personal
	backup_c       uned
	backup_m       Videos
	backup_tm2     Work/forest
}

