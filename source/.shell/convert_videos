[ -d /media/DATA/convert   ] && convert_dir=/media/DATA/convert
[ -d /media/DATA/converted ] && converted_dir=/media/DATA/converted
[ -d ~/convert   ]           && convert_dir=~/convert
[ -d ~/converted ]           && converted_dir=~/converted

identify(){
	mplayer -frames 0 -vo null -ao null -identify $1
}

lengthdir(){
	find $* -type f -print0 | xargs -0  mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1
}

cutvideo(){
	m1=`echo $2 | cut -d':' -f1`
	s1=`echo $2 | cut -d':' -f2`
	m2=`echo $3 | cut -d':' -f1`
	s2=`echo $3 | cut -d':' -f2`
	t1=$(($m1*60+$s1))
	t2=$(($m2*60+$s2))
	d=$(($t2-$t1))
	ffmpeg -ss $t1 -t $d -i $1 $1.cut.mp4
}

cutvideo(){
	m1=`echo $2 | cut -d':' -f1`
	s1=`echo $2 | cut -d':' -f2`
	m2=`echo $3 | cut -d':' -f1`
	s2=`echo $3 | cut -d':' -f2`
	t1=$(($m1*60+$s1))
	t2=$(($m2*60+$s2))
	d=$(($t2-$t1))

    n=1
    name=${4}
    while [ -e $name ]
    do
        n=$(( $n + 1 ))
        name=${4}_${n}
    done

	ffmpeg -ss $t1 -t $d -i $1 $name
}

convert_1(){
	OPTS="-vf 'scale=640:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_2(){
	OPTS="-noskip -of lavf -lavfopts format=mp4 -af lavcresample=44100 -vf-add harddup -vf-add scale=480:-11 -oac lavc -ovc lavc -lavcopts aglobal=1:vglobal=1:acodec=libfaac:abitrate=128:vcodec=mpeg4:vbitrate=384:keyint=25"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_3(){
	OPTS="-noskip -ofps 25 -of lavf -lavfopts format=mp4 -af lavcresample=44100 -vf-add harddup -vf-add scale=480:-11 -oac lavc -ovc lavc -lavcopts aglobal=1:vglobal=1:acodec=libfaac:abitrate=128:vcodec=mpeg4:vbitrate=384:keyint=25"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_4(){
	OPTS="-ovc xvid -oac mp3lame -xvidencopts bitrate=-700000"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_5(){
	OPTS="-f mp4 -vcodec libxvid -maxrate 1000 -qmin 3 -qmax 5 -bufsize 4096 -g 300 -acodec aac -strict experimental -mbd 2 -s 320x240 -ab 128 -b 400"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_6(){
	OPTS="input -acodec aac -ab 128kb -vcodec mpeg4 -b 1200kb -mbd 2 -flags +4mv+trell -aic 2 -cmp 2 -subcmp 2 -s 320x180 -title X"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_7(){
	OPTS="-f mp4 -acodec libfaac -ar 44100 -ab 128 -vcodec mpeg4 -maxrate 2000 -b 1500 -qmin 3 -qmax 5 -bufsize 4096 -g 300 -s 320x240 -r 30000/1001"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_8(){
	OPTS="-f mp4 -vcodec xvid -maxrate 1000 -qmin 3 -qmax 5 -bufsize 4096 -g 300 -acodec aac -mbd 2 -s 320x180 -padtop 30 -padbottom 30 -ab 128 -b 400"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_9(){
	# To list all possible internal preset and tunes:
	# ffmpeg -f lavfi -i nullsrc -c:v libx264 -preset help -f mp4 -

	OPTS="-c:v libx264 -preset slow -crf 22 -c:a copy"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_10(){
	OPTS="-vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_11(){
	OPTS="-ofps 25 -of lavf -lavfopts format=mp4 -af lavcresample=44100 -vf-add harddup -vf-add scale=480:-11 -oac lavc -ovc lavc -lavcopts aglobal=1:vglobal=1:acodec=libfaac:abitrate=128:vcodec=mpeg4:vbitrate=384:keyint=25"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_ppt(){
	OPTS="-of lavf -oac lavc -ovc lavc -lavcopts vcodec=wmv1:vbitrate=1500:acodec=wmav1"
	mencoder `echo $OPTS` -o "$1.converted.avi" "$1"
}

convert_getaudio(){
    ffmpeg -i "$1" -q:a 0 -map a "$1".mp3
}

convert_plusaudio(){
	ffmpeg -i $1 -i $2 -vcodec copy -acodec copy $1$2.avi
}

convert_toimgs(){
        mkdir $1_tmp;
        ffmpeg -i $1 -r 25 -f image2 $1_tmp/%07d.png
}

convert_fromimgs(){
        mencoder mf://$1/*.png -mf w=1440:h=896:fps=25:type=png -ovc lavc -lavcopts vcodec=mjpeg -oac copy -o $1.avi
}

convert_fromimgs_2(){
        ffmpeg -i $1/%07d.png -vcodec copy $1.avi
}

convert_join_safe(){

        mkdir join_video1; ffmpeg -i $1 -r 25 -f image2 join_video1/%07d.png
        mkdir join_video2; ffmpeg -i $2 -r 25 -f image2 join_video2/%07d.png

	ffmpeg -i $1 -q:a 0 -map a join_audio1.wav
	ffmpeg -i $2 -q:a 0 -map a join_audio2.wav

	#opts="concat:"`ls join_audio_*.wav | paste -s -d'|'`
	#ffmpeg -i $opts -c copy join_audio.wav
	ffmpeg -i "concat:join_audio1.wav|join_audio2.wav" -c copy join_audio.wav

	echo "Waiting ..."
	read < /dev/tty

	mkdir join_video
	m=`ls join_video1/*.png | wc -l`; n=`ls join_video2/*.png | wc -l`;
	for a in `seq 1 $m`; do ln -s $PWD/join_video1/`printf %07d $a`.png $PWD/join_video/`printf %07d $a`.png; done
	for a in `seq 1 $n`; do ln -s $PWD/join_video2/`printf %07d $a`.png $PWD/join_video/`printf %07d $(( $m + $a ))`.png; done


	ffmpeg -i join_audio.wav join_audio.mp3

	ffmpeg -i join_video/%07d.png -i join_audio.mp3 -vcodec copy -acodec copy $3
}

convert_join_safe_2(){

	m=0
	for a in $*
	do
		mkdir join_video_`printf %02d $m`
		ffmpeg -i $a -r 25 -f image2 join_video_`printf %02d $m`/%07d.png
		m=$(( $m + 1 ))
	done

	m=0
	for a in $*
	do
		ffmpeg -i $a -q:a 0 -map a join_audio_`printf %02d $m`.wav
		m=$(( $m + 1 ))
	done

	sox join_audio_*.wav join_audio.wav

	m=0
	mkdir join_video
	for f in `seq 0 $(( $(find join_video_* -type d | wc -l) -1 ))`
	do
		n=`find join_video_$(printf %02d $f)/ -name '*.png' | wc -l`;
		for a in `seq 1 $n`
		do
			ln -s $PWD/join_video_`printf %02d $f`/`printf %07d $a`.png $PWD/join_video/`printf %07d $m`.png;
			m=$(( $m + 1 ))
		done
	done

	ffmpeg -i join_audio.wav join_audio.mp3

	OPTS="-vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3"
	ffmpeg -i join_video/%07d.png -i join_audio.mp3 `echo $OPTS` join.mp4
}


convert_normalize(){
	mkdir normalize_video
	ffmpeg -i "$1" -r 25 -f image2 normalize_video/%07d.png
	ffmpeg -i "$1" -q:a 0 -map a normalize_audio.wav
	ffmpeg -i normalize_audio.wav normalize_audio.mp3

	OPTS="-vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3"
	ffmpeg -i normalize_video/%07d.png -i normalize_audio.mp3 `echo $OPTS` "$1.normalized.mp4"
	rm -fr normalize_*
}

convert_chmod(){
    sudo chmod -R 777 $convert_dir
    sudo chmod -R 777 $converted_dir
}

convert_install(){
	[ -e /usr/bin/ffmpeg ]   || pkg install ffmpeg
	[ -e /usr/bin/unrar ]    || pkg install unrar
}

convert_checkrar(){
	cd $convert_dir
	rm -fr /tmp/error
	find -name '*.part*.rar' | while read line
	do
		cd $convert_dir
		cd "`dirname $line`"
		[ $(ls | wc -l) -eq $(ls | sed 's/.*part\(.*\)\.rar/\1/g' | sort -g | tail -n1) ] || \
			(echo "missing file in the rar sequence for $PWD" > /tmp/error)
		[ $(ll | awk '{print $5}' | sort | uniq | wc -l) -eq 3 ] || \
			(echo "incorrect sizes in the rar sequence for $PWD" > /tmp/error)
	done
}


convert_unrar(){
	cd $convert_dir
	find -name '*.rar' | while read line
	do
		cd $convert_dir
		cd "`dirname $line`"
		yes n | unrar x "`basename $line`"
		rm -fr "`basename $line`"
	done
}

convert_2spaces(){
	cd $convert_dir
	find -iname '*  *' -type d | while read line
	do
		name1=$line
		name2=$(echo $line | sed -e 's/  / /g' -e 's/  / /g' -e 's/  / /g')
		echo mv "'"$name1"'" "'"$name2"'" 
	done | bash
	find -iname '*  *' -type f | while read line
	do
		name1=$line
		name2=$(echo $line | sed -e 's/  / /g' -e 's/  / /g' -e 's/  / /g')
		echo mv "'"$name1"'" "'"$name2"'" 
	done | bash
}

convert_mkfolders(){
	cd $convert_dir
	find $PWD -type d | while read line
	do
		mkdir -p "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`"
	done
}

convert_reportsizes(){
	cd $convert_dir
	echo $findcmd | bash | while read line
	do
		file1="$line"
		base1=`basename "$line"`
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		size1=`ls -lh "$file1" | cut -d' ' -f5`
		size2=`ls -lh "$file2" | cut -d' ' -f5`
		printf '%100s \e[31m %s \e[32m %s \e[0m\n' $base1 $size1 $size2 | tee -a /tmp/convert_report
	done
}

convert_failconverting(){
	cd $convert_dir
	echo $findcmd | bash | while read line
	do
		file1="$line"
		base1=`basename "$line"`
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		[ -e "$file2" ] || echo "\e[31m Fail converting $file1 \e[0m" | tee -a /tmp/convert_report
	done
}

convert_cp(){
	cd $convert_dir
	find $PWD -type f | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="$(echo "$line" | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g)"
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || echo cp \"$file1\" \"$file2\" | tee -a /tmp/convert_report
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || cp "$file1" "$file2"
	done
}

convert_missing(){
	cd $convert_dir
	find $PWD -type f | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="$(echo "$line" | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g)"
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || echo "\e[31m Missing file $file2 \e[0m" | tee -a /tmp/convert_report
	done
}

convert_small(){
	cd $converted_dir
	find $PWD -type f -size -100k -iname '*.converted.mp4' | while read line
	do
		echo "\e[31m Small converted file $line \e[0m" | tee -a /tmp/convert_report
	done

}

empty_folders(){
	cd $convert_dir
	stpfolders | bash
}

convert_rmsmall(){
	find "$converted_dir" -name '*.mp4' -size -100k -delete 2>/dev/null
}

convert_rmbigger(){
	cd $convert_dir
	find $PWD -type f | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		[ -e "$file2" ] || continue
		size1=$(ls -l "$file1" | awk '{print $5}' )
		size2=$(ls -l "$file2" | awk '{print $5}' )
		[ $size2 -gt $size1 ] && echo "\e[31m Converted file is bigger than original $file2 \e[0m" | tee -a /tmp/convert_report
		[ $size2 -gt $size1 ] && rm -fr $file2
	done
}

cp_report(){
    \cp /tmp/convert_report $convert_dir
}

convert_recursive(){
	[ $# -eq 0 ] && width=640
	[ $# -eq 1 ] && width=$1
	convert_opts="-vf 'scale=${width}:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy -loglevel warning" # -loglevel {quiet, panic, fatal, error, warning, info, verbose, debug, trace} -hide_banner -nostats
    original_opts=$convert_opts

	[ -e "$convert_dir" ]   || return
	[ -e "$converted_dir" ] || return

	rm -fr /tmp/convert_report

    convert_chmod

    convert_install

    convert_checkrar
	[ -e /tmp/error ] && cat /tmp/error && return

    convert_2spaces

    convert_unrar

    empty_folders

    convert_2spaces

    convert_mkfolders

	findcmd="find \$PWD -iname '*.mp4' -or -iname '*.m4v' -or -iname '*.flv' -or -iname '*.mov' -or -iname '*.avi' -or -iname '*.wmv' -or -iname '*.mkv' -or -iname '*.vob'"

	cd $convert_dir

    total=0
	echo $findcmd | bash | sort | while read line
	do
		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue
        total=$(( $total + 1 ))
    done

	actual=1;
	echo $findcmd | bash | sort | while read line
	do
		echo "\e[31m ===== ( $actual / $total ) $line =====\e[0m"

		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue

		actual=$(( $actual + 1 ))

        foldername=$( echo $line | sed -e "s|$convert_dir/||g" -e "s|/.*||g"  )
        [ -e ~"/learning/metadata/$foldername/resolution" ] && resolution=$(cat ~"/learning/metadata/$foldername/resolution" )
        [ -e ~"/learning/metadata/$foldername/resolution" ] && convert_opts=$( echo $convert_opts | sed "s/scale=[^:]*:/scale=$resolution:/g" )

		echo ffmpeg -i \"$line\" `echo $convert_opts` \"`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4\" "</dev/null" | bash

        convert_opts=$original_opts

	done

    convert_rmsmall

    convert_rmbigger

    convert_reportsizes

    convert_failconverting

    convert_cp

    convert_missing

    convert_small

    cp_report

}

convert_recursive_decompress(){

	[ -e "$convert_dir" ]   || return
	[ -e "$converted_dir" ] || return

    convert_chmod

    convert_install

    convert_checkrar
	[ -e /tmp/error ] && cat /tmp/error && return

    convert_2spaces

    convert_unrar

    empty_folders

    convert_2spaces

    convert_mkfolders

}

convert_recursive_parallel(){

	[ $# -eq 0 ] && width=720
	[ $# -eq 1 ] && width=$1
	convert_opts="-vf 'scale=${width}:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy -loglevel warning" # -loglevel {quiet, panic, fatal, error, warning, info, verbose, debug, trace} -hide_banner -nostats

	[ -e "$convert_dir" ]   || return
	[ -e "$converted_dir" ] || return

	rm -fr /tmp/convert_report

    convert_install
	[ -e /usr/bin/parallel ] || pkg install parallel

    convert_chmod

    convert_checkrar
	[ -e /tmp/error ] && cat /tmp/error && return

    convert_2spaces

    convert_unrar

    empty_folders

    convert_2spaces

    convert_mkfolders

	findcmd="find \$PWD -iname '*.mp4' -or -iname '*.m4v' -or -iname '*.flv' -or -iname '*.mov' -or -iname '*.avi' -or -iname '*.wmv' -or -iname '*.mkv' -or -iname '*.vob'"

	cd $convert_dir
	rm -fr /tmp/script;
	echo $findcmd | bash | while read line
	do
		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue
		echo ffmpeg -i \"$line\" `echo $convert_opts` \"`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4\" "</dev/null"  >> /tmp/script
	done

	[ `nproc` -gt 2 ] && ( cat /tmp/script | parallel -j$((`nproc` - 2)) bash -c )
	[ `nproc` -gt 2 ] || ( source /tmp/script )

    convert_rmsmall

    convert_rmbigger

    convert_reportsizes

    convert_failconverting

    convert_cp

    convert_missing

    convert_small

    cp_report

    sync
}

convert_recursive_parallel_handbrake(){

    convert_opts="--preset-import-file ~/config/presets.json --preset 'Very Fast 1080p30'"

	[ -e "$convert_dir" ]   || return
	[ -e "$converted_dir" ] || return

    convert_chmod

    convert_install
	[ -e /usr/bin/parallel ] || pkg install parallel
	[ -e /usr/bin/HandBrakeCLI ] || pkg install handbrake

    convert_mkfolders
    convert_rmsmall

	findcmd="find \$PWD -iname '*.mp4' -or -iname '*.m4v' -or -iname '*.flv' -or -iname '*.mov' -or -iname '*.avi' -or -iname '*.wmv' -or -iname '*.mkv' -or -iname '*.vob' -or -iname '*.webm'"

	cd $convert_dir
	rm -fr /tmp/script /tmp/script2 /tmp/script3
	echo $findcmd | bash | while read line
	do
        echo HandBrakeCLI -i \"$line\" -o \"`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.hbrake.mp4\" `echo $convert_opts` "</dev/null"  >> /tmp/script
	done

    vim /tmp/script

	cat /tmp/script | while read line
	do
        file=$(echo $line | cut -d'"' -f4)
        [ -e $file ] || echo $line >> /tmp/script2
	done

    ps aux | grep HandBrake | grep bash > /tmp/script3

    vim /tmp/script

	[ `nproc` -gt 2 ] && ( cat /tmp/script | parallel -j$((`nproc` - 2)) bash -c )
	[ `nproc` -gt 2 ] || ( source /tmp/script )

}

mv_converted(){
	destination=/media/removable/2TB2/homes/admin/Videos

	[ -d "$converted_dir" ] || return
	[ -d "$destination" ]   || return

	cd "$converted_dir"

	if [ $# -eq 0 ]
	then
		ls -d */ | while read line
		do
			echo -e "\e[34m mv_converted $line \e[0m"
			mkdir -p "$destination/$line"
			#( cd $destination/$line; permissions )
			rsync -vai --delete --remove-source-files "$converted_dir/$line" "$destination/$line"
			rm_empty_folders "$converted_dir/$line"
		done
	else
		for line in $*
		do
			echo -e "\e[34m mv_converted $line \e[0m"
			mkdir -p "$destination/$line"
			#( cd $destination/$line; permissions )
			[ $line[1] = '/' ] || rsync -vai --delete --remove-source-files "$converted_dir/$line/" "$destination/$line/"
			[ $line[1] = '/' ] && rsync -vai --delete --remove-source-files "$line/" "$destination/`basename $line`/"
			[ $line[1] = '/' ] || rm_empty_folders "$converted_dir/$line"
			[ $line[1] = '/' ] && rm_empty_folders "$line"
		done
	fi
	rm_empty_folders "$converted_dir"
}

cp_convert(){
	source=/media/removable/2TB2/homes/admin/Videos

	[ -d "$source" ]      || return
	[ -d "$convert_dir" ] || return

	for a in $*
	do
		#( cd "$source/$a"; permissions )
		echo -e "\e[34m cp_convert $a \e[0m"
		[ -e "$convert_dir/$a" ] && continue
		mkdir -p "$convert_dir/$a"
		rsync -vai "$source/$a/" "$convert_dir/$a/"
	done
}

convert_candidates(){
	source=/media/removable/2TB2/homes/admin/Videos
    (cd $source; du --max-depth=1 | sort -g | tac | tail -n+2 | awk '{$1=""; print}' | sed 's|^ ./||g' > /tmp/list)
	cat /tmp/list | while read line
	do
		[ "`find "$source/$line" -name '*converted*'`" ] || echo $line
	done
}

convert_candidates(){
	source=/media/removable/2TB2/homes/admin/Videos
    (cd $source; du -BG --max-depth=1 | sort -g | tac | tail -n+2 > /tmp/list)
    sumsize=0
	cat /tmp/list | while read line
	do
        dir=$(echo $line | sed 's|^[^\/]*\/||g' )
        size=$(echo $line | sed 's|^\([^G]*\)G.*|\1|g' )
		if [ "`find "$source/$dir" -name '*converted*'`" = "" ]
        then
            sumsize=$(( $sumsize + $size ))
            echo $sumsize $dir
        fi
	done
}




