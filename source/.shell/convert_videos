[ -d /media/DATA/convert   ] && convert_dir=/media/DATA/convert
[ -d /media/DATA/converted ] && converted_dir=/media/DATA/converted
[ -d ~/convert   ]           && convert_dir=~/convert
[ -d ~/converted ]           && converted_dir=~/converted

identify(){
	mplayer -frames 0 -vo null -ao null -identify $1
}

lengthdir(){
	find $* -type f -print0 | xargs -0  mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1
}

convert_1(){
	OPTS="-vf 'scale=640:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy"
	ffmpeg `echo $OPTS` -i "$1" "$1.converted.mp4"
}

convert_2(){
	OPTS="-noskip -of lavf -lavfopts format=mp4 -af lavcresample=44100 -vf-add harddup -vf-add scale=480:-11 -oac lavc -ovc lavc -lavcopts aglobal=1:vglobal=1:acodec=libfaac:abitrate=128:vcodec=mpeg4:vbitrate=384:keyint=25"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_3(){
	OPTS="-noskip -ofps 25 -of lavf -lavfopts format=mp4 -af lavcresample=44100 -vf-add harddup -vf-add scale=480:-11 -oac lavc -ovc lavc -lavcopts aglobal=1:vglobal=1:acodec=libfaac:abitrate=128:vcodec=mpeg4:vbitrate=384:keyint=25"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_4(){
	OPTS="-ovc xvid -oac mp3lame -xvidencopts bitrate=-700000"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_5(){
	OPTS="-f mp4 -vcodec libxvid -maxrate 1000 -qmin 3 -qmax 5 -bufsize 4096 -g 300 -acodec aac -strict experimental -mbd 2 -s 320x240 -ab 128 -b 400"
	ffmpeg `echo $OPTS` -i "$1" "$1.converted.mp4"
}

convert_6(){
	OPTS="input -acodec aac -ab 128kb -vcodec mpeg4 -b 1200kb -mbd 2 -flags +4mv+trell -aic 2 -cmp 2 -subcmp 2 -s 320x180 -title X"
	ffmpeg `echo $OPTS` -i "$1" "$1.converted.mp4"
}

convert_7(){
	OPTS="-f mp4 -acodec libfaac -ar 44100 -ab 128 -vcodec mpeg4 -maxrate 2000 -b 1500 -qmin 3 -qmax 5 -bufsize 4096 -g 300 -s 320x240 -r 30000/1001"
	ffmpeg `echo $OPTS` -i "$1" "$1.converted.mp4"
}

convert_8(){
	OPTS="-f mp4 -vcodec xvid -maxrate 1000 -qmin 3 -qmax 5 -bufsize 4096 -g 300 -acodec aac -mbd 2 -s 320x180 -padtop 30 -padbottom 30 -ab 128 -b 400"
	ffmpeg `echo $OPTS` -i "$1" "$1.converted.mp4"
}

convert_9(){
	# To list all possible internal preset and tunes:
	# ffmpeg -f lavfi -i nullsrc -c:v libx264 -preset help -f mp4 -

	OPTS="-c:v libx264 -preset slow -crf 22 -c:a copy"
	ffmpeg `echo $OPTS` -i "$1" "$1.converted.mp4"
}

convert_10(){
	OPTS="-vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3"
	ffmpeg `echo $OPTS` -i "$1" "$1.converted.mp4"
}

convert_11(){
	OPTS="-ofps 25 -of lavf -lavfopts format=mp4 -af lavcresample=44100 -vf-add harddup -vf-add scale=480:-11 -oac lavc -ovc lavc -lavcopts aglobal=1:vglobal=1:acodec=libfaac:abitrate=128:vcodec=mpeg4:vbitrate=384:keyint=25"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_ppt(){
	OPTS="-of lavf -oac lavc -ovc lavc -lavcopts vcodec=wmv1:vbitrate=1500:acodec=wmav1"
	mencoder `echo $OPTS` -o "$1.converted.avi" "$1"
}

convert_getaudio(){
    ffmpeg -i "$1" -q:a 0 -map a "$1".mp3
}

convert_plusaudio(){
	ffmpeg -i $1 -i $2 -vcodec copy -acodec copy $1$2.avi
}

convert_toimgs(){
        mkdir $1_tmp;
        ffmpeg -i $1 -r 25 -f image2 $1_tmp/%07d.png
}

convert_fromimgs(){
        mencoder mf://$1/*.png -mf w=1440:h=896:fps=25:type=png -ovc lavc -lavcopts vcodec=mjpeg -oac copy -o $1.avi
}

convert_fromimgs_2(){
        ffmpeg -i $1/%07d.png -vcodec copy $1.avi
}

convert_join_safe(){

        mkdir join_video1; ffmpeg -i $1 -r 25 -f image2 join_video1/%07d.png
        mkdir join_video2; ffmpeg -i $2 -r 25 -f image2 join_video2/%07d.png

	ffmpeg -i $1 -q:a 0 -map a join_audio1.wav
	ffmpeg -i $2 -q:a 0 -map a join_audio2.wav

	#opts="concat:"`ls join_audio_*.wav | paste -s -d'|'`
	#ffmpeg -i $opts -c copy join_audio.wav
	ffmpeg -i "concat:join_audio1.wav|join_audio2.wav" -c copy join_audio.wav

	echo "Waiting ..."
	read < /dev/tty

	mkdir join_video
	m=`ls join_video1/*.png | wc -l`; n=`ls join_video2/*.png | wc -l`;
	for a in `seq 1 $m`; do ln -s $PWD/join_video1/`printf %07d $a`.png $PWD/join_video/`printf %07d $a`.png; done
	for a in `seq 1 $n`; do ln -s $PWD/join_video2/`printf %07d $a`.png $PWD/join_video/`printf %07d $(( $m + $a ))`.png; done


	ffmpeg -i join_audio.wav join_audio.mp3

	ffmpeg -i join_video/%07d.png -i join_audio.mp3 -vcodec copy -acodec copy $3
}

convert_join_safe_2(){

	m=0
	for a in $*
	do
		mkdir join_video_`printf %02d $m`
		ffmpeg -i $a -r 25 -f image2 join_video_`printf %02d $m`/%07d.png
		m=$(( $m + 1 ))
	done

	m=0
	for a in $*
	do
		ffmpeg -i $a -q:a 0 -map a join_audio_`printf %02d $m`.wav
		m=$(( $m + 1 ))
	done

	sox join_audio_*.wav join_audio.wav

	m=0
	mkdir join_video
	for f in `seq 0 $(( $(find join_video_* -type d | wc -l) -1 ))`
	do
		n=`find join_video_$(printf %02d $f)/ -name '*.png' | wc -l`;
		for a in `seq 1 $n`
		do
			ln -s $PWD/join_video_`printf %02d $f`/`printf %07d $a`.png $PWD/join_video/`printf %07d $m`.png;
			m=$(( $m + 1 ))
		done
	done

	ffmpeg -i join_audio.wav join_audio.mp3

	OPTS="-vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3"
	ffmpeg -i join_video/%07d.png -i join_audio.mp3 `echo $OPTS` join.mp4
}


convert_normalize(){
	mkdir normalize_video
	ffmpeg -i "$1" -r 25 -f image2 normalize_video/%07d.png
	ffmpeg -i "$1" -q:a 0 -map a normalize_audio.wav
	ffmpeg -i normalize_audio.wav normalize_audio.mp3

	OPTS="-vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3"
	ffmpeg -i normalize_video/%07d.png -i normalize_audio.mp3 `echo $OPTS` "$1.normalized.mp4"
	rm -fr normalize_*
}

convert_recursive(){

	limit_head=999999 && limit_tail=999999 && just_one=1 && just_two=0 && unrar=1

	[ "$1" = "test" ] && echo 'testing ...' && limit_head=1 && limit_tail=1
	[ "$1" = "nth" ]  && echo 'nth ...' && limit_head=$2 && limit_tail=1
	[ "$1" = "just_one" ]  && echo 'just conversion 1' && just_one=1
	[ "$1" = "just_two" ]  && echo 'just conversion 2' && just_one=0 && just_two=1
	[ "$1" = "just_two" ]  && echo 'just conversion 2' && just_one=0 && just_two=1
	[ "$1" = "nounrar"  ]  && unrar=0

	convert_opts_1="-vf 'scale=640:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy"
	convert_opts_2="-vf 'scale=1280:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy"
	convert_opts_3="-vcodec libx264 -c:v libx264 -preset slow -crf 23 -c:a copy"

	[ -e /usr/bin/ffmpeg ] || pkg install ffmpeg
	[ -e /usr/bin/unrar ]    || pkg install unrar

	rm -fr /tmp/convert_report

	if [ $unrar -eq 1 ]
	then
		cd $convert_dir
		find -name '*.rar' | while read line
		do
			cd "`dirname $line`"
			yes n | unrar x "`basename $line`"
			rm -fr "`basename $line`"
			cd -
		done
	fi

	cd $convert_dir
	find $PWD -type d | while read line
	do
		mkdir -p "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`"
	done

	findcmd="find \$PWD -iname '*.mp4' -or -iname '*.m4v' -or -iname '*.flv' -or -iname '*.mov' -or -iname '*.avi' -or -iname '*.wmv' -or -iname '*.mkv' -or -iname '*.vob'"

	cd $convert_dir

    total=0
	echo $findcmd | bash | sort | while read line
	do
		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue
        total=$(( $total + 1 ))
    done

	actual=1;
	echo $findcmd | bash | head -n $limit_head | tail -n $limit_tail | while read line
	do
		echo "\e[31m ===== ($actual / $total) $line =====\e[0m"

		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue

		actual=$(( $actual + 1 ))

		[ $just_one -eq 0 ] && [ $just_two -eq 0 ] && echo ffmpeg -i \"$line\" `echo $convert_opts_1` /tmp/file1.mp4 "</dev/null"  > /tmp/script1
		[ $just_one -eq 0 ] && [ $just_two -eq 0 ] && echo ffmpeg -i \"$line\" `echo $convert_opts_2` /tmp/file2.mp4 "</dev/null" >> /tmp/script1
		[ $just_one -eq 0 ] && [ $just_two -eq 0 ] && echo ffmpeg -i \"$line\" `echo $convert_opts_3` /tmp/file3.mp4 "</dev/null" >> /tmp/script1

		[ $just_one -eq 1 ] && echo ffmpeg -i \"$line\" `echo $convert_opts_1` /tmp/file1.mp4 "</dev/null"  > /tmp/script1
		[ $just_two -eq 1 ] && echo ffmpeg -i \"$line\" `echo $convert_opts_2` /tmp/file2.mp4 "</dev/null" >> /tmp/script1

		rm -fr /tmp/file{1,2,3}.mp4
		source /tmp/script1

		find /tmp/ -name 'file*.mp4' -size 0 -delete 2>/dev/null

		echo /bin/cp "`ls -S /tmp/file1.mp4 /tmp/file2.mp4 /tmp/file3.mp4 | tail -n1`" \""`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"\" > /tmp/script2
		source /tmp/script2

		file1="$line"
		base1=`basename "$line"`
		size1=`ls -lh /tmp/file1.mp4 | cut -d' ' -f5`
		size2=`ls -lh /tmp/file2.mp4 | cut -d' ' -f5`
		size3=`ls -lh /tmp/file3.mp4 | cut -d' ' -f5`
		filemin="`ls -S /tmp/file1.mp4 /tmp/file2.mp4 /tmp/file3.mp4 | tail -n1`"
		printf '%100s %8s %8s %8s %s\n' $base1 $size1 $size2 $size3 $filemin | tee -a /tmp/convert_report
	done

	cd $convert_dir
	echo $findcmd | bash | head -n $limit_head | tail -n $limit_tail | while read line
	do
		file1="$line"
		base1=`basename "$line"`
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		size1=`ls -lh "$file1" | cut -d' ' -f5`
		size2=`ls -lh "$file2" | cut -d' ' -f5`
		printf '%100s \e[31m %s \e[32m %s \e[0m\n' $base1 $size1 $size2 | tee -a /tmp/convert_report
	done

	cd $convert_dir
	echo $findcmd | bash | head -n $limit_head | tail -n $limit_tail | while read line
	do
		file1="$line"
		base1=`basename "$line"`
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		[ -e "$file2" ] || echo "\e[31m Fail converting $file1 \e[0m" | tee -a /tmp/convert_report
	done

	cd $convert_dir
	find $PWD -type f | head -n $limit_head | tail -n $limit_tail | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="$(echo "$line" | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g)"
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || echo cp \"$file1\" \"$file2\" | tee -a /tmp/convert_report
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || cp "$file1" "$file2"
	done

	cd $convert_dir
	find $PWD -type f | head -n $limit_head | tail -n $limit_tail | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="$(echo "$line" | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g)"
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || echo "\e[31m Missing file $file2 \e[0m" | tee -a /tmp/convert_report
	done

	( [ "$1" = "nth"  ] || [ "" = "test" ] ) && pcmanfm "$(dirname "$(find $PWD -name '*.mp4' | head -n $limit_head | tail -n $limit_tail | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g  )")"

}

convert_recursive(){
	[ $# -eq 0 ] && width=640
	[ $# -eq 1 ] && width=$1
	convert_opts="-vf 'scale=${width}:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy"

	[ -e "$convert_dir" ]   || return
	[ -e "$converted_dir" ] || return

	[ -e /usr/bin/ffmpeg ]   || pkg install ffmpeg
	[ -e /usr/bin/unrar ]    || pkg install unrar

	rm -fr /tmp/convert_report

	cd $convert_dir
	rm -fr /tmp/error
	find -name '*.part*.rar' | while read line
	do
		cd $convert_dir
		cd "`dirname $line`"
		[ $(ls | wc -l) -eq $(ls | sed 's/.*part\(.*\)\.rar/\1/g' | sort -g | tail -n1) ] || \
			(echo "missing file in the rar sequence for $PWD" > /tmp/error)
		[ $(ll | awk '{print $5}' | sort | uniq | wc -l) -eq 3 ] || \
			(echo "incorrect sizes in the rar sequence for $PWD" > /tmp/error)
	done
	[ -e /tmp/error ] && return

	cd $convert_dir
	find -name '*.rar' | while read line
	do
		cd $convert_dir
		cd "`dirname $line`"
		yes n | unrar x "`basename $line`"
		rm -fr "`basename $line`"
	done

	cd $convert_dir
	stpfolders | bash

	cd $convert_dir
	find -iname '*  *' -type d | while read line
	do
		name1=$line
		name2=$(echo $line | sed -e 's/  / /g' -e 's/  / /g' -e 's/  / /g')
		echo mv "'"$name1"'" "'"$name2"'" 
	done | bash
	find -iname '*  *' -type f | while read line
	do
		name1=$line
		name2=$(echo $line | sed -e 's/  / /g' -e 's/  / /g' -e 's/  / /g')
		echo mv "'"$name1"'" "'"$name2"'" 
	done | bash

	cd $convert_dir
	find $PWD -type d | while read line
	do
		mkdir -p "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`"
	done

	findcmd="find \$PWD -iname '*.mp4' -or -iname '*.m4v' -or -iname '*.flv' -or -iname '*.mov' -or -iname '*.avi' -or -iname '*.wmv' -or -iname '*.mkv' -or -iname '*.vob'"

	cd $convert_dir

    total=0
	echo $findcmd | bash | sort | while read line
	do
		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue
        total=$(( $total + 1 ))
    done

	actual=1;
	echo $findcmd | bash | sort | while read line
	do
		echo "\e[31m ===== ($actual / $total) $line =====\e[0m"

		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue

		actual=$(( $actual + 1 ))

		echo ffmpeg -i \"$line\" `echo $convert_opts` \"`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4\" "</dev/null" | bash

	done

	find "$converted_dir" -name '*.mp4' -size 0 -delete 2>/dev/null

	cd $convert_dir
	echo $findcmd | bash | while read line
	do
		file1="$line"
		base1=`basename "$line"`
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		size1=`ls -lh "$file1" | cut -d' ' -f5`
		size2=`ls -lh "$file2" | cut -d' ' -f5`
		printf '%100s \e[31m %s \e[32m %s \e[0m\n' $base1 $size1 $size2 | tee -a /tmp/convert_report
	done

	cd $convert_dir
	echo $findcmd | bash | while read line
	do
		file1="$line"
		base1=`basename "$line"`
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		[ -e "$file2" ] || echo "\e[31m Fail converting $file1 \e[0m" | tee -a /tmp/convert_report
	done

	cd $convert_dir
	find $PWD -type f | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="$(echo "$line" | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g)"
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || echo cp \"$file1\" \"$file2\" | tee -a /tmp/convert_report
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || cp "$file1" "$file2"
	done

	cd $convert_dir
	find $PWD -type f | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="$(echo "$line" | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g)"
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || echo "\e[31m Missing file $file2 \e[0m" | tee -a /tmp/convert_report
	done

}

convert_recursive_parallel(){

	convert_opts="-vf 'scale=640:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy"

	[ -e /usr/bin/ffmpeg ]   || pkg install ffmpeg
	[ -e /usr/bin/unrar ]      || pkg install unrar
	[ -e /usr/bin/parallel ] || pkg install parallel

	rm -fr /tmp/convert_report

	cd $convert_dir
	find -name '*.rar' | while read line
	do
		cd "`dirname $line`"
		yes n | unrar x "`basename $line`"
		rm -fr "`basename $line`"
		cd -
	done

	cd $convert_dir
	stpfolders | bash

	cd $convert_dir
	find $PWD -type d | while read line
	do
		mkdir -p "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`"
	done

	findcmd="find \$PWD -iname '*.mp4' -or -iname '*.m4v' -or -iname '*.flv' -or -iname '*.mov' -or -iname '*.avi' -or -iname '*.wmv' -or -iname '*.mkv' -or -iname '*.vob'"

	cd $convert_dir
	rm -rf /tmp/script;
	echo $findcmd | bash | while read line
	do
		echo ffmpeg -i \"$line\" `echo $convert_opts` \"`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4\" "</dev/null"  >> /tmp/script
	done

	[ `nproc` -gt 2 ] && ( cat /tmp/script | parallel -j$((`nproc` - 2)) bash -c )
	[ `nproc` -gt 2 ] || ( source /tmp/script )

	find $converted_dir -type f -empty -delete

	cd $convert_dir
	echo $findcmd | bash | while read line
	do
		file1="$line"
		base1=`basename "$line"`
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		size1=`ls -lh "$file1" | cut -d' ' -f5`
		size2=`ls -lh "$file2" | cut -d' ' -f5`
		printf '%100s \e[31m %s \e[32m %s \e[0m\n' $base1 $size1 $size2 | tee -a /tmp/convert_report
	done

	cd $convert_dir
	echo $findcmd | bash | while read line
	do
		file1="$line"
		base1=`basename "$line"`
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		[ -e "$file2" ] || echo "\e[31m Fail converting $file1 \e[0m" | tee -a /tmp/convert_report
	done

	cd $convert_dir
	find $PWD -type f | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="$(echo "$line" | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g)"
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || echo cp \"$file1\" \"$file2\" | tee -a /tmp/convert_report
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || cp "$file1" "$file2"
	done

	cd $convert_dir
	find $PWD -type f | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="$(echo "$line" | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g)"
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || echo "\e[31m Missing file $file2 \e[0m" | tee -a /tmp/convert_report
	done
}

mv_converted(){
	destination=/media/mint/1TB/Videos

	[ -d "$converted_dir" ] || return
	[ -d "$destination" ]   || return

	cd "$converted_dir"

	if [ $# -eq 0 ]
	then
		ls -d */ | while read line
		do
			echo -e "\e[34m mv_converted $line \e[0m"
			mkdir -p "$destination/$line"
			( cd $destination/$line; permissions )
			rsync -vai --delete --remove-source-files "$converted_dir/$line" "$destination/$line"
			rm_empty_folders "$converted_dir/$line"
		done
	else
		for line in $*
		do
			echo -e "\e[34m mv_converted $line \e[0m"
			mkdir -p "$destination/$line"
			( cd $destination/$line; permissions )
			[ $line[1] = '/' ] || rsync -vai --delete --remove-source-files "$converted_dir/$line/" "$destination/$line/"
			[ $line[1] = '/' ] && rsync -vai --delete --remove-source-files "$line/" "$destination/`basename $line`/"
			[ $line[1] = '/' ] || rm_empty_folders "$converted_dir/$line"
			[ $line[1] = '/' ] && rm_empty_folders "$line"
		done
	fi
	rm_empty_folders "$converted_dir"
}

cp_convert(){
	source=/media/mint/1TB/Videos

	[ -d "$source" ]      || return
	[ -d "$convert_dir" ] || return

	for a in $*
	do
		( cd "$source/$a"; permissions )
		echo -e "\e[34m cp_convert $a \e[0m"
		mkdir -p "$convert_dir/$a"
		rsync -vai "$source/$a/" "$convert_dir/$a/"
	done
}

convert_candidates(){
	source=/media/mint/1TB/Videos
	cat list | while read line
	do
		[ "`find "$source/$line" -name '*converted*'`" ] || echo $line
	done
}
