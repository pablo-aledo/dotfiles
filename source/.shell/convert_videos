[ -d /media/DATA/convert   ] && convert_dir=/media/DATA/convert
[ -d /media/DATA/converted ] && converted_dir=/media/DATA/converted
[ -d ~/convert   ]           && convert_dir=~/convert
[ -d ~/converted ]           && converted_dir=~/converted

identify(){
	mplayer -frames 0 -vo null -ao null -identify $1
}

lengthdir(){
	find $* -type f -print0 | xargs -0  mplayer -vo dummy -ao dummy -identify 2>/dev/null | perl -nle '/ID_LENGTH=([0-9\.]+)/ && ($t +=$1) && printf "%02d:%02d:%02d\n",$t/3600,$t/60%60,$t%60' | tail -n 1
}

cutvideo(){
	m1=`echo $2 | cut -d':' -f1`
	s1=`echo $2 | cut -d':' -f2`
	m2=`echo $3 | cut -d':' -f1`
	s2=`echo $3 | cut -d':' -f2`
	t1=$(($m1*60+$s1))
	t2=$(($m2*60+$s2))
	d=$(($t2-$t1))
	ffmpeg -ss $t1 -t $d -i $1 $1.cut.mp4
}

cutvideo(){
	m1=`echo $2 | cut -d':' -f1`
	s1=`echo $2 | cut -d':' -f2`
	m2=`echo $3 | cut -d':' -f1`
	s2=`echo $3 | cut -d':' -f2`
	t1=$(($m1*60+$s1))
	t2=$(($m2*60+$s2))
	d=$(($t2-$t1))

    n=1
    name=${4}.mp4
    while [ -e $name ]
    do
        n=$(( $n + 1 ))
        name=${4}_${n}.mp4
    done

	ffmpeg -ss $t1 -t $d -i $1 -strict -2 $name
}

cutvideo_30fps(){
	m1=`echo $2 | cut -d':' -f1`
	s1=`echo $2 | cut -d':' -f2`
	m2=`echo $3 | cut -d':' -f1`
	s2=`echo $3 | cut -d':' -f2`
	t1=$(($m1*60+$s1))
	t2=$(($m2*60+$s2))
	d=$(($t2-$t1))

    n=1
    name=${4}.mp4
    while [ -e $name ]
    do
        n=$(( $n + 1 ))
        name=${4}_${n}.mp4
    done

	ffmpeg -ss $t1 -t $d -i $1 -r 30 -strict -2 $name
}

cutvideo_logo(){
	m1=`echo $2 | cut -d':' -f1`
	s1=`echo $2 | cut -d':' -f2`
	m2=`echo $3 | cut -d':' -f1`
	s2=`echo $3 | cut -d':' -f2`
	t1=$(($m1*60+$s1))
	t2=$(($m2*60+$s2))
	d=$(($t2-$t1+1))

    [ -e $HOME/Dotfiles/ressources/icons/landmark.png ]  && \cp $HOME/Dotfiles/ressources/icons/landmark.png  /tmp/landmark.png
    [ -e $HOME/Dotfiles/ressources/videos/endvideo.mp4 ] && \cp $HOME/Dotfiles/ressources/videos/endvideo.mp4 /tmp/endvideo.mp4
    [ -e /tmp/video.mp4 ] && rm -fr /tmp/video.mp4
    [ -e /tmp/overlay.mp4 ] && rm -fr /tmp/overlay.mp4
    [ -e /tmp/final.mp4 ] && rm -fr /tmp/final.mp4

    n=1
    name=${4}.mp4
    while [ -e $name ]
    do
        n=$(( $n + 1 ))
        name=${4}_${n}.mp4
    done

	ffmpeg -ss $t1 -t $d -i $1 -strict -2 /tmp/video.mp4

       row=$(cat /tmp/landmark_coordinates | cut -d',' -f1)
    column=$(cat /tmp/landmark_coordinates | cut -d',' -f2)
     width=$(file /tmp/landmark.png | cut -d' ' -f5 | sed 's/,//g')
    height=$(file /tmp/landmark.png | cut -d' ' -f7 | sed 's/,//g')
       row=$(( $row - $height / 2 ))
    column=$(( $column - $width / 2 ))

    overlay=true
    [ "$(echo $name | grep -i catch)" != "" ] && overlay=false
    [ ! -e /tmp/landmark_coordinates ]        && overlay=false

    if [ $overlay = true ]
    then
        video_overlay \
            /tmp/video.mp4 \
            /tmp/landmark.png \
            /tmp/overlay.mp4 \
            $row \
            $column
    else
        cp /tmp/video.mp4 /tmp/overlay.mp4
    fi

    #ffmpeg-concat -t crosswarp -d 500 -o $name /tmp/${name}.mp4 /tmp/logo.mp4
    video_transition /tmp/overlay.mp4 /tmp/endvideo.mp4 /tmp/final.mp4

    mv /tmp/final.mp4 ${name}
}

convert_1(){
	OPTS="-vf 'scale=640:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_2(){
	OPTS="-codec copy"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_3(){
	OPTS="-noskip -ofps 25 -of lavf -lavfopts format=mp4 -af lavcresample=44100 -vf-add harddup -vf-add scale=480:-11 -oac lavc -ovc lavc -lavcopts aglobal=1:vglobal=1:acodec=libfaac:abitrate=128:vcodec=mpeg4:vbitrate=384:keyint=25"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_4(){
    OPTS="--preset-import-file ~/config/presets.json --preset 'Very Fast 1080p30'"
    echo HandBrakeCLI -i \"$1\" -o \"$1.converted.mp4\" `echo $OPTS` | bash
}

convert_5(){
	OPTS="-vf '-vcodec copy -acodec aac -ab 128kb"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_6(){
	OPTS="input -acodec aac -ab 128kb -vcodec mpeg4 -b 1200kb -mbd 2 -flags +4mv+trell -aic 2 -cmp 2 -subcmp 2 -s 320x180 -title X"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_7(){
	OPTS="-f mp4 -acodec libfaac -ar 44100 -ab 128 -vcodec mpeg4 -maxrate 2000 -b 1500 -qmin 3 -qmax 5 -bufsize 4096 -g 300 -s 320x240 -r 30000/1001"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_8(){
	OPTS="-f mp4 -vcodec xvid -maxrate 1000 -qmin 3 -qmax 5 -bufsize 4096 -g 300 -acodec aac -mbd 2 -s 320x180 -padtop 30 -padbottom 30 -ab 128 -b 400"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_9(){
	# To list all possible internal preset and tunes:
	# ffmpeg -f lavfi -i nullsrc -c:v libx264 -preset help -f mp4 -

	OPTS="-c:v libx264 -preset slow -crf 22 -c:a copy"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_10(){
	OPTS="-vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_11(){
	OPTS="-ofps 25 -of lavf -lavfopts format=mp4 -af lavcresample=44100 -vf-add harddup -vf-add scale=480:-11 -oac lavc -ovc lavc -lavcopts aglobal=1:vglobal=1:acodec=libfaac:abitrate=128:vcodec=mpeg4:vbitrate=384:keyint=25"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_12(){
	OPTS="-movflags faststart -vf 'scale=720:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset fast -crf 25 -acodec aac -strict experimental -mbd 2 -ab 128 -b 400"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_13(){
	OPTS="-noskip -of lavf -lavfopts format=mp4 -af lavcresample=44100 -vf-add harddup -vf-add scale=480:-11 -oac lavc -ovc lavc -lavcopts aglobal=1:vglobal=1:acodec=libfaac:abitrate=128:vcodec=mpeg4:vbitrate=384:keyint=25"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_14(){
	OPTS="-ovc xvid -oac mp3lame -xvidencopts bitrate=-700000"
	mencoder `echo $OPTS` -o "$1.converted.mp4" "$1"
}

convert_15(){
	OPTS="-f mp4 -vcodec libxvid -maxrate 1000 -qmin 3 -qmax 5 -bufsize 4096 -g 300 -acodec aac -strict experimental -mbd 2 -s 320x240 -ab 128 -b 400"
	echo ffmpeg -i \"$1\" $OPTS \"$1.converted.mp4\" | bash
}

convert_ppt(){
	OPTS="-of lavf -oac lavc -ovc lavc -lavcopts vcodec=wmv1:vbitrate=1500:acodec=wmav1"
	mencoder `echo $OPTS` -o "$1.converted.avi" "$1"
}

convert_getaudio(){
    ffmpeg -i "$1" -q:a 0 -map a "$1".mp3
}

convert_plusaudio(){
	ffmpeg -i $1 -i $2 -vcodec copy -acodec copy $1$2.avi
}

convert_plusaudio_2(){
    ffmpeg -i $1 -i $2 -strict -2 -c:v copy -map 0:v:0 -map 1:a:0 videoaudio.mp4
}

convert_toimgs(){
        mkdir $1_tmp;
        ffmpeg -i $1 -r 25 -f image2 $1_tmp/%07d.png
}

convert_fromimgs(){
        mencoder mf://$1/*.png -mf w=1440:h=896:fps=25:type=png -ovc lavc -lavcopts vcodec=mjpeg -oac copy -o $1.avi
}

convert_fromimgs_2(){
        ffmpeg -i $1/%07d.png -vcodec copy $1.avi
}

convert_join_safe(){

        mkdir join_video1; ffmpeg -i $1 -r 25 -f image2 join_video1/%07d.png
        mkdir join_video2; ffmpeg -i $2 -r 25 -f image2 join_video2/%07d.png

	ffmpeg -i $1 -q:a 0 -map a join_audio1.wav
	ffmpeg -i $2 -q:a 0 -map a join_audio2.wav

	#opts="concat:"`ls join_audio_*.wav | paste -s -d'|'`
	#ffmpeg -i $opts -c copy join_audio.wav
	ffmpeg -i "concat:join_audio1.wav|join_audio2.wav" -c copy join_audio.wav

	echo "Waiting ..."
	read < /dev/tty

	mkdir join_video
	m=`ls join_video1/*.png | wc -l`; n=`ls join_video2/*.png | wc -l`;
	for a in `seq 1 $m`; do ln -s $PWD/join_video1/`printf %07d $a`.png $PWD/join_video/`printf %07d $a`.png; done
	for a in `seq 1 $n`; do ln -s $PWD/join_video2/`printf %07d $a`.png $PWD/join_video/`printf %07d $(( $m + $a ))`.png; done


	ffmpeg -i join_audio.wav join_audio.mp3

	ffmpeg -i join_video/%07d.png -i join_audio.mp3 -vcodec copy -acodec copy $3
}

convert_join_safe_2(){

	m=0
	for a in $*
	do
		mkdir join_video_`printf %02d $m`
		ffmpeg -i $a -r 25 -f image2 join_video_`printf %02d $m`/%07d.png
		m=$(( $m + 1 ))
	done

	m=0
	for a in $*
	do
		ffmpeg -i $a -q:a 0 -map a join_audio_`printf %02d $m`.wav
		m=$(( $m + 1 ))
	done

	sox join_audio_*.wav join_audio.wav

	m=0
	mkdir join_video
	for f in `seq 0 $(( $(find join_video_* -type d | wc -l) -1 ))`
	do
		n=`find join_video_$(printf %02d $f)/ -name '*.png' | wc -l`;
		for a in `seq 1 $n`
		do
			ln -s $PWD/join_video_`printf %02d $f`/`printf %07d $a`.png $PWD/join_video/`printf %07d $m`.png;
			m=$(( $m + 1 ))
		done
	done

	ffmpeg -i join_audio.wav join_audio.mp3

	OPTS="-vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3"
	ffmpeg -i join_video/%07d.png -i join_audio.mp3 `echo $OPTS` join.mp4
}


convert_normalize(){
	mkdir normalize_video
	ffmpeg -i "$1" -r 25 -f image2 normalize_video/%07d.png
	ffmpeg -i "$1" -q:a 0 -map a normalize_audio.wav
	ffmpeg -i normalize_audio.wav normalize_audio.mp3

	OPTS="-vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3"
	ffmpeg -i normalize_video/%07d.png -i normalize_audio.mp3 `echo $OPTS` "$1.normalized.mp4"
	rm -fr normalize_*
}

convert_chmod(){
    sudo chmod -R 777 $convert_dir
    sudo chmod -R 777 $converted_dir
}

convert_install(){
	[ -e /usr/bin/ffmpeg ]   || pkg install ffmpeg
	[ -e /usr/bin/unrar ]    || pkg install unrar
}

convert_checkrar(){
	cd $convert_dir
	rm -fr /tmp/error
	find -name '*.part*.rar' | while read line
	do
		cd $convert_dir
		cd "`dirname $line`"
		[ $(ls | wc -l) -eq $(ls | sed 's/.*part\(.*\)\.rar/\1/g' | sort -g | tail -n1) ] || \
			(echo "missing file in the rar sequence for $PWD" > /tmp/error)
		[ $(ll | awk '{print $5}' | sort | uniq | wc -l) -eq 3 ] || \
			(echo "incorrect sizes in the rar sequence for $PWD" > /tmp/error)
	done
}


convert_unrar(){
	cd $convert_dir
	find -name '*.rar' | while read line
	do
		cd $convert_dir
		cd "`dirname $line`"
		yes n | unrar x "`basename $line`"
		rm -fr "`basename $line`"
	done
}

convert_2spaces(){
	cd $convert_dir
	find -iname '*  *' -type d | while read line
	do
		name1=$line
		name2=$(echo $line | sed -e 's/  / /g' -e 's/  / /g' -e 's/  / /g')
		echo mv "'"$name1"'" "'"$name2"'" 
	done | bash
	find -iname '*  *' -type f | while read line
	do
		name1=$line
		name2=$(echo $line | sed -e 's/  / /g' -e 's/  / /g' -e 's/  / /g')
		echo mv "'"$name1"'" "'"$name2"'" 
	done | bash
}

convert_mkfolders(){
	cd $convert_dir
	find $PWD -type d | while read line
	do
		mkdir -p "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`"
	done
}

convert_reportsizes(){
	[ $# -eq 0 ] && folder="$convert_dir"
	[ $# -eq 1 ] && folder="$convert_dir/$1"

	cd $folder
	echo $findcmd | bash | while read line
	do
		file1="$line"
		base1=`basename "$line"`
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		size1=`ls -lh "$file1" | cut -d' ' -f5`
		size2=`ls -lh "$file2" | cut -d' ' -f5`
		printf '%100s \e[31m %s \e[32m %s \e[0m\n' $base1 $size1 $size2 | tee -a /tmp/convert_report
	done
}

convert_failconverting(){
	[ $# -eq 0 ] && folder="$convert_dir"
	[ $# -eq 1 ] && folder="$convert_dir/$1"

	cd $folder
	echo $findcmd | bash | while read line
	do
		file1="$line"
		base1=`basename "$line"`
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		[ -e "$file2" ] || echo "\e[31m Fail converting $file1 \e[0m" | tee -a /tmp/convert_report
	done
}

convert_cp(){
	[ $# -eq 0 ] && folder="$convert_dir"
	[ $# -eq 1 ] && folder="$convert_dir/$1"

	cd $folder
	find $PWD -type f | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="$(echo "$line" | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g)"
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || echo cp \"$file1\" \"$file2\" | tee -a /tmp/convert_report
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || cp "$file1" "$file2"
	done
}

convert_missing(){
	[ $# -eq 0 ] && folder="$convert_dir"
	[ $# -eq 1 ] && folder="$convert_dir/$1"

	cd $folder
	find $PWD -type f | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="$(echo "$line" | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g)"
		( [ -e "$file2.converted.mp4" ] || [ -e "$file2" ] ) || echo "\e[31m Missing file $file2 \e[0m" | tee -a /tmp/convert_report
	done
}

convert_small(){
	[ $# -eq 0 ] && folder="$converted_dir"
	[ $# -eq 1 ] && folder="$converted_dir/$1"

	cd $folder
	find $PWD -type f -size -100k -iname '*.converted.mp4' | while read line
	do
		echo "\e[31m Small converted file $line \e[0m" | tee -a /tmp/convert_report
	done

}

empty_folders(){
	cd $convert_dir
	stpfolders | bash
}

convert_rmsmall(){
	[ $# -eq 0 ] && folder="$converted_dir"
	[ $# -eq 1 ] && folder="$converted_dir/$1"
	find "$folder" -name '*.mp4' -size -100k -delete 2>/dev/null
}

convert_rmbigger(){
	[ $# -eq 0 ] && folder="$convert_dir"
	[ $# -eq 1 ] && folder="$convert_dir/$1"

	cd $folder
	find $PWD -type f | while read line
	do
		file1="$line"
		base1="`basename "$line"`"
		file2="`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4"
		[ -e "$file2" ] || continue
		size1=$(ls -l "$file1" | awk '{print $5}' )
		size2=$(ls -l "$file2" | awk '{print $5}' )
		[ $size2 -gt $size1 ] && echo "\e[31m Converted file is bigger than original $file2 \e[0m" | tee -a /tmp/convert_report
		[ $size2 -gt $size1 ] && rm -fr $file2
	done
}

cp_report(){
    \cp /tmp/convert_report $convert_dir
}

convert_recursive(){
	[ $# -eq 0 ] && width=720
	[ $# -eq 1 ] && width=$1
	convert_opts="-vf 'scale=${width}:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy -loglevel warning" # -loglevel {quiet, panic, fatal, error, warning, info, verbose, debug, trace} -hide_banner -nostats
    original_opts=$convert_opts

	[ -e "$convert_dir" ]   || return
	[ -e "$converted_dir" ] || return

	rm -fr /tmp/convert_report

    convert_chmod

    convert_install

    convert_checkrar
	[ -e /tmp/error ] && cat /tmp/error && return

    convert_2spaces

    convert_unrar

    empty_folders

    convert_2spaces

    convert_mkfolders

	findcmd="find \$PWD -iname '*.mp4' -or -iname '*.m4v' -or -iname '*.flv' -or -iname '*.mov' -or -iname '*.avi' -or -iname '*.wmv' -or -iname '*.mkv' -or -iname '*.vob' | grep -v noconvert"

	cd $convert_dir

    total=0
	echo $findcmd | bash | sort | while read line
	do
		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue
        total=$(( $total + 1 ))
    done

	actual=1;
	echo $findcmd | bash | sort | while read line
	do

        [ -e $convert_dir/pause ] || [ -e /tmp/pause ] && echo "\e[31m ===== pause =====\e[0m"
        while [ -e $convert_dir/pause ] || [ -e /tmp/pause ] ; do sleep 10; done

		echo "\e[31m ===== ( $actual / $total ) $line =====\e[0m"

		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue

		actual=$(( $actual + 1 ))

        foldername=$( echo $line | sed -e "s|$convert_dir/||g" -e "s|/.*||g"  )
        [ -e ~"/learning/metadata/$foldername/resolution" ] && resolution=$(cat ~"/learning/metadata/$foldername/resolution" )
        [ -e ~"/learning/metadata/$foldername/resolution" ] && convert_opts=$( echo $convert_opts | sed "s/scale=[^:]*:/scale=$resolution:/g" )

		echo ffmpeg -i \"$line\" `echo $convert_opts` \"`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4\" "</dev/null" | bash

        convert_opts=$original_opts

	done

    convert_rmsmall

    convert_rmbigger

    convert_reportsizes

    convert_failconverting

    convert_cp

    convert_missing

    convert_small

    cp_report

}

convert_postconversion_ok(){

    echo "\e[34m convert_postconversion \e[32m OK \e[0m $1"

    convert_rmsmall "$1"
    convert_rmbigger "$1"
    convert_reportsizes "$1"
    convert_failconverting "$1"
    convert_cp "$1"
    convert_missing "$1"
    convert_small "$1"
    cat /tmp/convert_report

}

convert_postconversion_nok(){

    [ $# = 2 ] && reason="_"$2 || reason=""

    echo "\e[34m convert_postconversion \e[31m NOK \e[0m $1"

    mv "${convert_dir}/${1}" "${convert_dir}/${1}_noconvert${reason}"
    rm -fr "${converted_dir}/${1}"

}

convert_recursive_decompress(){

	[ -e "$convert_dir" ]   || return
	[ -e "$converted_dir" ] || return

    convert_chmod

    convert_install

    convert_checkrar
	[ -e /tmp/error ] && cat /tmp/error && return

    convert_2spaces

    convert_unrar

    empty_folders

    convert_2spaces

    convert_mkfolders

}

convert_decompress_rm(){

    echo "\e[34m ===== convert_decompress_rm $1 ===== \e[0m"

    cd "$convert_dir/$1" || return

    ls -lh

    error=false

    if [ "$(ls *.part1.rar)" != "" ]
    then
        unrar x *.part1.rar
        [ $? != 0 ] && error=true
        [ $error = false ] && ls *.part*.rar | Xargs rm
    fi

    if [ "$(ls *.part01.rar)" != "" ]
    then
        unrar x *.part01.rar
        [ $? != 0 ] && error=true
        [ $error = false ] && ls *.part*.rar | Xargs rm
    fi

    if [ "$(ls *.rar)" != "" ]
    then
        unrar x *.rar
        [ $? != 0 ] && error=true
        [ $error = false ] && ls *.rar | Xargs rm
    fi

    if [ $error = true ]
    then
        echo '\e[31m Error decompressing \e[0m' 
        pwd >> /tmp/cdr_errors
        read
    fi

}

convert_recursive_parallel(){

	[ $# -eq 0 ] && width=720
	[ $# -eq 1 ] && width=$1
	convert_opts="-vf 'scale=${width}:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy -loglevel warning" # -loglevel {quiet, panic, fatal, error, warning, info, verbose, debug, trace} -hide_banner -nostats

	[ -e "$convert_dir" ]   || return
	[ -e "$converted_dir" ] || return

	rm -fr /tmp/convert_report

    convert_install
	[ -e /usr/bin/parallel ] || pkg install parallel

    convert_chmod

    convert_checkrar
	[ -e /tmp/error ] && cat /tmp/error && return

    convert_2spaces

    convert_unrar

    empty_folders

    convert_2spaces

    convert_mkfolders

	findcmd="find \$PWD -iname '*.mp4' -or -iname '*.m4v' -or -iname '*.flv' -or -iname '*.mov' -or -iname '*.avi' -or -iname '*.wmv' -or -iname '*.mkv' -or -iname '*.vob' | grep -v noconvert"

	cd $convert_dir
	rm -fr /tmp/convert_script;
	echo $findcmd | bash | while read line
	do
		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue
		echo ffmpeg -i \"$line\" `echo $convert_opts` \"`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4\" "</dev/null"  >> /tmp/convert_script
	done

	[ `nproc` -gt 2 ] && ( cat /tmp/convert_script | parallel -j$((`nproc` - 2)) bash -c )
	[ `nproc` -gt 2 ] || ( source /tmp/convert_script )

    convert_rmsmall

    convert_rmbigger

    convert_reportsizes

    convert_failconverting

    convert_cp

    convert_missing

    convert_small

    cp_report

    sync
}

convert_recursive_parallel_core(){

	[ $# -eq 0 ] && width=720
	[ $# -eq 1 ] && width=$1
	convert_opts="-vf 'scale=${width}:trunc(ow/a/2)*2' -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 -c:v libx264 -preset slow -crf 25 -c:a copy -loglevel warning" # -loglevel {quiet, panic, fatal, error, warning, info, verbose, debug, trace} -hide_banner -nostats

	findcmd="find \$PWD -iname '*.mp4' -or -iname '*.m4v' -or -iname '*.flv' -or -iname '*.mov' -or -iname '*.avi' -or -iname '*.wmv' -or -iname '*.mkv' -or -iname '*.vob' | grep -v noconvert"

	cd $convert_dir
	rm -fr /tmp/convert_script;
	echo $findcmd | bash | while read line
	do
		[ -e "`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4" ] && continue
		echo ffmpeg -i \"$line\" `echo $convert_opts` \"`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.mp4\" "</dev/null"  >> /tmp/convert_script
	done

	[ `nproc` -gt 2 ] && ( cat /tmp/convert_script | parallel -j$((`nproc` - 2)) bash -c )
	[ `nproc` -gt 2 ] || ( source /tmp/convert_script )

}

convert_recursive_parallel_handbrake(){

    convert_opts="--preset-import-file ~/config/presets.json --preset 'Very Fast 1080p30'"

	[ -e "$convert_dir" ]   || return
	[ -e "$converted_dir" ] || return

    convert_chmod

    convert_install
	[ -e /usr/bin/parallel ] || pkg install parallel
	[ -e /usr/bin/HandBrakeCLI ] || pkg install handbrake

    convert_mkfolders
    convert_rmsmall

	findcmd="find \$PWD -iname '*.mp4' -or -iname '*.m4v' -or -iname '*.flv' -or -iname '*.mov' -or -iname '*.avi' -or -iname '*.wmv' -or -iname '*.mkv' -or -iname '*.vob' -or -iname '*.webm' -or -iname '*.ts' | grep -v noconvert"

	cd $convert_dir
	rm -fr /tmp/convert_script /tmp/convert_script2 /tmp/convert_script3
	echo $findcmd | bash | while read line
	do
        echo HandBrakeCLI -i \"$line\" -o \"`echo $line | sed s/$(escape $convert_dir)/$(escape $converted_dir)/g`.converted.hbrake.mp4\" `echo $convert_opts` "</dev/null"  >> /tmp/convert_script
	done

    vim /tmp/convert_script

	cat /tmp/convert_script | while read line
	do
        file=$(echo $line | cut -d'"' -f4)
        [ -e $file ] || echo $line >> /tmp/convert_script2
	done

    ps aux | grep HandBrake | grep bash > /tmp/convert_script3

    vim /tmp/convert_script

	[ `nproc` -gt 2 ] && ( cat /tmp/convert_script | parallel -j$((`nproc` - 2)) bash -c )
	[ `nproc` -gt 2 ] || ( source /tmp/convert_script )

}

mv_converted(){
    destination=/media/removable/2TB2/homes/admin/Videos

    [ -d "$converted_dir" ] || return
    [ -d "$destination" ]   || echo '\e[31m Destination does not exist \e[0m'
    [ -d "$destination" ]   || return

    cd "$converted_dir"

    if [ $# -eq 0 ]
    then
        ls -d */ | while read line
        do
            mkdir -p "$destination/$line"

            mv_converted "$line"

        done
        return
    else
        for line in $*
        do
            echo -e "\e[34m mv_converted $line \e[0m"
            [ -e $converted_dir/$line ] || continue
            mkdir -p "$destination/$line"
            #( cd $destination/$line; permissions )
            rsync -vaXi --delete --remove-source-files "$converted_dir/$line/" "$destination/$line/"
            rm_empty_folders "$converted_dir/$line"
            [ -e $convert_dir/$line ] && rm -fr "$convert_dir/$line"
            rmdir "$converted_dir/$line"
        done
    fi
}

cp_convert(){
	source=/media/removable/2TB2/homes/admin/Videos

	[ -d "$source" ]      || return
	[ -d "$convert_dir" ] || return

	for a in $*
	do
		#( cd "$source/$a"; permissions )
		echo -e "\e[34m cp_convert $a \e[0m"
		[ -e "$convert_dir/$a" ] && continue
		mkdir -p "$convert_dir/$a"
		rsync -vaXis "$source/$a/" "$convert_dir/$a/"
	done
}

convert_candidates(){
	source=/media/removable/2TB2/homes/admin/Videos
    (cd $source; du --max-depth=1 | sort -g | tac | tail -n+2 | awk '{$1=""; print}' | sed 's|^ ./||g' > /tmp/list)
	cat /tmp/list | while read line
	do
		[ "`find "$source/$line" -name '*converted*'`" ] || echo $line
	done
}

convert_candidates(){
	source=/media/removable/2TB2/homes/admin/Videos
    (cd $source; du -BG --max-depth=1 | sort -g | tac | tail -n+2 > /tmp/list)
    sumsize=0
	cat /tmp/list | while read line
	do
        dir=$(echo $line | sed 's|^[^\/]*\/||g' )
        size=$(echo $line | sed 's|^\([^G]*\)G.*|\1|g' )
		if [ "`find "$source/$dir" -name '*converted*'`" = "" ]
        then
            sumsize=$(( $sumsize + $size ))
            echo $size $sumsize $dir
        fi
	done
}

video_overlay(){
    in_video=$1
    in_image=$2
    out_video=$3
    row=$4
    column=$5
    ffmpeg -i $in_video -i $in_image \
         -filter_complex "[0:v][1:v] overlay=${row}:${column}:enable='between(t,0,99999)'" \
         -pix_fmt yuv420p -c:a copy \
         $3
}

video_transition(){
in_video1=$1
in_video2=$2
out_video=$3

width=$(  ffprobe -v error -show_entries stream=width    -of default=noprint_wrappers=1:nokey=1 $in_video1 )
height=$( ffprobe -v error -show_entries stream=height   -of default=noprint_wrappers=1:nokey=1 $in_video1 )
secs1=$(  ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 $in_video1 | cut -d. -f1)
secs2=$(  ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 $in_video2 | cut -d. -f1)
secsfade=1

# echo $in_video1 $in_video2 $out_video $width $height $secs1 $secs2 $secsfade
#
# echo ffmpeg -strict -2 -i $in_video1 -i $in_video2 \
# -filter_complex \
# "@color=black:${width}x${height}:d=$(( $secs1 + $secs2 - $secsfade ))[base]; \
#  [0:v]setpts=PTS-STARTPTS[v0]; \
#  [1:v]format=yuva420p,fade=in:st=0:d=${secsfade}:alpha=1,setpts=PTS-STARTPTS+$((${secs1}-${secsfade}))/TB[v1]; \
#  [base][v0]overlay[tmp]; \
#  [tmp][v1]overlay,format=yuv420p[fv]; \
#  [0:a][1:a]acrossfade=d=${secsfade}[fa]@" \
#  -map "@[fv]@" -map "@[fa]@" $out_video | sed 's|@|"|g'
#
# echo ffmpeg -strict -2 -i $in_video1 -i $in_video2 -f lavfi -i color=black:${width}x${height} -filter_complex \
# "@[0:v]format=pix_fmts=yuva420p,fade=t=out:st=$secs1:d=1:alpha=1,setpts=PTS-STARTPTS[va0];\
#   [1:v]format=pix_fmts=yuva420p,fade=t=in:st=0:d=1:alpha=1,setpts=PTS-STARTPTS+${secs1}/TB[va1];\
#   [2:v]scale=${width}x${height},trim=duration=$(($secs1+$secs2-$secsfade))[over];\
#   [over][va0]overlay[over1];\
#   [over1][va1]overlay=format=yuv420[outv]@" \
#   -vcodec libx264 -map "@[outv]@" $out_video | sed 's|@|"|g'

echo ffmpeg -i $in_video1 -i $in_video2 -an \
-filter_complex \
    "@[0:v]trim=start=0:end=$((${secs1}-${secsfade})),setpts=PTS-STARTPTS[firstclip]; \
    [1:v]trim=start=1,setpts=PTS-STARTPTS[secondclip]; \
    [0:v]trim=start=$((${secs1}-${secsfade})):end=${secs1},setpts=PTS-STARTPTS[fadeoutsrc]; \
    [1:v]trim=start=0:end=${secsfade},setpts=PTS-STARTPTS[fadeinsrc]; \
    [fadeinsrc]format=pix_fmts=yuva420p, \
                fade=t=in:st=0:d=${secsfade}:alpha=1[fadein]; \
    [fadeoutsrc]format=pix_fmts=yuva420p, \
                fade=t=out:st=0:d=${secsfade}:alpha=1[fadeout]; \
    [fadein]fifo[fadeinfifo]; \
    [fadeout]fifo[fadeoutfifo]; \
    [fadeoutfifo][fadeinfifo]overlay[crossfade]; \
    [firstclip][crossfade][secondclip]concat=n=3[output]; \
    [0:a][1:a] acrossfade=d=${secsfade} [audio]@" \
    -map "@[output]@" -map "@[audio]@" -strict -2 $out_video | sed 's|@|"|g' | bash
}

video_speed(){
    # To slow down your video, you have to use a multiplier greater than 1
    ffmpeg -i "$1" -filter:v "setpts=$2*PTS" $(basename "$1" .mp4).$2.mp4
}

video_speed_2(){
    ffmpeg -i "$1" -filter:v "minterpolate='mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120'" $(basename "$1" .mp4).$2.mp4
}

convert_embed_srt(){
    video_in=$1
    srt_in=$2
    video_out=$3
    ffmpeg -i $video_in -f srt -i $srt_in -c:v copy -c:a copy -c:s mov_text $video_out
}

convert_burn_srt(){
    video_in=$1
    srt_in=$2
    video_out=$3

    ffmpeg -i $srt_in $srt_in.ass
    ffmpeg -i $video_in -vf ass=$srt_in.ass -strict -2 $video_out
}

convert_burn_srt_2(){
    video_in=$1
    srt_in=$2
    video_out=$3
    FontSize=10

    ffmpeg -i $srt_in $srt_in.ass
    ffmpeg -i "$video_in" -vf subtitles="$srt_in":force_style='Fontsize="$FontSize"' "$video_out"
}

video_add(){
    if [ -e "videoout.mp4" ]
    then
        mv videoout.mp4 in.mp4
        video_transition in.mp4 $1 videoout.mp4
        rm -fr in.mp4
    else
        cp $1 videoout.mp4
    fi
}

gaussian_curve(){

mean=$1
variance=$2
amplitude=$3
n=$( ls | wc -l )

python -c "
from scipy import signal

n,mean,variance,amplitude = ($n, $mean, $variance, $amplitude)
n,mean,variance,amplitude = (100, 50, 10, 0.5)

gcurve = signal.gaussian(n, mean, variance)
outval = 0.0
inval = 0

while inval < n:
    outval = outval + ( 1.0 - amplitude * gcurve[a] )
    print( str(inval) + ' ' + str(int(outval)) )
    inval = inval + 1

"


}

videos_overlay(){

file1=$1
file2=$2
init1=$3
init2=$4
duration=$5
output=$6

rm -rf /tmp/1.cut.mp4 /tmp/2.cut.mp4 /tmp/3.mp4 $output

ffmpeg -ss $init1 -t $duration -i $file1 -strict -2 /tmp/1.cut.mp4
ffmpeg -ss $init2 -t $duration -i $file2 -strict -2 /tmp/2.cut.mp4

ffmpeg \
    -i /tmp/1.cut.mp4 -i /tmp/2.cut.mp4 \
    -filter_complex " \
        [0:v]setpts=PTS-STARTPTS, scale=1280x720[top]; \
        [1:v]setpts=PTS-STARTPTS, scale=1280x720, \
             format=yuva420p,colorchannelmixer=aa=0.5[bottom]; \
        [top][bottom]overlay=shortest=1" \
        -strict -2 /tmp/3.mp4

ffmpeg -r 25 -i /tmp/3.mp4 -strict -2 $output

}

add_framenumber(){

ffmpeg -i $1 -vf "drawtext=fontfile=Arial.ttf: text='%{frame_num}': start_number=1: x=(w-tw)/2: y=h-(2*lh): fontcolor=black: fontsize=20: box=1: boxcolor=white: boxborderw=5" -c:a copy $2

}

add_framedetail(){

rm -fr /tmp/frames.mp4 $1.frames.mp4

ffmpeg -ss $2 -t 1 -i $1 -vf "drawtext=fontfile=Arial.ttf: text='%{frame_num}': start_number=1: x=(w-tw)/2: y=(2*lh): fontcolor=black: fontsize=20: box=1: boxcolor=white: boxborderw=5" -c:a copy /tmp/frames.mp4

ffmpeg -r 25 -i /tmp/frames.mp4 -strict -2 $1.frames.mp4

}

cutvideo_awklength(){

    cat | awk 'BEGIN{FS="[ :]"; sum=0; n=0}{len = ($5*60+$6)-($3*60+$4); sum = sum+len; n = n+1; print $0 " # length: " len}END{printf("# sum: %02d:%02d:%02d (%d) n: %d\n",(sum/60/60),(sum/60%60),(sum%60),sum,n) }'

}

video_2x(){
  ffmpeg -i $1 -strict -2 -filter_complex "[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]" -map "[v]" -map "[a]" $2
}

videos_2x2server(){

    mkdir -p ~/html/courses/{buffer,previous}
    find ~/html/courses/ -maxdepth 1 -type f | while read line
    do
        mv "$line" ~/html/courses/previous
    done
    mv ~/html/courses/buffer/* ~/html/courses/

    for a in *.mp4
    do
        echo video_2x '"'$a'"' ~'"'/html/courses/buffer/$a'"'
    done | vimexec

}

