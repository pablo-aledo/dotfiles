dupes(){
	n=$1
	shift
	array=("${@}")

	[ "`echo $array | grep $folder_2`" ] || start=2
	[ "`echo $array | grep $folder_2`" ] && start=1

	for a in `seq $start $n`
	do 
		[ "`echo ${array[$a]} | grep ^$rm_from`" ] && echo sudo rm -f "`escape2 "${array[$a]}"`"
	done
}

escape2(){
	echo $1 | sed -e 's/^/"/g' -e 's/$/"/g' -e 's/\$/\\$/g'
}

mkmv(){
	mkdir -p "`dirname "$2"`" 2>/dev/null
	/bin/mv "$1"  "`dirname "$2"`"/
}

mkcp(){
	mkdir -p "`dirname "$2"`" 2>/dev/null
	\cp "$1"  "`dirname "$2"`"/"`basename "$2"`"
}

mergehdd_rmdupes(){
	# Parameters
	rm_from=$1
	folder_2=$2

	# Remove used files
	rm -rf /tmp/dupes

	# Generate dupes file
	# sudo fdupes -r $rm_from $folder_2 > /tmp/dupes
	fdupes -r $rm_from $folder_2 > /tmp/dupes

	# Remove duplicates
	file=`head -n1 /tmp/dupes`
	n=1

	cat /tmp/dupes | while read file
	do
		if [ "$file" != "" ]
		then
			array[$n]="$file"
			n=$(($n + 1))
		else
			dupes $(($n-1)) "${array[@]}" | tee -a /tmp/rmdupes

			n=1
			array=()
		fi
	done
}

sync_partial_contents(){

    name=$(basename $1)

    echo "\e[34m ===== $name =====\e[0m"

	[ -e "$1" ] || return
	[ -e "$2" ] || return

    if [ ! -e /tmp/spc_not_sync_${name} ]
    then
        ls $1 | sort | uniq > /tmp/spc_not_sync_${name}
        echo > /tmp/spc_to_rm_${name}
        echo > /tmp/spc_duplicated_${name}
        echo > /tmp/spc_copied_${name}
    fi

    ls $1 | sort | uniq > /tmp/contents_1
    ls $2 | sort | uniq > /tmp/contents_2

    comm -12 /tmp/contents_1 /tmp/contents_2 > /tmp/intersection
    comm -23 /tmp/contents_1 /tmp/contents_2 > /tmp/in_a_not_b
    comm -13 /tmp/contents_1 /tmp/contents_2 > /tmp/in_b_not_a

    comm -12 /tmp/spc_copied_${name} /tmp/contents_2 >> /tmp/spc_duplicated_${name}
    sed -i '/^$/d' /tmp/spc_duplicated_${name}
    cat /tmp/contents_2 /tmp/spc_copied_${name} > /tmp/aux
    cat /tmp/aux | sort | uniq > /tmp/spc_copied_${name}

    rm -fr /tmp/spc_sync_${name}
    cat /tmp/intersection | while read line
    do
        echo rsync -vaXi --delete \"$1/$line\" \"$2/$line\" "#|| rm -fr" \"$2/$line\" >> /tmp/spc_sync_${name}
    done

    comm -23 /tmp/spc_not_sync_${name} /tmp/contents_2 > /tmp/aux
    cat /tmp/aux | sort | uniq > /tmp/spc_not_sync_${name}

    cat /tmp/in_b_not_a /tmp/spc_to_rm_${name} > /tmp/aux
    cat /tmp/aux | sort | uniq | egrep -v '^$' > /tmp/spc_to_rm_${name}

    echo "\e[34m ===== duplicated =====\e[0m"
    cat /tmp/spc_duplicated_${name}
    echo "\e[34m ===== to_rm =====\e[0m"
    cat /tmp/spc_to_rm_${name}
    echo "\e[34m ===== not_sync =====\e[0m"
    cat /tmp/spc_not_sync_${name}
}

cp_if_space(){
    src="$1"
    dst="$2"
    space=$(df -B1 $3 | awk '{print $4}' | tail -n1)
    size=$(du -B1 -s "$1" | awk '{print $1}')
    margin=$(( 1 * 1024 * 1024 * 1024 ))


    if [ $(( $space - $size )) -gt $margin ]
    then
        echo "\e[32m cp_ok \"$src\" \"$dst\" \e[0m"
        cp -r "$src" "$dst"
        echo "$src" >> /tmp/copied
    else
        echo "\e[31m cp_nok \"$src\" \"$dst\" \e[0m"
        echo "$src" >> /tmp/not_copied
    fi

}

mv_if_space(){
    src="$1"
    dst="$2"
    space=$(df -B1 $3 | awk '{print $4}' | tail -n1)
    size=$(du -B1 -s "$1" | awk '{print $1}')
    margin=$(( 1 * 1024 * 1024 * 1024 ))

    if [ $(( $space - $size )) -gt $margin ]
    then
        echo "\e[32m mv_ok \"$src\" \"$dst\" \e[0m"
        mv "$src" "$dst"
        echo "$src" >> /tmp/moved
    else
        echo "\e[31m mv_nok \"$src\" \"$dst\" \e[0m"
        echo "$src" >> /tmp/not_moved
    fi

}
