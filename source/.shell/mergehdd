dupes(){
	n=$1
	shift
	array=("${@}")

	[ "`echo $array | grep $folder_2`" ] || start=2
	[ "`echo $array | grep $folder_2`" ] && start=1

	for a in `seq $start $n`
	do 
		[ "`echo ${array[$a]} | grep ^$rm_from`" ] && echo sudo rm -f "`escape2 "${array[$a]}"`"
	done
}

escape2(){
	echo $1 | sed -e 's/^/"/g' -e 's/$/"/g' -e 's/\$/\\$/g'
}

mkmv(){
	mkdir -p "`dirname "$2"`" 2>/dev/null
	/bin/mv "$1"  "`dirname "$2"`"/
}

mkcp(){
	mkdir -p "`dirname "$2"`" 2>/dev/null
	\cp "$1"  "`dirname "$2"`"/"`basename "$2"`"
}

mergehdd_rmdupes(){
	# Parameters
	rm_from=$1
	folder_2=$2

	# Remove used files
	rm -rf /tmp/dupes

	# Generate dupes file
	# sudo fdupes -r $rm_from $folder_2 > /tmp/dupes
	fdupes -r $rm_from $folder_2 > /tmp/dupes

	# Remove duplicates
	file=`head -n1 /tmp/dupes`
	n=1

	cat /tmp/dupes | while read file
	do
		if [ "$file" != "" ]
		then
			array[$n]="$file"
			n=$(($n + 1))
		else
			dupes $(($n-1)) "${array[@]}" | tee -a /tmp/rmdupes

			n=1
			array=()
		fi
	done
}

sync_partial_contents(){

    if [ $# -eq 3 ]
    then
        ls $1 | sort | uniq > /tmp/not_sync
        echo > /tmp/to_rm
    fi

    ls $1 | sort | uniq > /tmp/contents_1
    ls $2 | sort | uniq > /tmp/contents_2

    comm -12 /tmp/contents_1 /tmp/contents_2 > /tmp/intersection
    comm -23 /tmp/contents_1 /tmp/contents_2 > /tmp/in_a_not_b
    comm -13 /tmp/contents_1 /tmp/contents_2 > /tmp/in_b_not_a

    cat /tmp/intersection | while read line
    do
        rsync -vai --delete "$1/$line" "$2/$line"
    done

    comm -23 /tmp/not_sync /tmp/contents_2 > /tmp/aux
    cat /tmp/aux | sort | uniq > /tmp/not_sync

    cat /tmp/in_b_not_a /tmp/to_rm > /tmp/aux
    cat /tmp/aux | sort | uniq | egrep -v '^$' > /tmp/to_rm
}

